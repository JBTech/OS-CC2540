Zilog Z8 Encore! Macro Assembler Version 2.52 (11010702) 19-Oct-14     17:25:54     page:   1


PC     Object              I  Line    Source 
                           A     1    ; Zilog Z8 Encore! ANSI C Compiler Release 3.62
                           A     2    ; -nolocalcse -optsize -nofastcall -const=RAM -
                           A     3    ; -nooptlink -noregvar -reduceopt -debug -norev
                           A     4    ; -alias 
                           A     5    	DEFINE terface_TEXT,SPACE=ROM
                           A     6    	FILE	"..\INTERFACE.C"
                           A     7    .debug "C"
                           A     8    	SEGMENT FAR_BSS
000000                     A     9    _RxBuffer:
000000                     A    10    	DS	512
                           A    11    .define "RxBuffer"
                           A    12    .alias "_RxBuffer"
                           A    13    .class 83
                           A    14    .value _RxBuffer
                           A    15    .dim 512
                           A    16    .type 108
                           A    17    .type 0
                           A    18    .endef
                           A    19    	SEGMENT terface_TEXT
                           A    20    .begrec "NONAME0",4
                           A    21    .define "addr"
                           A    22    .value 0
                           A    23    .class 8
                           A    24    .type 12
                           A    25    .type 0
                           A    26    .endef
                           A    27    .define "ctl"
                           A    28    .value 1
                           A    29    .class 8
                           A    30    .type 12
                           A    31    .type 0
                           A    32    .endef
                           A    33    .define "out"
                           A    34    .value 2
                           A    35    .class 8
                           A    36    .type 12
                           A    37    .type 0
                           A    38    .endef
                           A    39    .define "in"
                           A    40    .value 3
                           A    41    .class 8
                           A    42    .type 12
                           A    43    .type 0
                           A    44    .endef
                           A    45    .endrec "NONAME0"
                           A    46    .begrec "NONAME1",6
                           A    47    .define "baudRate"
                           A    48    .value 0
                           A    49    .class 8
                           A    50    .type 5
                           A    51    .type 0
                           A    52    .endef
Zilog Z8 Encore! Macro Assembler Version 2.52 (11010702) 19-Oct-14     17:25:54     page:   2


PC     Object              I  Line    Source interface.src
                           A    53    .define "stopBits"
                           A    54    .value 4
                           A    55    .class 8
                           A    56    .type 12
                           A    57    .type 0
                           A    58    .endef
                           A    59    .define "parity"
                           A    60    .value 5
                           A    61    .class 8
                           A    62    .type 12
                           A    63    .type 0
                           A    64    .endef
                           A    65    .endrec "NONAME1"
                           A    66    .begrec "NONAME2",5
                           A    67    .define "pBuffer"
                           A    68    .value 0
                           A    69    .class 8
                           A    70    .type 172
                           A    71    .type 0
                           A    72    .endef
                           A    73    .define "next_in"
                           A    74    .value 2
                           A    75    .class 8
                           A    76    .type 12
                           A    77    .type 0
                           A    78    .endef
                           A    79    .define "next_out"
                           A    80    .value 3
                           A    81    .class 8
                           A    82    .type 12
                           A    83    .type 0
                           A    84    .endef
                           A    85    .define "size"
                           A    86    .value 4
                           A    87    .class 8
                           A    88    .type 12
                           A    89    .type 0
                           A    90    .endef
                           A    91    .endrec "NONAME2"
                           A    92    .begrec "NONAME3",4
                           A    93    .define "quot"
                           A    94    .value 0
                           A    95    .class 8
                           A    96    .type 3
                           A    97    .type 0
                           A    98    .endef
                           A    99    .define "rem"
                           A   100    .value 2
                           A   101    .class 8
                           A   102    .type 3
                           A   103    .type 0
                           A   104    .endef
Zilog Z8 Encore! Macro Assembler Version 2.52 (11010702) 19-Oct-14     17:25:54     page:   3


PC     Object              I  Line    Source interface.src
                           A   105    .endrec "NONAME3"
                           A   106    .begrec "NONAME4",8
                           A   107    .define "quot"
                           A   108    .value 0
                           A   109    .class 8
                           A   110    .type 5
                           A   111    .type 0
                           A   112    .endef
                           A   113    .define "rem"
                           A   114    .value 4
                           A   115    .class 8
                           A   116    .type 5
                           A   117    .type 0
                           A   118    .endef
                           A   119    .endrec "NONAME4"
                           A   120    .begrec "fmt_type",16
                           A   121    .define "status"
                           A   122    .value 0
                           A   123    .class 8
                           A   124    .type 12
                           A   125    .type 0
                           A   126    .endef
                           A   127    .define "flags"
                           A   128    .value 1
                           A   129    .class 8
                           A   130    .type 12
                           A   131    .type 0
                           A   132    .endef
                           A   133    .define "size"
                           A   134    .value 2
                           A   135    .class 8
                           A   136    .type 2
                           A   137    .type 0
                           A   138    .endef
                           A   139    .define "chr"
                           A   140    .value 3
                           A   141    .class 8
                           A   142    .type 2
                           A   143    .type 0
                           A   144    .endef
                           A   145    .define "type"
                           A   146    .value 4
                           A   147    .class 8
                           A   148    .type 2
                           A   149    .type 0
                           A   150    .endef
                           A   151    .define "field_width"
                           A   152    .value 5
                           A   153    .class 8
                           A   154    .type 2
                           A   155    .type 0
                           A   156    .endef
Zilog Z8 Encore! Macro Assembler Version 2.52 (11010702) 19-Oct-14     17:25:54     page:   4


PC     Object              I  Line    Source interface.src
                           A   157    .define "precision"
                           A   158    .value 6
                           A   159    .class 8
                           A   160    .type 2
                           A   161    .type 0
                           A   162    .endef
                           A   163    .define "set_begin"
                           A   164    .value 7
                           A   165    .class 8
                           A   166    .type 162
                           A   167    .type 0
                           A   168    .endef
                           A   169    .define "set_end"
                           A   170    .value 9
                           A   171    .class 8
                           A   172    .type 162
                           A   173    .type 0
                           A   174    .endef
                           A   175    .define "pad_whole"
                           A   176    .value 11
                           A   177    .class 8
                           A   178    .type 12
                           A   179    .type 0
                           A   180    .endef
                           A   181    .define "pad_pre_fract"
                           A   182    .value 12
                           A   183    .class 8
                           A   184    .type 12
                           A   185    .type 0
                           A   186    .endef
                           A   187    .define "pad_post_fract"
                           A   188    .value 13
                           A   189    .class 8
                           A   190    .type 12
                           A   191    .type 0
                           A   192    .endef
                           A   193    .define "pad_at"
                           A   194    .value 14
                           A   195    .class 8
                           A   196    .type 162
                           A   197    .type 0
                           A   198    .endef
                           A   199    .endrec "fmt_type"
                           A   200    .begrec "flt_info",12
                           A   201    .define "flags"
                           A   202    .value 0
                           A   203    .class 8
                           A   204    .type 12
                           A   205    .type 0
                           A   206    .endef
                           A   207    .define "exp"
                           A   208    .value 1
Zilog Z8 Encore! Macro Assembler Version 2.52 (11010702) 19-Oct-14     17:25:54     page:   5


PC     Object              I  Line    Source interface.src
                           A   209    .class 8
                           A   210    .type 2
                           A   211    .type 0
                           A   212    .endef
                           A   213    .define "digits"
                           A   214    .value 2
                           A   215    .class 8
                           A   216    .dim 10
                           A   217    .type 108
                           A   218    .type 0
                           A   219    .endef
                           A   220    .endrec "flt_info"
                           A   221    	SEGMENT FAR_BSS
000200                     A   222    _TxBuffer:
000200                     A   223    	DS	512
                           A   224    .define "TxBuffer"
                           A   225    .alias "_TxBuffer"
                           A   226    .class 83
                           A   227    .value _TxBuffer
                           A   228    .dim 512
                           A   229    .type 108
                           A   230    .type 0
                           A   231    .endef
000400                     A   232    _SPITxBuffer:
000400                     A   233    	DS	512
                           A   234    .define "SPITxBuffer"
                           A   235    .alias "_SPITxBuffer"
                           A   236    .class 83
                           A   237    .value _SPITxBuffer
                           A   238    .dim 512
                           A   239    .type 108
                           A   240    .type 0
                           A   241    .endef
000600                     A   242    _SPIRxBuffer:
000600                     A   243    	DS	512
                           A   244    .define "SPIRxBuffer"
                           A   245    .alias "_SPIRxBuffer"
                           A   246    .class 83
                           A   247    .value _SPIRxBuffer
                           A   248    .dim 512
                           A   249    .type 108
                           A   250    .type 0
                           A   251    .endef
000800                     A   252    _SPIBuffer:
000800                     A   253    	DS	512
                           A   254    .define "SPIBuffer"
                           A   255    .alias "_SPIBuffer"
                           A   256    .class 83
                           A   257    .value _SPIBuffer
                           A   258    .dim 512
                           A   259    .type 108
                           A   260    .type 0
Zilog Z8 Encore! Macro Assembler Version 2.52 (11010702) 19-Oct-14     17:25:54     page:   6


PC     Object              I  Line    Source interface.src
                           A   261    .endef
000A00                     A   262    _RxBufferPtr:
000A00                     A   263    	DS	2*1
                           A   264    .define "RxBufferPtr"
                           A   265    .alias "_RxBufferPtr"
                           A   266    .class 83
                           A   267    .value _RxBufferPtr
                           A   268    .type 13
                           A   269    .type 0
                           A   270    .endef
000A02                     A   271    _TxBufferPtr:
000A02                     A   272    	DS	2*1
                           A   273    .define "TxBufferPtr"
                           A   274    .alias "_TxBufferPtr"
                           A   275    .class 83
                           A   276    .value _TxBufferPtr
                           A   277    .type 13
                           A   278    .type 0
                           A   279    .endef
000A04                     A   280    _TxBufferPtrTemp:
000A04                     A   281    	DS	2*1
                           A   282    .define "TxBufferPtrTemp"
                           A   283    .alias "_TxBufferPtrTemp"
                           A   284    .class 83
                           A   285    .value _TxBufferPtrTemp
                           A   286    .type 13
                           A   287    .type 0
                           A   288    .endef
000A06                     A   289    _SPIRxBufferPtr:
000A06                     A   290    	DS	2*1
                           A   291    .define "SPIRxBufferPtr"
                           A   292    .alias "_SPIRxBufferPtr"
                           A   293    .class 83
                           A   294    .value _SPIRxBufferPtr
                           A   295    .type 13
                           A   296    .type 0
                           A   297    .endef
000A08                     A   298    _SPITxBufferPtr:
000A08                     A   299    	DS	2*1
                           A   300    .define "SPITxBufferPtr"
                           A   301    .alias "_SPITxBufferPtr"
                           A   302    .class 83
                           A   303    .value _SPITxBufferPtr
                           A   304    .type 13
                           A   305    .type 0
                           A   306    .endef
000A0A                     A   307    _TxInProgress:
000A0A                     A   308    	DS	1
                           A   309    .define "TxInProgress"
                           A   310    .alias "_TxInProgress"
                           A   311    .class 83
                           A   312    .value _TxInProgress
Zilog Z8 Encore! Macro Assembler Version 2.52 (11010702) 19-Oct-14     17:25:54     page:   7


PC     Object              I  Line    Source interface.src
                           A   313    .type 12
                           A   314    .type 0
                           A   315    .endef
000A0B                     A   316    _RxBufferPtrCurrent:
000A0B                     A   317    	DS	2*1
                           A   318    .define "RxBufferPtrCurrent"
                           A   319    .alias "_RxBufferPtrCurrent"
                           A   320    .class 83
                           A   321    .value _RxBufferPtrCurrent
                           A   322    .type 13
                           A   323    .type 0
                           A   324    .endef
000A0D                     A   325    _timer_ms_real:
000A0D                     A   326    	DS	1
                           A   327    .define "timer_ms_real"
                           A   328    .alias "_timer_ms_real"
                           A   329    .class 83
                           A   330    .value _timer_ms_real
                           A   331    .type 12
                           A   332    .type 0
                           A   333    .endef
000A0E                     A   334    _timer_ms:
000A0E                     A   335    	DS	2*1
                           A   336    .define "timer_ms"
                           A   337    .alias "_timer_ms"
                           A   338    .class 83
                           A   339    .value _timer_ms
                           A   340    .type 172
                           A   341    .type 0
                           A   342    .endef
000A10                     A   343    _PacketLength:
000A10                     A   344    	DS	2*1
                           A   345    .define "PacketLength"
                           A   346    .alias "_PacketLength"
                           A   347    .class 83
                           A   348    .value _PacketLength
                           A   349    .type 13
                           A   350    .type 0
                           A   351    .endef
000A12                     A   352    _PacketCommand:
000A12                     A   353    	DS	2*1
                           A   354    .define "PacketCommand"
                           A   355    .alias "_PacketCommand"
                           A   356    .class 83
                           A   357    .value _PacketCommand
                           A   358    .type 13
                           A   359    .type 0
                           A   360    .endef
000A14                     A   361    _PacketCommandTemp:
000A14                     A   362    	DS	2*1
                           A   363    .define "PacketCommandTemp"
                           A   364    .alias "_PacketCommandTemp"
Zilog Z8 Encore! Macro Assembler Version 2.52 (11010702) 19-Oct-14     17:25:54     page:   8


PC     Object              I  Line    Source interface.src
                           A   365    .class 83
                           A   366    .value _PacketCommandTemp
                           A   367    .type 13
                           A   368    .type 0
                           A   369    .endef
000A16                     A   370    _Temp1:
000A16                     A   371    	DS	2*1
                           A   372    .define "Temp1"
                           A   373    .alias "_Temp1"
                           A   374    .class 83
                           A   375    .value _Temp1
                           A   376    .type 13
                           A   377    .type 0
                           A   378    .endef
000A18                     A   379    _Temp2:
000A18                     A   380    	DS	2*1
                           A   381    .define "Temp2"
                           A   382    .alias "_Temp2"
                           A   383    .class 83
                           A   384    .value _Temp2
                           A   385    .type 13
                           A   386    .type 0
                           A   387    .endef
000A1A                     A   388    _flashid:
000A1A                     A   389    	DS	1
                           A   390    .define "flashid"
                           A   391    .alias "_flashid"
                           A   392    .class 83
                           A   393    .value _flashid
                           A   394    .type 12
                           A   395    .type 0
                           A   396    .endef
                           A   397    	SEGMENT ROM_DATA
                           A   398    
                           A   399    
                           A   400    ;**************************** _uart_tx_interrup
                           A   401    ;Name                         Addr/Register   S
                           A   402    ;_TxInProgress                       STATIC    
                           A   403    ;_TxBuffer                           STATIC    
                           A   404    ;_TxBufferPtrTemp                    STATIC    
                           A   405    ;_TxBufferPtr                        STATIC    
                           A   406    ;_SET_VECTOR                         IMPORT  --
                           A   407    
                           A   408    
                           A   409    ; Aggregate Stack Size: 0 (words)
                           A   410    
                           A   411    
                           A   412    	.FRAME _n_uart_tx_interrupt,?_n_uart_tx_int
                           A   413    	.FRAME _f_uart_tx_interrupt,?_f_uart_tx_int
                           A   414    	SEGMENT terface_TEXT
000000                     A   415    _uart_tx_interrupt:
                           A   416    .define "_uart_tx_interrupt"
Zilog Z8 Encore! Macro Assembler Version 2.52 (11010702) 19-Oct-14     17:25:54     page:   9


PC     Object              I  Line    Source interface.src
                           A   417    .value _uart_tx_interrupt
                           A   418    .class 2
                           A   419    .type 65
                           A   420    .type 0
                           A   421    .endef
                           A   422    .begfunc "uart_tx_interrupt",40,"_uart_tx_inter
000000 C8FFD0              A   423    	PUSHX	4093
000003 D6 0000             A   424    	CALL	__b_iframeset00
                           A   425    ;    1	#include <ez8.h>
                           A   426    ;    2	#include <STDLIB.H>
                           A   427    ;    3	#include <STRING.H>
                           A   428    ;    4	#include <STDIO.H>
                           A   429    ;    5	
                           A   430    ;    6	#define UART_RX_SIZE 512
                           A   431    ;    7	#define UART_TX_SIZE 512
                           A   432    ;    8	#define SPI_RX_SIZE 512
                           A   433    ;    9	#define SPI_TX_SIZE 512
                           A   434    ;   10	#define SPI_BUFFER_SIZE 512
                           A   435    ;   11	
                           A   436    ;   12	unsigned char RxBuffer		[UART_RX_SI
                           A   437    ;   13	unsigned char TxBuffer 		[UART_TX_SI
                           A   438    ;   14	unsigned char SPITxBuffer	[SPI_RX_SIZ
                           A   439    ;   15	unsigned char SPIRxBuffer	[SPI_TX_SIZ
                           A   440    ;   16	unsigned char SPIBuffer 	[SPI_BUFFER
                           A   441    ;   17	
                           A   442    ;   18	volatile unsigned short RxBufferPtr;
                           A   443    ;   19	volatile unsigned short TxBufferPtr;
                           A   444    ;   20	volatile unsigned short TxBufferPtrTemp
                           A   445    ;   21	volatile unsigned short SPIRxBufferPtr;
                           A   446    ;   22	volatile unsigned short SPITxBufferPtr;
                           A   447    ;   23	volatile unsigned char  TxInProgress;
                           A   448    ;   24	volatile unsigned short RxBufferPtrCurr
                           A   449    ;   25	
                           A   450    ;   26	volatile unsigned char timer_ms_real;
                           A   451    ;   27	volatile unsigned char * timer_ms;
                           A   452    ;   28	
                           A   453    ;   29	volatile unsigned short PacketLength;
                           A   454    ;   30	volatile unsigned short PacketCommand;
                           A   455    ;   31	volatile unsigned short PacketCommandTe
                           A   456    ;   32	
                           A   457    ;   33	volatile unsigned short Temp1;
                           A   458    ;   34	volatile unsigned short Temp2;
                           A   459    ;   35	
                           A   460    ;   36	volatile unsigned char flashid;
                           A   461    ;   37	
                           A   462    ;   38	#pragma interrupt
                           A   463    ;   39	void uart_tx_interrupt (void)
                           A   464    ;   40	{
                           A   465    ;   41		SET_VECTOR (UART0_TX, uart_tx_inter
                           A   466    ;   42		if (TxBufferPtr < TxBufferPtrTemp)
                           A   467    .line 42
000006 A8 A05A03           A   468    	CPX	_TxBufferPtr+1,_TxBufferPtrTemp+1
Zilog Z8 Encore! Macro Assembler Version 2.52 (11010702) 19-Oct-14     17:25:54     page:  10


PC     Object              I  Line    Source interface.src
00000A 1FA8 A04A02         A   469    	CPCX	_TxBufferPtr,_TxBufferPtrTemp
00000F FB 1E               A   470    	JR	NC,_1_L_2
                           A   471    ;   43		{
                           A   472    ;   44			U0TXD = TxBuffer[TxBufferPtr++]
                           A   473    .line 44
000011 840A02              A   474    	LDX	R0,_TxBufferPtr
000014 841A03              A   475    	LDX	R1,_TxBufferPtr+1
000017 2C 02               A   476    	LD	R2,#high(_TxBuffer)
000019 3C 00               A   477    	LD	R3,#low(_TxBuffer)
00001B 0231                A   478    	ADD	R3,R1
00001D 1220                A   479    	ADC	R2,R0
00001F 86E2E0              A   480    	LDX	R0,@RR2
000022 940F40              A   481    	LDX	3904,R0
000025 09010A03            A   482    	ADDX	_TxBufferPtr+1,#1
000029 19000A02            A   483    	ADCX	_TxBufferPtr,#-0
                           A   484    ;   45		}
                           A   485    ;   46		else
                           A   486    .line 46
00002D 8B 14               A   487    	JR	_1_L_3
00002F                     A   488    _1_L_2:
                           A   489    ;   47		{
                           A   490    ;   48			TxInProgress = FALSE;
                           A   491    .line 48
00002F E9000A0A            A   492    	LDX	_TxInProgress,#-0
                           A   493    ;   49			TxBufferPtr = 0;
                           A   494    .line 49
000033 E9000A02            A   495    	LDX	_TxBufferPtr,#-0
000037 E9000A03            A   496    	LDX	_TxBufferPtr+1,#-0
                           A   497    ;   50			TxBufferPtrTemp = 0;
                           A   498    .line 50
00003B E9000A04            A   499    	LDX	_TxBufferPtrTemp,#-0
00003F E9000A05            A   500    	LDX	_TxBufferPtrTemp+1,#-0
                           A   501    ;   51		}
000043                     A   502    _1_L_3:
                           A   503    .line 51
                           A   504    ;   52		IRQ0 &= 0xF7; // Clear Interrupt
                           A   505    .line 52
000043 59F70FC0            A   506    	ANDX	4032,#247
                           A   507    ;   53	}
                           A   508    .line 53
000047 D6 0000             A   509    	CALL	__b_iframereset
00004A BF                  A   510    	IRET	
                           A   511    .endfunc "uart_tx_interrupt",53,"_uart_tx_inter
                           A   512    	SEGMENT ROM_DATA
                           A   513    
                           A   514    
                           A   515    ;**************************** _uart_rx_interrup
                           A   516    ;Name                         Addr/Register   S
                           A   517    ;_RxBuffer                           STATIC    
                           A   518    ;_RxBufferPtr                        STATIC    
                           A   519    ;_SET_VECTOR                         IMPORT  --
                           A   520    
Zilog Z8 Encore! Macro Assembler Version 2.52 (11010702) 19-Oct-14     17:25:54     page:  11


PC     Object              I  Line    Source interface.src
                           A   521    
                           A   522    ; Aggregate Stack Size: 0 (words)
                           A   523    
                           A   524    
                           A   525    	.FRAME _n_uart_rx_interrupt,?_n_uart_rx_int
                           A   526    	.FRAME _f_uart_rx_interrupt,?_f_uart_rx_int
                           A   527    	SEGMENT terface_TEXT
00004B                     A   528    _uart_rx_interrupt:
                           A   529    .define "_uart_rx_interrupt"
                           A   530    .value _uart_rx_interrupt
                           A   531    .class 2
                           A   532    .type 65
                           A   533    .type 0
                           A   534    .endef
                           A   535    .begfunc "uart_rx_interrupt",57,"_uart_rx_inter
00004B C8FFD0              A   536    	PUSHX	4093
00004E D6 0000             A   537    	CALL	__b_iframeset00
                           A   538    ;   54	
                           A   539    ;   55	#pragma interrupt
                           A   540    ;   56	void uart_rx_interrupt (void)
                           A   541    ;   57	{
                           A   542    ;   58		SET_VECTOR (UART0_RX, uart_rx_inter
                           A   543    ;   59		if (U0STAT0 & 0x80)
                           A   544    .line 59
000051 79800F41            A   545    	TMX	3905,#128
000055 6B 33               A   546    	JR	Z,_2_L_8
                           A   547    ;   60		{
                           A   548    ;   61			RxBuffer[RxBufferPtr++] = U0RXD
                           A   549    .line 61
000057 840A00              A   550    	LDX	R0,_RxBufferPtr
00005A 841A01              A   551    	LDX	R1,_RxBufferPtr+1
00005D 2C 00               A   552    	LD	R2,#high(_RxBuffer)
00005F 3C 00               A   553    	LD	R3,#low(_RxBuffer)
000061 0231                A   554    	ADD	R3,R1
000063 1220                A   555    	ADC	R2,R0
000065 840F40              A   556    	LDX	R0,3904
000068 96E0E2              A   557    	LDX	@RR2,R0
00006B 09010A01            A   558    	ADDX	_RxBufferPtr+1,#1
00006F 19000A00            A   559    	ADCX	_RxBufferPtr,#-0
                           A   560    ;   62			if (RxBufferPtr == UART_RX_SIZE
                           A   561    .line 62
000073 A9000A01            A   562    	CPX	_RxBufferPtr+1,#-0
000077 1FA9020A 00         A   563    	CPCX	_RxBufferPtr,#2
00007C EB 0C               A   564    	JR	NE,_2_L_8
                           A   565    ;   63			{
                           A   566    ;   64				RxBufferPtr = 0; // Reset B
                           A   567    .line 64
00007E E9000A00            A   568    	LDX	_RxBufferPtr,#-0
000082 E9000A01            A   569    	LDX	_RxBufferPtr+1,#-0
                           A   570    ;   65				PAOUT ^= 0x02; // Blink LED
                           A   571    .line 65
000086 B9020FD3            A   572    	XORX	4051,#2
Zilog Z8 Encore! Macro Assembler Version 2.52 (11010702) 19-Oct-14     17:25:54     page:  12


PC     Object              I  Line    Source interface.src
                           A   573    ;   66			}
                           A   574    ;   67		}
00008A                     A   575    _2_L_8:
                           A   576    .line 67
                           A   577    ;   68		IRQ0 &= 0xEF; // Clear Interrupt
                           A   578    .line 68
00008A 59EF0FC0            A   579    	ANDX	4032,#239
                           A   580    ;   69	}
                           A   581    .line 69
00008E D6 0000             A   582    	CALL	__b_iframereset
000091 BF                  A   583    	IRET	
                           A   584    .endfunc "uart_rx_interrupt",69,"_uart_rx_inter
                           A   585    	SEGMENT ROM_DATA
                           A   586    
                           A   587    
                           A   588    ;**************************** _ms_timer_interru
                           A   589    ;Name                         Addr/Register   S
                           A   590    ;_timer_ms_real                      STATIC    
                           A   591    ;_SET_VECTOR                         IMPORT  --
                           A   592    
                           A   593    
                           A   594    ; Aggregate Stack Size: 0 (words)
                           A   595    
                           A   596    
                           A   597    	.FRAME _n_ms_timer_interrupt,?_n_ms_timer_i
                           A   598    	.FRAME _f_ms_timer_interrupt,?_f_ms_timer_i
                           A   599    	SEGMENT terface_TEXT
000092                     A   600    _ms_timer_interrupt:
                           A   601    .define "_ms_timer_interrupt"
                           A   602    .value _ms_timer_interrupt
                           A   603    .class 2
                           A   604    .type 65
                           A   605    .type 0
                           A   606    .endef
                           A   607    .begfunc "ms_timer_interrupt",73,"_ms_timer_int
000092 C8FFD0              A   608    	PUSHX	4093
000095 D6 0000             A   609    	CALL	__b_iframeset00
                           A   610    ;   70	
                           A   611    ;   71	#pragma interrupt
                           A   612    ;   72	void ms_timer_interrupt (void)
                           A   613    ;   73	{
                           A   614    ;   74		SET_VECTOR (TIMER0, ms_timer_interr
                           A   615    ;   75		timer_ms_real = 0; // End delay
                           A   616    .line 75
000098 E9000A0D            A   617    	LDX	_timer_ms_real,#-0
                           A   618    ;   76		T0CTL1 &=0x7F; // Disable Timer
                           A   619    .line 76
00009C 597F0F07            A   620    	ANDX	3847,#127
                           A   621    ;   77	}
                           A   622    .line 77
0000A0 D6 0000             A   623    	CALL	__b_iframereset
0000A3 BF                  A   624    	IRET	
Zilog Z8 Encore! Macro Assembler Version 2.52 (11010702) 19-Oct-14     17:25:54     page:  13


PC     Object              I  Line    Source interface.src
                           A   625    .endfunc "ms_timer_interrupt",77,"_ms_timer_int
                           A   626    	SEGMENT ROM_DATA
                           A   627    
                           A   628    
                           A   629    ;**************************** _spi_interrupt **
                           A   630    ;Name                         Addr/Register   S
                           A   631    ;_SPITxBufferPtr                     STATIC    
                           A   632    ;_SPIRxBuffer                        STATIC    
                           A   633    ;_SPIRxBufferPtr                     STATIC    
                           A   634    ;_SET_VECTOR                         IMPORT  --
                           A   635    
                           A   636    
                           A   637    ; Aggregate Stack Size: 0 (words)
                           A   638    
                           A   639    
                           A   640    	.FRAME _n_spi_interrupt,?_n_spi_interrupt,R
                           A   641    	.FRAME _f_spi_interrupt,?_f_spi_interrupt,E
                           A   642    	SEGMENT terface_TEXT
0000A4                     A   643    _spi_interrupt:
                           A   644    .define "_spi_interrupt"
                           A   645    .value _spi_interrupt
                           A   646    .class 2
                           A   647    .type 65
                           A   648    .type 0
                           A   649    .endef
                           A   650    .begfunc "spi_interrupt",81,"_spi_interrupt"
0000A4 C8FFD0              A   651    	PUSHX	4093
0000A7 D6 0000             A   652    	CALL	__b_iframeset00
                           A   653    ;   78	
                           A   654    ;   79	#pragma interrupt
                           A   655    ;   80	void spi_interrupt (void)
                           A   656    ;   81	{
                           A   657    ;   82		SET_VECTOR (SPI, spi_interrupt);
                           A   658    ;   83		SPISTAT |= 0x80;
                           A   659    .line 83
0000AA 49800F62            A   660    	ORX	3938,#128
                           A   661    ;   84		SPIRxBuffer[SPIRxBufferPtr++] = SPI
                           A   662    .line 84
0000AE 840A06              A   663    	LDX	R0,_SPIRxBufferPtr
0000B1 841A07              A   664    	LDX	R1,_SPIRxBufferPtr+1
0000B4 2C 06               A   665    	LD	R2,#high(_SPIRxBuffer)
0000B6 3C 00               A   666    	LD	R3,#low(_SPIRxBuffer)
0000B8 0231                A   667    	ADD	R3,R1
0000BA 1220                A   668    	ADC	R2,R0
0000BC 840F60              A   669    	LDX	R0,3936
0000BF 96E0E2              A   670    	LDX	@RR2,R0
0000C2 09010A07            A   671    	ADDX	_SPIRxBufferPtr+1,#1
0000C6 19000A06            A   672    	ADCX	_SPIRxBufferPtr,#-0
                           A   673    ;   85		SPITxBufferPtr &= (SPI_RX_SIZE - 1)
                           A   674    .line 85
0000CA 59FF0A09            A   675    	ANDX	_SPITxBufferPtr+1,#255
0000CE 59010A08            A   676    	ANDX	_SPITxBufferPtr,#1
Zilog Z8 Encore! Macro Assembler Version 2.52 (11010702) 19-Oct-14     17:25:54     page:  14


PC     Object              I  Line    Source interface.src
                           A   677    ;   86	}
                           A   678    .line 86
0000D2 D6 0000             A   679    	CALL	__b_iframereset
0000D5 BF                  A   680    	IRET	
                           A   681    .endfunc "spi_interrupt",86,"_spi_interrupt"
                           A   682    	SEGMENT ROM_DATA
                           A   683    
                           A   684    
                           A   685    ;**************************** _setup_board ****
                           A   686    ;Name                         Addr/Register   S
                           A   687    ;_EI                                 IMPORT  --
                           A   688    ;_setmodeAltFunc_PortA               IMPORT  --
                           A   689    ;_setmodeOutput_PortA                IMPORT  --
                           A   690    ;_open_PortA                         IMPORT  --
                           A   691    ;_DI                                 IMPORT  --
                           A   692    
                           A   693    
                           A   694    ; Aggregate Stack Size: 0 (words)
                           A   695    
                           A   696    
                           A   697    	.FRAME _n_setup_board,?_n_setup_board,RDATA
                           A   698    	.FCALL _n_open_PortA
                           A   699    	.FCALL _n_setmodeOutput_PortA
                           A   700    	.FCALL _n_setmodeAltFunc_PortA
                           A   701    	.FRAME _f_setup_board,?_f_setup_board,EDATA
                           A   702    	.FCALL _f_open_PortA
                           A   703    	.FCALL _f_setmodeOutput_PortA
                           A   704    	.FCALL _f_setmodeAltFunc_PortA
                           A   705    	SEGMENT terface_TEXT
0000D6                     A   706    _setup_board:
                           A   707    .define "_setup_board"
                           A   708    .value _setup_board
                           A   709    .class 2
                           A   710    .type 65
                           A   711    .type 0
                           A   712    .endef
                           A   713    .begfunc "setup_board",89,"_setup_board"
0000D6 D6 0000             A   714    	CALL	__b_frameset00
                           A   715    ;   87	
                           A   716    ;   88	void setup_board()
                           A   717    ;   89	{
                           A   718    ;   90		DI();
                           A   719    .line 90
0000D9 8F                  A   720    	DI
                           A   721    ;   91		
                           A   722    ;   92		open_PortA();
                           A   723    .line 92
0000DA D6 0000             A   724    	CALL	_open_PortA
                           A   725    ;   93		setmodeOutput_PortA ( PORTPIN_ZERO 
                           A   726    .line 93
0000DD 1F7007              A   727    	PUSH	#7
0000E0 D6 0000             A   728    	CALL	_setmodeOutput_PortA
Zilog Z8 Encore! Macro Assembler Version 2.52 (11010702) 19-Oct-14     17:25:54     page:  15


PC     Object              I  Line    Source interface.src
0000E3 50E0                A   729    	POP	R0
                           A   730    ;   94		setmodeAltFunc_PortA( PORTPIN_FOUR|
                           A   731    .line 94
0000E5 1F7030              A   732    	PUSH	#48
0000E8 D6 0000             A   733    	CALL	_setmodeAltFunc_PortA
0000EB 50E0                A   734    	POP	R0
                           A   735    ;   95		PAOUT = 0x0;
                           A   736    .line 95
0000ED E9000FD3            A   737    	LDX	4051,#-0
                           A   738    ;   96		
                           A   739    ;   97		U0BR = 0x0005;
                           A   740    .line 97
0000F1 E9000F46            A   741    	LDX	3910,#-0
0000F5 E9050F47            A   742    	LDX	3911,#5
                           A   743    ;   98		U0CTL0 |= UART_CTL0_TEN | UART_CTL0
                           A   744    .line 98
0000F9 49C00F42            A   745    	ORX	3906,#192
                           A   746    ;   99		
                           A   747    ;  100			
                           A   748    ;  101		PCADDR = 0x02;
                           A   749    .line 101
0000FD E9020FD8            A   750    	LDX	4056,#2
                           A   751    ;  102		PCCTL = 0x3C;
                           A   752    .line 102
000101 E93C0FD9            A   753    	LDX	4057,#60
                           A   754    ;  103			
                           A   755    ;  104		SPIBR = 0x0030;
                           A   756    .line 104
000105 E9000F66            A   757    	LDX	3942,#-0
000109 E9300F67            A   758    	LDX	3943,#48
                           A   759    ;  105		//SPIBR = 262;
                           A   760    ;  106		SPIMODE = 0x03;
                           A   761    .line 106
00010D E9030F63            A   762    	LDX	3939,#3
                           A   763    ;  107		SPICTL = 0x83;
                           A   764    .line 107
000111 E9830F61            A   765    	LDX	3937,#131
                           A   766    ;  108		
                           A   767    ;  109		IRQ0ENH |= 0x1A;
                           A   768    .line 109
000115 491A0FC1            A   769    	ORX	4033,#26
                           A   770    ;  110		IRQ0ENL |= 0x1A;
                           A   771    .line 110
000119 491A0FC2            A   772    	ORX	4034,#26
                           A   773    ;  111		
                           A   774    ;  112		T0CTL1 = 0x38;
                           A   775    .line 112
00011D E9380F07            A   776    	LDX	3847,#56
                           A   777    ;  113		
                           A   778    ;  114		EI();
                           A   779    .line 114
000121 9F                  A   780    	EI
Zilog Z8 Encore! Macro Assembler Version 2.52 (11010702) 19-Oct-14     17:25:54     page:  16


PC     Object              I  Line    Source interface.src
                           A   781    ;  115	}
                           A   782    .line 115
000122 D6 0000             A   783    	CALL	__b_framereset
000125 AF                  A   784    	RET	
                           A   785    .endfunc "setup_board",115,"_setup_board"
                           A   786    	SEGMENT ROM_DATA
                           A   787    
                           A   788    
                           A   789    ;**************************** _delayMS ********
                           A   790    ;Name                         Addr/Register   S
                           A   791    ;_timer_ms                           STATIC    
                           A   792    ;_timer_ms_real                      STATIC    
                           A   793    ;ms                                   R15+4    
                           A   794    
                           A   795    
                           A   796    ; Aggregate Stack Size: 0 (words)
                           A   797    
                           A   798    
                           A   799    	.FRAME _n_delayMS,?_n_delayMS,RDATA
                           A   800    	.FRAME _f_delayMS,?_f_delayMS,EDATA
                           A   801    	SEGMENT terface_TEXT
000126                     A   802    _delayMS:
                           A   803    .define "_delayMS"
                           A   804    .value _delayMS
                           A   805    .class 2
                           A   806    .type 65
                           A   807    .type 0
                           A   808    .endef
                           A   809    .begfunc "delayMS",118,"_delayMS"
                           A   810    .define "ms"
                           A   811    .class 9
                           A   812    .value 4
                           A   813    .type 13
                           A   814    .type 0
                           A   815    .endef
000126 D6 0000             A   816    	CALL	__b_frameset00
                           A   817    ;  116	
                           A   818    ;  117	void delayMS (unsigned short ms)
                           A   819    ;  118	{
                           A   820    ;  119		timer_ms_real = 1;
                           A   821    .line 119
000129 E9010A0D            A   822    	LDX	_timer_ms_real,#1
                           A   823    ;  120		T0 = 0x0000;
                           A   824    .line 120
00012D E9000F00            A   825    	LDX	3840,#-0
000131 E9000F01            A   826    	LDX	3841,#-0
                           A   827    ;  121		T0R = (144 * ms);
                           A   828    .line 121
000135 B0E2                A   829    	CLR	R2
000137 3C90                A   830    	LD	R3,#144
000139 880E04              A   831    	LDX	R0,4(RR14)
00013C 881E05              A   832    	LDX	R1,5(RR14)
Zilog Z8 Encore! Macro Assembler Version 2.52 (11010702) 19-Oct-14     17:25:54     page:  17


PC     Object              I  Line    Source interface.src
00013F D6 0000             A   833    	CALL	__b_uwmul
000142 942F02              A   834    	LDX	3842,R2
000145 943F03              A   835    	LDX	3843,R3
                           A   836    ;  122		T0CTL1 |= 0x80;
                           A   837    .line 122
000148 49800F07            A   838    	ORX	3847,#128
                           A   839    ;  123		while (*timer_ms == 1)
00014C                     A   840    _6_L_14:
                           A   841    .line 123
00014C 840A0E              A   842    	LDX	R0,_timer_ms
00014F 841A0F              A   843    	LDX	R1,_timer_ms+1
000152 86E0E2              A   844    	LDX	R2,@RR0
000155 A6E201              A   845    	CP	R2,#1
000158 6B F2               A   846    	JR	Z,_6_L_14
                           A   847    ;  124		{
                           A   848    ;  125			
                           A   849    ;  126		}
                           A   850    .line 126
                           A   851    ;  127	}
                           A   852    .line 127
00015A D6 0000             A   853    	CALL	__b_framereset
00015D AF                  A   854    	RET	
                           A   855    .endfunc "delayMS",127,"_delayMS"
                           A   856    	SEGMENT ROM_DATA
                           A   857    
                           A   858    
                           A   859    ;**************************** _GetPacketData **
                           A   860    ;Name                         Addr/Register   S
                           A   861    ;_RxBuffer                           STATIC    
                           A   862    ;_RxBufferPtrCurrent                 STATIC    
                           A   863    ;realaddr                             R15-2    
                           A   864    ;address                              R15+4    
                           A   865    
                           A   866    
                           A   867    ; Aggregate Stack Size: -2 (words)
                           A   868    
                           A   869    
                           A   870    	.FRAME _n_GetPacketData,?_n_GetPacketData,R
                           A   871    	.FRAME _f_GetPacketData,?_f_GetPacketData,E
                           A   872    	SEGMENT terface_TEXT
00015E                     A   873    _GetPacketData:
                           A   874    .define "_GetPacketData"
                           A   875    .value _GetPacketData
                           A   876    .class 2
                           A   877    .type 76
                           A   878    .type 0
                           A   879    .endef
                           A   880    .begfunc "GetPacketData",130,"_GetPacketData"
                           A   881    .define "address"
                           A   882    .class 9
                           A   883    .value 4
                           A   884    .type 13
Zilog Z8 Encore! Macro Assembler Version 2.52 (11010702) 19-Oct-14     17:25:54     page:  18


PC     Object              I  Line    Source interface.src
                           A   885    .type 0
                           A   886    .endef
                           A   887    ;  128	
                           A   888    ;  129	unsigned char GetPacketData(unsigned sh
                           A   889    ;  130	{
                           A   890    .define "realaddr"
                           A   891    .class 1
                           A   892    .value -2
                           A   893    .type 13
                           A   894    .type 0
                           A   895    .endef
00015E 5C02                A   896    	LD	R5,#2
000160 D6 0000             A   897    	CALL	__b_frameset0
                           A   898    ;  131		unsigned short realaddr = (address 
                           A   899    .line 131
000163 881E04              A   900    	LDX	R1,4(RR14)
000166 880E05              A   901    	LDX	R0,5(RR14)
000169 08 A0CEE0           A   902    	ADDX	R0,_RxBufferPtrCurrent+1
00016D 18 A0BEE1           A   903    	ADCX	R1,_RxBufferPtrCurrent
000171 B0E3                A   904    	CLR	R3
000173 2C04                A   905    	LD	R2,#4
000175 0220                A   906    	ADD	R2,R0
000177 1231                A   907    	ADC	R3,R1
000179 89E3FE              A   908    	LDX	-2(RR14),R3
00017C 89E2FF              A   909    	LDX	-1(RR14),R2
                           A   910    ;  132		while (realaddr >= UART_RX_SIZE)
00017F                     A   911    _7_L_17:
                           A   912    .line 132
00017F 880EFE              A   913    	LDX	R0,-2(RR14)
000182 881EFF              A   914    	LDX	R1,-1(RR14)
000185 A6E100              A   915    	CP	R1,#0
000188 1FA6E002            A   916    	CPC	R0,#2
00018C 7B 14               A   917    	JR	C,_7_L_19
                           A   918    ;  133			realaddr -= UART_RX_SIZE;
                           A   919    .line 133
00018E 881EFE              A   920    	LDX	R1,-2(RR14)
000191 880EFF              A   921    	LDX	R0,-1(RR14)
000194 26E000              A   922    	SUB	R0,#0
000197 36E102              A   923    	SBC	R1,#2
00019A 89E1FE              A   924    	LDX	-2(RR14),R1
00019D 89E0FF              A   925    	LDX	-1(RR14),R0
0001A0 8B DD               A   926    	JR	_7_L_17
0001A2                     A   927    _7_L_19:
                           A   928    ;  134		return RxBuffer[realaddr];
                           A   929    .line 134
0001A2 880EFE              A   930    	LDX	R0,-2(RR14)
0001A5 881EFF              A   931    	LDX	R1,-1(RR14)
0001A8 2C 00               A   932    	LD	R2,#high(_RxBuffer)
0001AA 3C 00               A   933    	LD	R3,#low(_RxBuffer)
0001AC 0231                A   934    	ADD	R3,R1
0001AE 1220                A   935    	ADC	R2,R0
0001B0 86E2E0              A   936    	LDX	R0,@RR2
Zilog Z8 Encore! Macro Assembler Version 2.52 (11010702) 19-Oct-14     17:25:54     page:  19


PC     Object              I  Line    Source interface.src
                           A   937    ;  135	}
                           A   938    .line 135
0001B3 D6 0000             A   939    	CALL	__b_framereset
0001B6 AF                  A   940    	RET	
                           A   941    .endfunc "GetPacketData",135,"_GetPacketData"
                           A   942    	SEGMENT ROM_DATA
                           A   943    
                           A   944    
                           A   945    ;**************************** _GetHeaderData **
                           A   946    ;Name                         Addr/Register   S
                           A   947    ;_RxBuffer                           STATIC    
                           A   948    ;_RxBufferPtrCurrent                 STATIC    
                           A   949    ;realaddr                             R15-2    
                           A   950    ;address                              R15+4    
                           A   951    
                           A   952    
                           A   953    ; Aggregate Stack Size: -2 (words)
                           A   954    
                           A   955    
                           A   956    	.FRAME _n_GetHeaderData,?_n_GetHeaderData,R
                           A   957    	.FRAME _f_GetHeaderData,?_f_GetHeaderData,E
                           A   958    	SEGMENT terface_TEXT
0001B7                     A   959    _GetHeaderData:
                           A   960    .define "_GetHeaderData"
                           A   961    .value _GetHeaderData
                           A   962    .class 2
                           A   963    .type 76
                           A   964    .type 0
                           A   965    .endef
                           A   966    .begfunc "GetHeaderData",138,"_GetHeaderData"
                           A   967    .define "address"
                           A   968    .class 9
                           A   969    .value 4
                           A   970    .type 13
                           A   971    .type 0
                           A   972    .endef
                           A   973    ;  136	
                           A   974    ;  137	unsigned char GetHeaderData(unsigned sh
                           A   975    ;  138	{
                           A   976    .define "realaddr"
                           A   977    .class 1
                           A   978    .value -2
                           A   979    .type 13
                           A   980    .type 0
                           A   981    .endef
0001B7 5C02                A   982    	LD	R5,#2
0001B9 D6 0000             A   983    	CALL	__b_frameset0
                           A   984    ;  139		unsigned short realaddr = (address 
                           A   985    .line 139
0001BC 881E04              A   986    	LDX	R1,4(RR14)
0001BF 880E05              A   987    	LDX	R0,5(RR14)
0001C2 08 A0CEE0           A   988    	ADDX	R0,_RxBufferPtrCurrent+1
Zilog Z8 Encore! Macro Assembler Version 2.52 (11010702) 19-Oct-14     17:25:54     page:  20


PC     Object              I  Line    Source interface.src
0001C6 18 A0BEE1           A   989    	ADCX	R1,_RxBufferPtrCurrent
0001CA 89E1FE              A   990    	LDX	-2(RR14),R1
0001CD 89E0FF              A   991    	LDX	-1(RR14),R0
                           A   992    ;  140		while (realaddr >= UART_RX_SIZE)
0001D0                     A   993    _8_L_21:
                           A   994    .line 140
0001D0 880EFE              A   995    	LDX	R0,-2(RR14)
0001D3 881EFF              A   996    	LDX	R1,-1(RR14)
0001D6 A6E100              A   997    	CP	R1,#0
0001D9 1FA6E002            A   998    	CPC	R0,#2
0001DD 7B 14               A   999    	JR	C,_8_L_23
                           A  1000    ;  141			realaddr -= UART_RX_SIZE;
                           A  1001    .line 141
0001DF 881EFE              A  1002    	LDX	R1,-2(RR14)
0001E2 880EFF              A  1003    	LDX	R0,-1(RR14)
0001E5 26E000              A  1004    	SUB	R0,#0
0001E8 36E102              A  1005    	SBC	R1,#2
0001EB 89E1FE              A  1006    	LDX	-2(RR14),R1
0001EE 89E0FF              A  1007    	LDX	-1(RR14),R0
0001F1 8B DD               A  1008    	JR	_8_L_21
0001F3                     A  1009    _8_L_23:
                           A  1010    ;  142		return RxBuffer[realaddr];
                           A  1011    .line 142
0001F3 880EFE              A  1012    	LDX	R0,-2(RR14)
0001F6 881EFF              A  1013    	LDX	R1,-1(RR14)
0001F9 2C 00               A  1014    	LD	R2,#high(_RxBuffer)
0001FB 3C 00               A  1015    	LD	R3,#low(_RxBuffer)
0001FD 0231                A  1016    	ADD	R3,R1
0001FF 1220                A  1017    	ADC	R2,R0
000201 86E2E0              A  1018    	LDX	R0,@RR2
                           A  1019    ;  143	}
                           A  1020    .line 143
000204 D6 0000             A  1021    	CALL	__b_framereset
000207 AF                  A  1022    	RET	
                           A  1023    .endfunc "GetHeaderData",143,"_GetHeaderData"
                           A  1024    	SEGMENT ROM_DATA
                           A  1025    
                           A  1026    
                           A  1027    ;**************************** _SendPacket *****
                           A  1028    ;Name                         Addr/Register   S
                           A  1029    ;_TxBufferPtr                        STATIC    
                           A  1030    ;_TxBufferPtrTemp                    STATIC    
                           A  1031    ;_memcpy                             IMPORT  --
                           A  1032    ;_TxBuffer                           STATIC    
                           A  1033    ;_TxInProgress                       STATIC    
                           A  1034    ;txtmp                                R15-4    
                           A  1035    ;length                               R15-2    
                           A  1036    ;dlen                                 R15+8    
                           A  1037    ;data                                 R15+6    
                           A  1038    ;command                              R15+4    
                           A  1039    
                           A  1040    
Zilog Z8 Encore! Macro Assembler Version 2.52 (11010702) 19-Oct-14     17:25:54     page:  21


PC     Object              I  Line    Source interface.src
                           A  1041    ; Aggregate Stack Size: -4 (words)
                           A  1042    
                           A  1043    
                           A  1044    	.FRAME _n_SendPacket,?_n_SendPacket,RDATA
                           A  1045    	.FCALL _n_memcpy
                           A  1046    	.FRAME _f_SendPacket,?_f_SendPacket,EDATA
                           A  1047    	.FCALL _f_memcpy
                           A  1048    	SEGMENT terface_TEXT
000208                     A  1049    _SendPacket:
                           A  1050    .define "_SendPacket"
                           A  1051    .value _SendPacket
                           A  1052    .class 2
                           A  1053    .type 65
                           A  1054    .type 0
                           A  1055    .endef
                           A  1056    .begfunc "SendPacket",146,"_SendPacket"
                           A  1057    .define "command"
                           A  1058    .class 9
                           A  1059    .value 4
                           A  1060    .type 13
                           A  1061    .type 0
                           A  1062    .endef
                           A  1063    .define "data"
                           A  1064    .class 9
                           A  1065    .value 6
                           A  1066    .type 172
                           A  1067    .type 0
                           A  1068    .endef
                           A  1069    .define "dlen"
                           A  1070    .class 9
                           A  1071    .value 8
                           A  1072    .type 13
                           A  1073    .type 0
                           A  1074    .endef
                           A  1075    ;  144	
                           A  1076    ;  145	void SendPacket (unsigned short command
                           A  1077    ;  146	{
                           A  1078    .define "length"
                           A  1079    .class 1
                           A  1080    .value -2
                           A  1081    .type 13
                           A  1082    .type 0
                           A  1083    .endef
                           A  1084    .define "txtmp"
                           A  1085    .class 1
                           A  1086    .value -4
                           A  1087    .type 172
                           A  1088    .type 0
                           A  1089    .endef
000208 5C04                A  1090    	LD	R5,#4
00020A D6 0000             A  1091    	CALL	__b_frameset0
                           A  1092    ;  147		unsigned short length = 4 + dlen;
Zilog Z8 Encore! Macro Assembler Version 2.52 (11010702) 19-Oct-14     17:25:54     page:  22


PC     Object              I  Line    Source interface.src
                           A  1093    .line 147
00020D 881E08              A  1094    	LDX	R1,8(RR14)
000210 880E09              A  1095    	LDX	R0,9(RR14)
000213 06E004              A  1096    	ADD	R0,#4
000216 16E100              A  1097    	ADC	R1,#0
000219 89E1FE              A  1098    	LDX	-2(RR14),R1
00021C 89E0FF              A  1099    	LDX	-1(RR14),R0
                           A  1100    ;  148		unsigned char * txtmp = &TxInProgre
                           A  1101    .line 148
00021F 0C 0A               A  1102    	LD	R0,#high(_TxInProgress)
000221 1C 0A               A  1103    	LD	R1,#low(_TxInProgress)
000223 89E0FC              A  1104    	LDX	-4(RR14),R0
000226 89E1FD              A  1105    	LDX	-3(RR14),R1
                           A  1106    ;  149	
                           A  1107    ;  150		while (*txtmp == TRUE);
000229                     A  1108    _9_L_25:
                           A  1109    .line 150
000229 880EFC              A  1110    	LDX	R0,-4(RR14)
00022C 881EFD              A  1111    	LDX	R1,-3(RR14)
00022F 86E0E2              A  1112    	LDX	R2,@RR0
000232 A6E201              A  1113    	CP	R2,#1
000235 6B F2               A  1114    	JR	Z,_9_L_25
                           A  1115    ;  151		
                           A  1116    ;  152		TxBuffer[0] = length & 0xFF;
                           A  1117    .line 152
000237 880EFF              A  1118    	LDX	R0,-1(RR14)
00023A 940200              A  1119    	LDX	_TxBuffer,R0
                           A  1120    ;  153		TxBuffer[1] = length >> 8;
                           A  1121    .line 153
00023D 880EFE              A  1122    	LDX	R0,-2(RR14)
000240 940201              A  1123    	LDX	_TxBuffer+1,R0
                           A  1124    ;  154		TxBuffer[2] = command & 0xFF;
                           A  1125    .line 154
000243 880E05              A  1126    	LDX	R0,5(RR14)
000246 940202              A  1127    	LDX	_TxBuffer+2,R0
                           A  1128    ;  155		TxBuffer[3] = command >> 8;
                           A  1129    .line 155
000249 880E04              A  1130    	LDX	R0,4(RR14)
00024C 940203              A  1131    	LDX	_TxBuffer+3,R0
                           A  1132    ;  156	
                           A  1133    ;  157		memcpy (TxBuffer+4, data, length);
                           A  1134    .line 157
00024F 880EFE              A  1135    	LDX	R0,-2(RR14)
000252 881EFF              A  1136    	LDX	R1,-1(RR14)
000255 70E1                A  1137    	PUSH	R1
000257 70E0                A  1138    	PUSH	R0
000259 880E06              A  1139    	LDX	R0,6(RR14)
00025C 881E07              A  1140    	LDX	R1,7(RR14)
00025F 70E1                A  1141    	PUSH	R1
000261 70E0                A  1142    	PUSH	R0
000263 1F70 04             A  1143    	PUSH	#low(_TxBuffer+4)
000266 1F70 02             A  1144    	PUSH	#high(_TxBuffer+4)
Zilog Z8 Encore! Macro Assembler Version 2.52 (11010702) 19-Oct-14     17:25:54     page:  23


PC     Object              I  Line    Source interface.src
000269 D6 0000             A  1145    	CALL	_memcpy
00026C 2F                  A  1146    	ATM	
00026D 09060FFF            A  1147    	ADDX	4095,#6
000271 19000FFE            A  1148    	ADCX	4094,#-0
                           A  1149    ;  158		
                           A  1150    ;  159		TxInProgress = TRUE;
                           A  1151    .line 159
000275 E9010A0A            A  1152    	LDX	_TxInProgress,#1
                           A  1153    ;  160		TxBufferPtrTemp = length;
                           A  1154    .line 160
000279 880EFE              A  1155    	LDX	R0,-2(RR14)
00027C 881EFF              A  1156    	LDX	R1,-1(RR14)
00027F 940A04              A  1157    	LDX	_TxBufferPtrTemp,R0
000282 941A05              A  1158    	LDX	_TxBufferPtrTemp+1,R1
                           A  1159    ;  161		IRQ0 &= 0xF7; // Clear Interrupt
                           A  1160    .line 161
000285 59F70FC0            A  1161    	ANDX	4032,#247
                           A  1162    ;  162		U0TXD = TxBuffer[TxBufferPtr++];
                           A  1163    .line 162
000289 840A02              A  1164    	LDX	R0,_TxBufferPtr
00028C 841A03              A  1165    	LDX	R1,_TxBufferPtr+1
00028F 2C 02               A  1166    	LD	R2,#high(_TxBuffer)
000291 3C 00               A  1167    	LD	R3,#low(_TxBuffer)
000293 0231                A  1168    	ADD	R3,R1
000295 1220                A  1169    	ADC	R2,R0
000297 86E2E0              A  1170    	LDX	R0,@RR2
00029A 940F40              A  1171    	LDX	3904,R0
00029D 09010A03            A  1172    	ADDX	_TxBufferPtr+1,#1
0002A1 19000A02            A  1173    	ADCX	_TxBufferPtr,#-0
                           A  1174    ;  163	}
                           A  1175    .line 163
0002A5 D6 0000             A  1176    	CALL	__b_framereset
0002A8 AF                  A  1177    	RET	
                           A  1178    .endfunc "SendPacket",163,"_SendPacket"
                           A  1179    	SEGMENT ROM_DATA
                           A  1180    
                           A  1181    
                           A  1182    ;**************************** _GetLength ******
                           A  1183    ;Name                         Addr/Register   S
                           A  1184    ;_RxBufferPtrCurrent                 STATIC    
                           A  1185    ;_RxBufferPtr                        STATIC    
                           A  1186    ;length                               R15-2    
                           A  1187    
                           A  1188    
                           A  1189    ; Aggregate Stack Size: -2 (words)
                           A  1190    
                           A  1191    
                           A  1192    	.FRAME _n_GetLength,?_n_GetLength,RDATA
                           A  1193    	.FRAME _f_GetLength,?_f_GetLength,EDATA
                           A  1194    	SEGMENT terface_TEXT
0002A9                     A  1195    _GetLength:
                           A  1196    .define "_GetLength"
Zilog Z8 Encore! Macro Assembler Version 2.52 (11010702) 19-Oct-14     17:25:54     page:  24


PC     Object              I  Line    Source interface.src
                           A  1197    .value _GetLength
                           A  1198    .class 2
                           A  1199    .type 77
                           A  1200    .type 0
                           A  1201    .endef
                           A  1202    .begfunc "GetLength",166,"_GetLength"
                           A  1203    ;  164	
                           A  1204    ;  165	unsigned short GetLength()
                           A  1205    ;  166	{
                           A  1206    .define "length"
                           A  1207    .class 1
                           A  1208    .value -2
                           A  1209    .type 13
                           A  1210    .type 0
                           A  1211    .endef
0002A9 5C02                A  1212    	LD	R5,#2
0002AB D6 0000             A  1213    	CALL	__b_frameset0
                           A  1214    ;  167		unsigned short length = 0xFFFF;
                           A  1215    .line 167
0002AE 0CFF                A  1216    	LD	R0,#255
0002B0 1CFF                A  1217    	LD	R1,#255
0002B2 89E0FE              A  1218    	LDX	-2(RR14),R0
0002B5 89E1FF              A  1219    	LDX	-1(RR14),R1
                           A  1220    ;  168		while (length > UART_RX_SIZE)
0002B8                     A  1221    _10_L_32:
                           A  1222    .line 168
0002B8 880EFE              A  1223    	LDX	R0,-2(RR14)
0002BB 881EFF              A  1224    	LDX	R1,-1(RR14)
0002BE A6E100              A  1225    	CP	R1,#0
0002C1 1FA6E002            A  1226    	CPC	R0,#2
0002C5 3B 3D               A  1227    	JR	ULE,_10_L_34
                           A  1228    ;  169		{
                           A  1229    ;  170			if (RxBufferPtr < RxBufferPtrCu
                           A  1230    .line 170
0002C7 A8 A0CA01           A  1231    	CPX	_RxBufferPtr+1,_RxBufferPtrCurrent+1
0002CB 1FA8 A0BA00         A  1232    	CPCX	_RxBufferPtr,_RxBufferPtrCurrent
0002D0 FB 1C               A  1233    	JR	NC,_10_L_31
                           A  1234    ;  171				length = (RxBufferPtr + UAR
                           A  1235    .line 171
0002D2 841A00              A  1236    	LDX	R1,_RxBufferPtr
0002D5 840A01              A  1237    	LDX	R0,_RxBufferPtr+1
0002D8 06E000              A  1238    	ADD	R0,#0
0002DB 16E102              A  1239    	ADC	R1,#2
0002DE 28 A0CEE0           A  1240    	SUBX	R0,_RxBufferPtrCurrent+1
0002E2 38 A0BEE1           A  1241    	SBCX	R1,_RxBufferPtrCurrent
0002E6 89E1FE              A  1242    	LDX	-2(RR14),R1
0002E9 89E0FF              A  1243    	LDX	-1(RR14),R0
                           A  1244    ;  172			else
                           A  1245    .line 172
0002EC 8B CA               A  1246    	JR	_10_L_32
0002EE                     A  1247    _10_L_31:
                           A  1248    ;  173				length = RxBufferPtr - RxBu
Zilog Z8 Encore! Macro Assembler Version 2.52 (11010702) 19-Oct-14     17:25:54     page:  25


PC     Object              I  Line    Source interface.src
                           A  1249    .line 173
0002EE 841A00              A  1250    	LDX	R1,_RxBufferPtr
0002F1 840A01              A  1251    	LDX	R0,_RxBufferPtr+1
0002F4 28 A0CEE0           A  1252    	SUBX	R0,_RxBufferPtrCurrent+1
0002F8 38 A0BEE1           A  1253    	SBCX	R1,_RxBufferPtrCurrent
0002FC 89E1FE              A  1254    	LDX	-2(RR14),R1
0002FF 89E0FF              A  1255    	LDX	-1(RR14),R0
                           A  1256    ;  174	
                           A  1257    ;  175		}
                           A  1258    .line 175
000302 8B B4               A  1259    	JR	_10_L_32
000304                     A  1260    _10_L_34:
                           A  1261    ;  176		return length;
                           A  1262    .line 176
000304 880EFE              A  1263    	LDX	R0,-2(RR14)
000307 881EFF              A  1264    	LDX	R1,-1(RR14)
                           A  1265    ;  177	}
                           A  1266    .line 177
00030A D6 0000             A  1267    	CALL	__b_framereset
00030D AF                  A  1268    	RET	
                           A  1269    .endfunc "GetLength",177,"_GetLength"
                           A  1270    	SEGMENT ROM_DATA
                           A  1271    
                           A  1272    
                           A  1273    ;**************************** _ReadPacket *****
                           A  1274    ;Name                         Addr/Register   S
                           A  1275    ;_PacketCommand                      STATIC    
                           A  1276    ;_PacketLength                       STATIC    
                           A  1277    
                           A  1278    
                           A  1279    ; Aggregate Stack Size: -2 (words)
                           A  1280    
                           A  1281    
                           A  1282    	.FRAME _n_ReadPacket,?_n_ReadPacket,RDATA
                           A  1283    	.FCALL _n_GetLength
                           A  1284    	.FCALL _n_GetHeaderData
                           A  1285    	.FRAME _f_ReadPacket,?_f_ReadPacket,EDATA
                           A  1286    	.FCALL _f_GetLength
                           A  1287    	.FCALL _f_GetHeaderData
                           A  1288    	SEGMENT terface_TEXT
00030E                     A  1289    _ReadPacket:
                           A  1290    .define "_ReadPacket"
                           A  1291    .value _ReadPacket
                           A  1292    .class 2
                           A  1293    .type 65
                           A  1294    .type 0
                           A  1295    .endef
                           A  1296    .begfunc "ReadPacket",180,"_ReadPacket"
00030E 5C02                A  1297    	LD	R5,#2
000310 D6 0000             A  1298    	CALL	__b_frameset0
                           A  1299    ;  178	
                           A  1300    ;  179	void ReadPacket()
Zilog Z8 Encore! Macro Assembler Version 2.52 (11010702) 19-Oct-14     17:25:54     page:  26


PC     Object              I  Line    Source interface.src
                           A  1301    ;  180	{
                           A  1302    ;  181		while (GetLength() < 2); // Wait to
000313                     A  1303    _11_L_36:
                           A  1304    .line 181
000313 D6 02A9             A  1305    	CALL	_GetLength
000316 A6E102              A  1306    	CP	R1,#2
000319 1FA6E000            A  1307    	CPC	R0,#-0
00031D 7B F4               A  1308    	JR	C,_11_L_36
                           A  1309    ;  182		PacketLength = ((unsigned short)(Ge
                           A  1310    .line 182
00031F 1F7001              A  1311    	PUSH	#1
000322 1F7000              A  1312    	PUSH	#0
000325 D6 01B7             A  1313    	CALL	_GetHeaderData
000328 50E1                A  1314    	POP	R1
00032A 50E1                A  1315    	POP	R1
00032C 1F7000              A  1316    	PUSH	#0
00032F 1F7000              A  1317    	PUSH	#0
000332 E4E0E3              A  1318    	LD	R3,R0
000335 B0E1                A  1319    	CLR	R1
000337 89E1FF              A  1320    	LDX	-1(RR14),R1
00033A 89E3FE              A  1321    	LDX	-2(RR14),R3
00033D D6 01B7             A  1322    	CALL	_GetHeaderData
000340 883EFE              A  1323    	LDX	R3,-2(RR14)
000343 881EFF              A  1324    	LDX	R1,-1(RR14)
000346 50E2                A  1325    	POP	R2
000348 50E2                A  1326    	POP	R2
00034A 4210                A  1327    	OR	R1,R0
00034C 943A10              A  1328    	LDX	_PacketLength,R3
00034F 941A11              A  1329    	LDX	_PacketLength+1,R1
                           A  1330    ;  183		while (GetLength() < PacketLength);
000352                     A  1331    _11_L_39:
                           A  1332    .line 183
000352 D6 02A9             A  1333    	CALL	_GetLength
000355 A8EE1A11            A  1334    	CPX	_PacketLength+1,R1
000359 1FA8EE0A 10         A  1335    	CPCX	_PacketLength,R0
00035E BB F2               A  1336    	JR	UGT,_11_L_39
                           A  1337    ;  184		PacketCommand = ((unsigned short)(G
                           A  1338    .line 184
000360 1F7003              A  1339    	PUSH	#3
000363 1F7000              A  1340    	PUSH	#0
000366 D6 01B7             A  1341    	CALL	_GetHeaderData
000369 50E1                A  1342    	POP	R1
00036B 50E1                A  1343    	POP	R1
00036D 1F7002              A  1344    	PUSH	#2
000370 1F7000              A  1345    	PUSH	#0
000373 E4E0E3              A  1346    	LD	R3,R0
000376 B0E1                A  1347    	CLR	R1
000378 89E1FF              A  1348    	LDX	-1(RR14),R1
00037B 89E3FE              A  1349    	LDX	-2(RR14),R3
00037E D6 01B7             A  1350    	CALL	_GetHeaderData
000381 883EFE              A  1351    	LDX	R3,-2(RR14)
000384 881EFF              A  1352    	LDX	R1,-1(RR14)
Zilog Z8 Encore! Macro Assembler Version 2.52 (11010702) 19-Oct-14     17:25:54     page:  27


PC     Object              I  Line    Source interface.src
000387 50E2                A  1353    	POP	R2
000389 50E2                A  1354    	POP	R2
00038B 4210                A  1355    	OR	R1,R0
00038D 943A12              A  1356    	LDX	_PacketCommand,R3
000390 941A13              A  1357    	LDX	_PacketCommand+1,R1
                           A  1358    ;  185	}
                           A  1359    .line 185
000393 D6 0000             A  1360    	CALL	__b_framereset
000396 AF                  A  1361    	RET	
                           A  1362    .endfunc "ReadPacket",185,"_ReadPacket"
                           A  1363    	SEGMENT ROM_DATA
                           A  1364    
                           A  1365    
                           A  1366    ;**************************** _SendSPI ********
                           A  1367    ;Name                         Addr/Register   S
                           A  1368    ;_SPITxBuffer                        STATIC    
                           A  1369    ;_SPITxBufferPtr                     STATIC    
                           A  1370    ;_SPIRxBufferPtr                     STATIC    
                           A  1371    ;templen                              R15-2    
                           A  1372    ;len                                  R15+4    
                           A  1373    
                           A  1374    
                           A  1375    ; Aggregate Stack Size: -2 (words)
                           A  1376    
                           A  1377    
                           A  1378    	.FRAME _n_SendSPI,?_n_SendSPI,RDATA
                           A  1379    	.FRAME _f_SendSPI,?_f_SendSPI,EDATA
                           A  1380    	SEGMENT terface_TEXT
000397                     A  1381    _SendSPI:
                           A  1382    .define "_SendSPI"
                           A  1383    .value _SendSPI
                           A  1384    .class 2
                           A  1385    .type 65
                           A  1386    .type 0
                           A  1387    .endef
                           A  1388    .begfunc "SendSPI",188,"_SendSPI"
                           A  1389    .define "len"
                           A  1390    .class 9
                           A  1391    .value 4
                           A  1392    .type 13
                           A  1393    .type 0
                           A  1394    .endef
                           A  1395    ;  186	
                           A  1396    ;  187	void SendSPI (unsigned short len)
                           A  1397    ;  188	{
                           A  1398    .define "templen"
                           A  1399    .class 1
                           A  1400    .value -2
                           A  1401    .type 13
                           A  1402    .type 0
                           A  1403    .endef
000397 5C02                A  1404    	LD	R5,#2
Zilog Z8 Encore! Macro Assembler Version 2.52 (11010702) 19-Oct-14     17:25:54     page:  28


PC     Object              I  Line    Source interface.src
000399 D6 0000             A  1405    	CALL	__b_frameset0
                           A  1406    ;  189		unsigned short templen=0;
                           A  1407    .line 189
00039C B0E0                A  1408    	CLR	R0
00039E B0E1                A  1409    	CLR	R1
0003A0 89E0FE              A  1410    	LDX	-2(RR14),R0
0003A3 89E1FF              A  1411    	LDX	-1(RR14),R1
                           A  1412    ;  190		SPIRxBufferPtr = 0; // RESET SPI Bu
                           A  1413    .line 190
0003A6 E9000A06            A  1414    	LDX	_SPIRxBufferPtr,#-0
0003AA E9000A07            A  1415    	LDX	_SPIRxBufferPtr+1,#-0
                           A  1416    ;  191		SPITxBufferPtr = 0;
                           A  1417    .line 191
0003AE E9000A08            A  1418    	LDX	_SPITxBufferPtr,#-0
0003B2 E9000A09            A  1419    	LDX	_SPITxBufferPtr+1,#-0
                           A  1420    ;  192		SPIMODE ^= 0x01; // ASSERT SS
                           A  1421    .line 192
0003B6 B9010F63            A  1422    	XORX	3939,#1
0003BA 8B 15               A  1423    	JR	_12_L_50
                           A  1424    ;  193		for (templen=0; templen < len ; tem
0003BC                     A  1425    _12_L_51:
                           A  1426    .line 193
0003BC 880EFE              A  1427    	LDX	R0,-2(RR14)
0003BF 881EFF              A  1428    	LDX	R1,-1(RR14)
0003C2 882E04              A  1429    	LDX	R2,4(RR14)
0003C5 883E05              A  1430    	LDX	R3,5(RR14)
0003C8 A213                A  1431    	CP	R1,R3
0003CA 1FA202              A  1432    	CPC	R0,R2
0003CD 7B 0E               A  1433    	JR	C,_12_L_53
0003CF 8B 54               A  1434    	JR	_12_L_54
0003D1                     A  1435    _12_L_50:
0003D1 B0E0                A  1436    	CLR	R0
0003D3 B0E1                A  1437    	CLR	R1
0003D5 89E0FE              A  1438    	LDX	-2(RR14),R0
0003D8 89E1FF              A  1439    	LDX	-1(RR14),R1
0003DB 8B DF               A  1440    	JR	_12_L_51
0003DD                     A  1441    _12_L_53:
                           A  1442    ;  194		{
                           A  1443    ;  195			SPIDATA = SPITxBuffer[SPITxBuff
                           A  1444    .line 195
0003DD 840A08              A  1445    	LDX	R0,_SPITxBufferPtr
0003E0 841A09              A  1446    	LDX	R1,_SPITxBufferPtr+1
0003E3 2C 04               A  1447    	LD	R2,#high(_SPITxBuffer)
0003E5 3C 00               A  1448    	LD	R3,#low(_SPITxBuffer)
0003E7 0231                A  1449    	ADD	R3,R1
0003E9 1220                A  1450    	ADC	R2,R0
0003EB 86E2E0              A  1451    	LDX	R0,@RR2
0003EE 940F60              A  1452    	LDX	3936,R0
0003F1 09010A09            A  1453    	ADDX	_SPITxBufferPtr+1,#1
0003F5 19000A08            A  1454    	ADCX	_SPITxBufferPtr,#-0
                           A  1455    ;  196			while ((SPISTAT & 0x02) == 0x02
0003F9                     A  1456    _12_L_45:
Zilog Z8 Encore! Macro Assembler Version 2.52 (11010702) 19-Oct-14     17:25:54     page:  29


PC     Object              I  Line    Source interface.src
                           A  1457    .line 196
0003F9 840F62              A  1458    	LDX	R0,3938
0003FC 56E002              A  1459    	AND	R0,#2
0003FF E4E0E1              A  1460    	LD	R1,R0
000402 A6E002              A  1461    	CP	R0,#2
000405 6B F2               A  1462    	JR	Z,_12_L_45
                           A  1463    ;  197			{
                           A  1464    ;  198				// Wait for Data to send
                           A  1465    ;  199			}
                           A  1466    .line 199
                           A  1467    ;  200			while ((SPISTAT & 0x80) == 0x80
000407                     A  1468    _12_L_47:
                           A  1469    .line 200
000407 840F62              A  1470    	LDX	R0,3938
00040A 56E080              A  1471    	AND	R0,#128
00040D E4E0E1              A  1472    	LD	R1,R0
000410 A6E080              A  1473    	CP	R0,#128
000413 6B F2               A  1474    	JR	Z,_12_L_47
                           A  1475    ;  201			{
                           A  1476    ;  202				// INCOMING DATA IS SAVED T
                           A  1477    ;  203			}
                           A  1478    .line 203
                           A  1479    ;  204		}
                           A  1480    .line 204
                           A  1481    .line 193
000415 880EFE              A  1482    	LDX	R0,-2(RR14)
000418 881EFF              A  1483    	LDX	R1,-1(RR14)
00041B A0E0                A  1484    	INCW	RR0
00041D 89E0FE              A  1485    	LDX	-2(RR14),R0
000420 89E1FF              A  1486    	LDX	-1(RR14),R1
                           A  1487    .line 204
000423 8B 97               A  1488    	JR	_12_L_51
000425                     A  1489    _12_L_54:
                           A  1490    ;  205		SPIMODE ^= 0x01; // CLEAR SS
                           A  1491    .line 205
000425 B9010F63            A  1492    	XORX	3939,#1
                           A  1493    ;  206	}
                           A  1494    .line 206
000429 D6 0000             A  1495    	CALL	__b_framereset
00042C AF                  A  1496    	RET	
                           A  1497    .endfunc "SendSPI",206,"_SendSPI"
                           A  1498    	SEGMENT ROM_DATA
                           A  1499    
                           A  1500    
                           A  1501    ;**************************** _main ***********
                           A  1502    ;Name                         Addr/Register   S
                           A  1503    ;_Temp1                              STATIC    
                           A  1504    ;_PacketCommandTemp                  STATIC    
                           A  1505    ;_flashid                            STATIC    
                           A  1506    ;_SPIBuffer                          STATIC    
                           A  1507    ;_PacketCommand                      STATIC    
                           A  1508    ;_PacketLength                       STATIC    
Zilog Z8 Encore! Macro Assembler Version 2.52 (11010702) 19-Oct-14     17:25:54     page:  30


PC     Object              I  Line    Source interface.src
                           A  1509    ;_TxInProgress                       STATIC    
                           A  1510    ;_TxBufferPtr                        STATIC    
                           A  1511    ;_TxBufferPtrTemp                    STATIC    
                           A  1512    ;_SPIRxBufferPtr                     STATIC    
                           A  1513    ;_RxBufferPtr                        STATIC    
                           A  1514    ;_RxBufferPtrCurrent                 STATIC    
                           A  1515    ;_SPITxBuffer                        STATIC    
                           A  1516    ;_SPIRxBuffer                        STATIC    
                           A  1517    ;_TxBuffer                           STATIC    
                           A  1518    ;_RxBuffer                           STATIC    
                           A  1519    ;_memset                             IMPORT  --
                           A  1520    ;spilength                           R15-36    
                           A  1521    ;spilength                           R15-34    
                           A  1522    ;tempstuff                           R15-32    
                           A  1523    
                           A  1524    
                           A  1525    ; Aggregate Stack Size: -39 (words)
                           A  1526    
                           A  1527    
                           A  1528    	.FRAME _n_main,?_n_main,RDATA
                           A  1529    	.FCALL _n_memset
                           A  1530    	.FCALL _n_setup_board
                           A  1531    	.FCALL _n_ReadPacket
                           A  1532    	.FCALL _n_SendPacket
                           A  1533    	.FCALL _n_SendSPI
                           A  1534    	.FCALL _n_GetPacketData
                           A  1535    	.FCALL _n_GetHeaderData
                           A  1536    	.FCALL _n_delayMS
                           A  1537    	.FRAME _f_main,?_f_main,EDATA
                           A  1538    	.FCALL _f_memset
                           A  1539    	.FCALL _f_setup_board
                           A  1540    	.FCALL _f_ReadPacket
                           A  1541    	.FCALL _f_SendPacket
                           A  1542    	.FCALL _f_SendSPI
                           A  1543    	.FCALL _f_GetPacketData
                           A  1544    	.FCALL _f_GetHeaderData
                           A  1545    	.FCALL _f_delayMS
                           A  1546    	SEGMENT terface_TEXT
00042D                     A  1547    _main:
                           A  1548    .define "_main"
                           A  1549    .value _main
                           A  1550    .class 2
                           A  1551    .type 65
                           A  1552    .type 0
                           A  1553    .endef
                           A  1554    .begfunc "main",209,"_main"
                           A  1555    ;  207	
                           A  1556    ;  208	void main()
                           A  1557    ;  209	{
                           A  1558    .define "tempstuff"
                           A  1559    .class 1
                           A  1560    .value -32
Zilog Z8 Encore! Macro Assembler Version 2.52 (11010702) 19-Oct-14     17:25:54     page:  31


PC     Object              I  Line    Source interface.src
                           A  1561    .dim 32
                           A  1562    .type 108
                           A  1563    .type 0
                           A  1564    .endef
                           A  1565    .define "spilength"
                           A  1566    .class 1
                           A  1567    .value -34
                           A  1568    .type 13
                           A  1569    .type 0
                           A  1570    .endef
                           A  1571    .define "spilength"
                           A  1572    .class 1
                           A  1573    .value -36
                           A  1574    .type 13
                           A  1575    .type 0
                           A  1576    .endef
00042D 5C27                A  1577    	LD	R5,#39
00042F D6 0000             A  1578    	CALL	__b_frameset0
                           A  1579    ;  210		unsigned char tempstuff[32];
                           A  1580    ;  211		unsigned char temp, temp2, cmdtemp;
                           A  1581    ;  212		unsigned short burstlen, burstemp;
                           A  1582    ;  213		memset (&RxBuffer, 0, UART_TX_SIZE)
                           A  1583    .line 213
000432 1F7000              A  1584    	PUSH	#0
000435 1F7002              A  1585    	PUSH	#2
000438 1F7000              A  1586    	PUSH	#0
00043B 1F7000              A  1587    	PUSH	#0
00043E 1F70 00             A  1588    	PUSH	#low(_RxBuffer)
000441 1F70 00             A  1589    	PUSH	#high(_RxBuffer)
000444 D6 0000             A  1590    	CALL	_memset
000447 2F                  A  1591    	ATM	
000448 09060FFF            A  1592    	ADDX	4095,#6
00044C 19000FFE            A  1593    	ADCX	4094,#-0
                           A  1594    ;  214		memset (&TxBuffer, 0, UART_RX_SIZE)
                           A  1595    .line 214
000450 1F7000              A  1596    	PUSH	#0
000453 1F7002              A  1597    	PUSH	#2
000456 1F7000              A  1598    	PUSH	#0
000459 1F7000              A  1599    	PUSH	#0
00045C 1F70 00             A  1600    	PUSH	#low(_TxBuffer)
00045F 1F70 02             A  1601    	PUSH	#high(_TxBuffer)
000462 D6 0000             A  1602    	CALL	_memset
000465 2F                  A  1603    	ATM	
000466 09060FFF            A  1604    	ADDX	4095,#6
00046A 19000FFE            A  1605    	ADCX	4094,#-0
                           A  1606    ;  215		memset (&SPIRxBuffer, 0, SPI_RX_SIZ
                           A  1607    .line 215
00046E 1F7000              A  1608    	PUSH	#0
000471 1F7002              A  1609    	PUSH	#2
000474 1F7000              A  1610    	PUSH	#0
000477 1F7000              A  1611    	PUSH	#0
00047A 1F70 00             A  1612    	PUSH	#low(_SPIRxBuffer)
Zilog Z8 Encore! Macro Assembler Version 2.52 (11010702) 19-Oct-14     17:25:54     page:  32


PC     Object              I  Line    Source interface.src
00047D 1F70 06             A  1613    	PUSH	#high(_SPIRxBuffer)
000480 D6 0000             A  1614    	CALL	_memset
000483 2F                  A  1615    	ATM	
000484 09060FFF            A  1616    	ADDX	4095,#6
000488 19000FFE            A  1617    	ADCX	4094,#-0
                           A  1618    ;  216		memset (&SPITxBuffer, 0, SPI_TX_SIZ
                           A  1619    .line 216
00048C 1F7000              A  1620    	PUSH	#0
00048F 1F7002              A  1621    	PUSH	#2
000492 1F7000              A  1622    	PUSH	#0
000495 1F7000              A  1623    	PUSH	#0
000498 1F70 00             A  1624    	PUSH	#low(_SPITxBuffer)
00049B 1F70 04             A  1625    	PUSH	#high(_SPITxBuffer)
00049E D6 0000             A  1626    	CALL	_memset
0004A1 2F                  A  1627    	ATM	
0004A2 09060FFF            A  1628    	ADDX	4095,#6
0004A6 19000FFE            A  1629    	ADCX	4094,#-0
                           A  1630    ;  217		
                           A  1631    ;  218		RxBufferPtrCurrent = 0;
                           A  1632    .line 218
0004AA E9000A0B            A  1633    	LDX	_RxBufferPtrCurrent,#-0
0004AE E9000A0C            A  1634    	LDX	_RxBufferPtrCurrent+1,#-0
                           A  1635    ;  219		RxBufferPtr = 0;
                           A  1636    .line 219
0004B2 E9000A00            A  1637    	LDX	_RxBufferPtr,#-0
0004B6 E9000A01            A  1638    	LDX	_RxBufferPtr+1,#-0
                           A  1639    ;  220		SPIRxBufferPtr = 0;
                           A  1640    .line 220
0004BA E9000A06            A  1641    	LDX	_SPIRxBufferPtr,#-0
0004BE E9000A07            A  1642    	LDX	_SPIRxBufferPtr+1,#-0
                           A  1643    ;  221		
                           A  1644    ;  222		TxBufferPtrTemp = 0;
                           A  1645    .line 222
0004C2 E9000A04            A  1646    	LDX	_TxBufferPtrTemp,#-0
0004C6 E9000A05            A  1647    	LDX	_TxBufferPtrTemp+1,#-0
                           A  1648    ;  223		TxBufferPtr = 0;
                           A  1649    .line 223
0004CA E9000A02            A  1650    	LDX	_TxBufferPtr,#-0
0004CE E9000A03            A  1651    	LDX	_TxBufferPtr+1,#-0
                           A  1652    ;  224		TxInProgress = 0;
                           A  1653    .line 224
0004D2 E9000A0A            A  1654    	LDX	_TxInProgress,#-0
                           A  1655    ;  225		
                           A  1656    ;  226		PacketLength = 0;
                           A  1657    .line 226
0004D6 E9000A10            A  1658    	LDX	_PacketLength,#-0
0004DA E9000A11            A  1659    	LDX	_PacketLength+1,#-0
                           A  1660    ;  227		PacketCommand = 0;
                           A  1661    .line 227
0004DE E9000A12            A  1662    	LDX	_PacketCommand,#-0
0004E2 E9000A13            A  1663    	LDX	_PacketCommand+1,#-0
                           A  1664    ;  228		
Zilog Z8 Encore! Macro Assembler Version 2.52 (11010702) 19-Oct-14     17:25:54     page:  33


PC     Object              I  Line    Source interface.src
                           A  1665    ;  229		setup_board();
                           A  1666    .line 229
0004E6 D6 00D6             A  1667    	CALL	_setup_board
                           A  1668    ;  230		
                           A  1669    ;  231		PacketCommand = 0;
                           A  1670    .line 231
0004E9 E9000A12            A  1671    	LDX	_PacketCommand,#-0
0004ED E9000A13            A  1672    	LDX	_PacketCommand+1,#-0
                           A  1673    ;  232		PacketLength = 0;
                           A  1674    .line 232
0004F1 E9000A10            A  1675    	LDX	_PacketLength,#-0
0004F5 E9000A11            A  1676    	LDX	_PacketLength+1,#-0
                           A  1677    ;  233		
                           A  1678    ;  234		while (1)
0004F9                     A  1679    _13_L_200:
                           A  1680    .line 234
                           A  1681    ;  235		{	
                           A  1682    ;  236			ReadPacket();
                           A  1683    .line 236
0004F9 D6 030E             A  1684    	CALL	_ReadPacket
                           A  1685    ;  237			// Process Packet
                           A  1686    ;  238			
                           A  1687    ;  239			///////////////////////////////
                           A  1688    ;  240			//		ATMega Access
                           A  1689    ;  241			///////////////////////////////
                           A  1690    ;  242			
                           A  1691    ;  243			if (PacketCommand == 0x0001) //
                           A  1692    .line 243
0004FC A9010A13            A  1693    	CPX	_PacketCommand+1,#1
000500 1FA9000A 12         A  1694    	CPCX	_PacketCommand,#0
000505 EB 1E               A  1695    	JR	NE,_13_L_58
                           A  1696    ;  244			{
                           A  1697    ;  245				SendPacket (0x0000, 0, 0);
                           A  1698    .line 245
000507 1F7000              A  1699    	PUSH	#0
00050A 1F7000              A  1700    	PUSH	#0
00050D 1F7000              A  1701    	PUSH	#0
000510 1F7000              A  1702    	PUSH	#0
000513 1F7000              A  1703    	PUSH	#0
000516 1F7000              A  1704    	PUSH	#0
000519 D6 0208             A  1705    	CALL	_SendPacket
00051C 2F                  A  1706    	ATM	
00051D 09060FFF            A  1707    	ADDX	4095,#6
000521 19000FFE            A  1708    	ADCX	4094,#-0
                           A  1709    ;  246			}
000525                     A  1710    _13_L_58:
                           A  1711    .line 246
                           A  1712    ;  247			
                           A  1713    ;  248			if (PacketCommand == 0x0002) //
                           A  1714    .line 248
000525 A9020A13            A  1715    	CPX	_PacketCommand+1,#2
000529 1FA9000A 12         A  1716    	CPCX	_PacketCommand,#0
Zilog Z8 Encore! Macro Assembler Version 2.52 (11010702) 19-Oct-14     17:25:54     page:  34


PC     Object              I  Line    Source interface.src
00052E EB 73               A  1717    	JR	NE,_13_L_103
                           A  1718    ;  249			{
                           A  1719    ;  250				SPITxBuffer[0] = 0x0B;
                           A  1720    .line 250
000530 E90B0400            A  1721    	LDX	_SPITxBuffer,#11
                           A  1722    ;  251				SPITxBuffer[1] = 0x00;
                           A  1723    .line 251
000534 E9000401            A  1724    	LDX	_SPITxBuffer+1,#-0
                           A  1725    ;  252				SPITxBuffer[2] = 0x02;
                           A  1726    .line 252
000538 E9020402            A  1727    	LDX	_SPITxBuffer+2,#2
                           A  1728    ;  253				SPITxBuffer[3] = 0x00;
                           A  1729    .line 253
00053C E9000403            A  1730    	LDX	_SPITxBuffer+3,#-0
                           A  1731    ;  254				SPITxBuffer[4] = 0x00; // S
                           A  1732    .line 254
000540 E9000404            A  1733    	LDX	_SPITxBuffer+4,#-0
                           A  1734    ;  255				SPITxBuffer[5] = 0x00; // S
                           A  1735    .line 255
000544 E9000405            A  1736    	LDX	_SPITxBuffer+5,#-0
                           A  1737    ;  256				SPITxBuffer[6] = 0x00; // S
                           A  1738    .line 256
000548 E9000406            A  1739    	LDX	_SPITxBuffer+6,#-0
                           A  1740    ;  257				SPITxBuffer[7] = 0x00; // S
                           A  1741    .line 257
00054C E9000407            A  1742    	LDX	_SPITxBuffer+7,#-0
                           A  1743    ;  258				SPITxBuffer[8] = 0x00; // S
                           A  1744    .line 258
000550 E9000408            A  1745    	LDX	_SPITxBuffer+8,#-0
                           A  1746    ;  259				SPITxBuffer[9] = 0x00; // S
                           A  1747    .line 259
000554 E9000409            A  1748    	LDX	_SPITxBuffer+9,#-0
                           A  1749    ;  260				SPITxBuffer[10] = 0x00; // 
                           A  1750    .line 260
000558 E900040A            A  1751    	LDX	_SPITxBuffer+10,#-0
                           A  1752    ;  261				SendSPI (0x0B);
                           A  1753    .line 261
00055C 1F700B              A  1754    	PUSH	#11
00055F 1F7000              A  1755    	PUSH	#0
000562 D6 0397             A  1756    	CALL	_SendSPI
000565 50E0                A  1757    	POP	R0
000567 50E0                A  1758    	POP	R0
                           A  1759    ;  262	 			SPIBuffer[0] = SPIRxBuffer[
                           A  1760    .line 262
000569 E8 604800           A  1761    	LDX	_SPIBuffer,_SPIRxBuffer+4
                           A  1762    ;  263				SPIBuffer[1] = SPIRxBuffer[
                           A  1763    .line 263
00056D E8 605801           A  1764    	LDX	_SPIBuffer+1,_SPIRxBuffer+5
                           A  1765    ;  264				SPIBuffer[2] = SPIRxBuffer[
                           A  1766    .line 264
000571 E8 606802           A  1767    	LDX	_SPIBuffer+2,_SPIRxBuffer+6
                           A  1768    ;  265				SPIBuffer[3] = SPIRxBuffer[
Zilog Z8 Encore! Macro Assembler Version 2.52 (11010702) 19-Oct-14     17:25:54     page:  35


PC     Object              I  Line    Source interface.src
                           A  1769    .line 265
000575 E8 607803           A  1770    	LDX	_SPIBuffer+3,_SPIRxBuffer+7
                           A  1771    ;  266				SPIBuffer[4] = SPIRxBuffer[
                           A  1772    .line 266
000579 E8 608804           A  1773    	LDX	_SPIBuffer+4,_SPIRxBuffer+8
                           A  1774    ;  267				SPIBuffer[5] = SPIRxBuffer[
                           A  1775    .line 267
00057D E8 609805           A  1776    	LDX	_SPIBuffer+5,_SPIRxBuffer+9
                           A  1777    ;  268				SPIBuffer[6] = SPIRxBuffer[
                           A  1778    .line 268
000581 E8 60A806           A  1779    	LDX	_SPIBuffer+6,_SPIRxBuffer+10
                           A  1780    ;  269				
                           A  1781    ;  270				SendPacket (0x0002, SPIBuff
                           A  1782    .line 270
000585 1F7007              A  1783    	PUSH	#7
000588 1F7000              A  1784    	PUSH	#0
00058B 1F70 00             A  1785    	PUSH	#low(_SPIBuffer)
00058E 1F70 08             A  1786    	PUSH	#high(_SPIBuffer)
000591 1F7002              A  1787    	PUSH	#2
000594 1F7000              A  1788    	PUSH	#0
000597 D6 0208             A  1789    	CALL	_SendPacket
00059A 2F                  A  1790    	ATM	
00059B 09060FFF            A  1791    	ADDX	4095,#6
00059F 19000FFE            A  1792    	ADCX	4094,#-0
                           A  1793    ;  271				
                           A  1794    ;  272			}
0005A3                     A  1795    _13_L_103:
                           A  1796    .line 272
                           A  1797    ;  273	
                           A  1798    ;  274			///////////////////////////////
                           A  1799    ;  275			//		FLASH 0/1 Access
                           A  1800    ;  276			///////////////////////////////
                           A  1801    ;  277			
                           A  1802    ;  278			if ((PacketCommand >= 0x1000) &
                           A  1803    .line 278
0005A3 A9000A13            A  1804    	CPX	_PacketCommand+1,#-0
0005A7 1FA9100A 12         A  1805    	CPCX	_PacketCommand,#16
0005AC 7D 0A 14            A  1806    	JR	C,_13_L_107
0005AF A9000A13            A  1807    	CPX	_PacketCommand+1,#-0
0005B3 1FA9300A 12         A  1808    	CPCX	_PacketCommand,#48
0005B8 FD 0A 14            A  1809    	JR	NC,_13_L_107
                           A  1810    ;  279			{
                           A  1811    ;  280				if ((PacketCommand >= 0x100
                           A  1812    .line 280
0005BB A9000A13            A  1813    	CPX	_PacketCommand+1,#-0
0005BF 1FA9100A 12         A  1814    	CPCX	_PacketCommand,#16
0005C4 7B 11               A  1815    	JR	C,_13_L_62
0005C6 A9000A13            A  1816    	CPX	_PacketCommand+1,#-0
0005CA 1FA9200A 12         A  1817    	CPCX	_PacketCommand,#32
0005CF FB 06               A  1818    	JR	NC,_13_L_62
                           A  1819    ;  281					flashid = 0;
                           A  1820    .line 281
Zilog Z8 Encore! Macro Assembler Version 2.52 (11010702) 19-Oct-14     17:25:54     page:  36


PC     Object              I  Line    Source interface.src
0005D1 E9000A1A            A  1821    	LDX	_flashid,#-0
                           A  1822    ;  282				else
                           A  1823    .line 282
0005D5 8B 04               A  1824    	JR	_13_L_63
0005D7                     A  1825    _13_L_62:
                           A  1826    ;  283					flashid = 1;
                           A  1827    .line 283
0005D7 E9010A1A            A  1828    	LDX	_flashid,#1
0005DB                     A  1829    _13_L_63:
                           A  1830    ;  284				
                           A  1831    ;  285				PacketCommandTemp = PacketC
                           A  1832    .line 285
0005DB 840A12              A  1833    	LDX	R0,_PacketCommand
0005DE 841A13              A  1834    	LDX	R1,_PacketCommand+1
0005E1 56E00F              A  1835    	AND	R0,#15
0005E4 940A14              A  1836    	LDX	_PacketCommandTemp,R0
0005E7 941A15              A  1837    	LDX	_PacketCommandTemp+1,R1
                           A  1838    ;  286				
                           A  1839    ;  287				if (PacketCommandTemp == 0x
                           A  1840    .line 287
0005EA A9010A15            A  1841    	CPX	_PacketCommandTemp+1,#1
0005EE 1FA9000A 14         A  1842    	CPCX	_PacketCommandTemp,#0
0005F3 EB 38               A  1843    	JR	NE,_13_L_73
                           A  1844    ;  288				{
                           A  1845    ;  289					SPITxBuffer[0] = 0x05;
                           A  1846    .line 289
0005F5 E9050400            A  1847    	LDX	_SPITxBuffer,#5
                           A  1848    ;  290					SPITxBuffer[1] = 0x00;
                           A  1849    .line 290
0005F9 E9000401            A  1850    	LDX	_SPITxBuffer+1,#-0
                           A  1851    ;  291					SPITxBuffer[2] = 0x01;
                           A  1852    .line 291
0005FD E9010402            A  1853    	LDX	_SPITxBuffer+2,#1
                           A  1854    ;  292					SPITxBuffer[3] = 0x10 +
                           A  1855    .line 292
000601 840A1A              A  1856    	LDX	R0,_flashid
000604 56E00F              A  1857    	AND	R0,#15
000607 F0E0                A  1858    	SWAP	R0
000609 940403              A  1859    	LDX	_SPITxBuffer+3,R0
00060C 09100403            A  1860    	ADDX	_SPITxBuffer+3,#16
                           A  1861    ;  293					SPITxBuffer[4] = GetPac
                           A  1862    .line 293
000610 1F7000              A  1863    	PUSH	#0
000613 1F7000              A  1864    	PUSH	#0
000616 D6 015E             A  1865    	CALL	_GetPacketData
000619 50E1                A  1866    	POP	R1
00061B 50E1                A  1867    	POP	R1
00061D 940404              A  1868    	LDX	_SPITxBuffer+4,R0
                           A  1869    ;  294					SendSPI (5);
                           A  1870    .line 294
000620 1F7005              A  1871    	PUSH	#5
000623 1F7000              A  1872    	PUSH	#0
Zilog Z8 Encore! Macro Assembler Version 2.52 (11010702) 19-Oct-14     17:25:54     page:  37


PC     Object              I  Line    Source interface.src
000626 D6 0397             A  1873    	CALL	_SendSPI
000629 50E0                A  1874    	POP	R0
00062B 50E0                A  1875    	POP	R0
                           A  1876    ;  295				}
00062D                     A  1877    _13_L_73:
                           A  1878    .line 295
                           A  1879    ;  296	
                           A  1880    ;  297				if ((PacketCommandTemp == 0
                           A  1881    .line 297
00062D A9020A15            A  1882    	CPX	_PacketCommandTemp+1,#2
000631 1FA9000A 14         A  1883    	CPCX	_PacketCommandTemp,#0
000636 6B 1A               A  1884    	JR	Z,_13_L_67
000638 A9080A15            A  1885    	CPX	_PacketCommandTemp+1,#8
00063C 1FA9000A 14         A  1886    	CPCX	_PacketCommandTemp,#0
000641 6B 0F               A  1887    	JR	Z,_13_L_67
000643 8B 52               A  1888    	JR	_13_L_75
                           A  1889    ;  298				{
                           A  1890    ;  299					for (Temp1 = 0; Temp1 <
000645                     A  1891    _13_L_68:
                           A  1892    .line 299
000645 A8 A11A17           A  1893    	CPX	_Temp1+1,_PacketLength+1
000649 1FA8 A10A16         A  1894    	CPCX	_Temp1,_PacketLength
00064E 7B 0C               A  1895    	JR	C,_13_L_70
000650 8B 38               A  1896    	JR	_13_L_71
000652                     A  1897    _13_L_67:
000652 E9000A16            A  1898    	LDX	_Temp1,#-0
000656 E9000A17            A  1899    	LDX	_Temp1+1,#-0
00065A 8B E9               A  1900    	JR	_13_L_68
00065C                     A  1901    _13_L_70:
                           A  1902    ;  300					{
                           A  1903    ;  301						SPITxBuffer[Temp1] 
                           A  1904    .line 301
00065C C8 A170             A  1905    	PUSHX	_Temp1+1
00065F C8 A160             A  1906    	PUSHX	_Temp1
000662 D6 01B7             A  1907    	CALL	_GetHeaderData
000665 50E1                A  1908    	POP	R1
000667 50E1                A  1909    	POP	R1
000669 841A16              A  1910    	LDX	R1,_Temp1
00066C 844A17              A  1911    	LDX	R4,_Temp1+1
00066F 2C 04               A  1912    	LD	R2,#high(_SPITxBuffer)
000671 3C 00               A  1913    	LD	R3,#low(_SPITxBuffer)
000673 0234                A  1914    	ADD	R3,R4
000675 1221                A  1915    	ADC	R2,R1
000677 96E0E2              A  1916    	LDX	@RR2,R0
                           A  1917    .line 299
00067A 840A16              A  1918    	LDX	R0,_Temp1
00067D 840A17              A  1919    	LDX	R0,_Temp1+1
000680 09010A17            A  1920    	ADDX	_Temp1+1,#1
000684 19000A16            A  1921    	ADCX	_Temp1,#-0
                           A  1922    ;  302					}
                           A  1923    .line 302
000688 8B BB               A  1924    	JR	_13_L_68
Zilog Z8 Encore! Macro Assembler Version 2.52 (11010702) 19-Oct-14     17:25:54     page:  38


PC     Object              I  Line    Source interface.src
00068A                     A  1925    _13_L_71:
                           A  1926    ;  303					SendSPI (PacketLength);
                           A  1927    .line 303
00068A C8 A110             A  1928    	PUSHX	_PacketLength+1
00068D C8 A100             A  1929    	PUSHX	_PacketLength
000690 D6 0397             A  1930    	CALL	_SendSPI
000693 50E0                A  1931    	POP	R0
000695 50E0                A  1932    	POP	R0
                           A  1933    ;  304				}
000697                     A  1934    _13_L_75:
                           A  1935    .line 304
                           A  1936    ;  305	
                           A  1937    ;  306				if (PacketCommandTemp == 0x
                           A  1938    .line 306
000697 A9030A15            A  1939    	CPX	_PacketCommandTemp+1,#3
00069B 1FA9000A 14         A  1940    	CPCX	_PacketCommandTemp,#0
0006A0 EB 78               A  1941    	JR	NE,_13_L_77
                           A  1942    ;  307				{
                           A  1943    ;  308					SPITxBuffer[0] = 0x09;
                           A  1944    .line 308
0006A2 E9090400            A  1945    	LDX	_SPITxBuffer,#9
                           A  1946    ;  309					SPITxBuffer[1] = 0x00;	                           A  1947    .line 309
0006A6 E9000401            A  1948    	LDX	_SPITxBuffer+1,#-0
                           A  1949    ;  310					SPITxBuffer[2] = 0x03;
                           A  1950    .line 310
0006AA E9030402            A  1951    	LDX	_SPITxBuffer+2,#3
                           A  1952    ;  311					SPITxBuffer[3] = 0x10 +
                           A  1953    .line 311
0006AE 840A1A              A  1954    	LDX	R0,_flashid
0006B1 56E00F              A  1955    	AND	R0,#15
0006B4 F0E0                A  1956    	SWAP	R0
0006B6 940403              A  1957    	LDX	_SPITxBuffer+3,R0
0006B9 09100403            A  1958    	ADDX	_SPITxBuffer+3,#16
                           A  1959    ;  312					SPITxBuffer[4] = GetPac
                           A  1960    .line 312
0006BD 1F7000              A  1961    	PUSH	#0
0006C0 1F7000              A  1962    	PUSH	#0
0006C3 D6 015E             A  1963    	CALL	_GetPacketData
0006C6 50E1                A  1964    	POP	R1
0006C8 50E1                A  1965    	POP	R1
0006CA 940404              A  1966    	LDX	_SPITxBuffer+4,R0
                           A  1967    ;  313					SPITxBuffer[5] = GetPac
                           A  1968    .line 313
0006CD 1F7001              A  1969    	PUSH	#1
0006D0 1F7000              A  1970    	PUSH	#0
0006D3 D6 015E             A  1971    	CALL	_GetPacketData
0006D6 50E1                A  1972    	POP	R1
0006D8 50E1                A  1973    	POP	R1
0006DA 940405              A  1974    	LDX	_SPITxBuffer+5,R0
                           A  1975    ;  314					SPITxBuffer[6] = GetPac
                           A  1976    .line 314
Zilog Z8 Encore! Macro Assembler Version 2.52 (11010702) 19-Oct-14     17:25:54     page:  39


PC     Object              I  Line    Source interface.src
0006DD 1F7002              A  1977    	PUSH	#2
0006E0 1F7000              A  1978    	PUSH	#0
0006E3 D6 015E             A  1979    	CALL	_GetPacketData
0006E6 50E1                A  1980    	POP	R1
0006E8 50E1                A  1981    	POP	R1
0006EA 940406              A  1982    	LDX	_SPITxBuffer+6,R0
                           A  1983    ;  315					SPITxBuffer[7] = GetPac
                           A  1984    .line 315
0006ED 1F7003              A  1985    	PUSH	#3
0006F0 1F7000              A  1986    	PUSH	#0
0006F3 D6 015E             A  1987    	CALL	_GetPacketData
0006F6 50E1                A  1988    	POP	R1
0006F8 50E1                A  1989    	POP	R1
0006FA 940407              A  1990    	LDX	_SPITxBuffer+7,R0
                           A  1991    ;  316					SPITxBuffer[8] = GetPac
                           A  1992    .line 316
0006FD 1F7004              A  1993    	PUSH	#4
000700 1F7000              A  1994    	PUSH	#0
000703 D6 015E             A  1995    	CALL	_GetPacketData
000706 50E1                A  1996    	POP	R1
000708 50E1                A  1997    	POP	R1
00070A 940408              A  1998    	LDX	_SPITxBuffer+8,R0
                           A  1999    ;  317					SendSPI (9);
                           A  2000    .line 317
00070D 1F7009              A  2001    	PUSH	#9
000710 1F7000              A  2002    	PUSH	#0
000713 D6 0397             A  2003    	CALL	_SendSPI
000716 50E0                A  2004    	POP	R0
000718 50E0                A  2005    	POP	R0
                           A  2006    ;  318					
                           A  2007    ;  319				}		
00071A                     A  2008    _13_L_77:
                           A  2009    .line 319
                           A  2010    ;  320				
                           A  2011    ;  321				if (PacketCommandTemp == 0x
                           A  2012    .line 321
00071A A9040A15            A  2013    	CPX	_PacketCommandTemp+1,#4
00071E 1FA9000A 14         A  2014    	CPCX	_PacketCommandTemp,#0
000723 EB 28               A  2015    	JR	NE,_13_L_79
                           A  2016    ;  322				{
                           A  2017    ;  323					SPITxBuffer[0] = 0x04;
                           A  2018    .line 323
000725 E9040400            A  2019    	LDX	_SPITxBuffer,#4
                           A  2020    ;  324					SPITxBuffer[1] = 0x00;
                           A  2021    .line 324
000729 E9000401            A  2022    	LDX	_SPITxBuffer+1,#-0
                           A  2023    ;  325					SPITxBuffer[2] = 0x04;
                           A  2024    .line 325
00072D E9040402            A  2025    	LDX	_SPITxBuffer+2,#4
                           A  2026    ;  326					SPITxBuffer[3] = 0x10 +
                           A  2027    .line 326
000731 840A1A              A  2028    	LDX	R0,_flashid
Zilog Z8 Encore! Macro Assembler Version 2.52 (11010702) 19-Oct-14     17:25:54     page:  40


PC     Object              I  Line    Source interface.src
000734 56E00F              A  2029    	AND	R0,#15
000737 F0E0                A  2030    	SWAP	R0
000739 940403              A  2031    	LDX	_SPITxBuffer+3,R0
00073C 09100403            A  2032    	ADDX	_SPITxBuffer+3,#16
                           A  2033    ;  327					SendSPI (4);
                           A  2034    .line 327
000740 1F7004              A  2035    	PUSH	#4
000743 1F7000              A  2036    	PUSH	#0
000746 D6 0397             A  2037    	CALL	_SendSPI
000749 50E0                A  2038    	POP	R0
00074B 50E0                A  2039    	POP	R0
                           A  2040    ;  328				}		
00074D                     A  2041    _13_L_79:
                           A  2042    .line 328
                           A  2043    ;  329	
                           A  2044    ;  330	
                           A  2045    ;  331				if (PacketCommandTemp == 0x
                           A  2046    .line 331
00074D A9050A15            A  2047    	CPX	_PacketCommandTemp+1,#5
000751 1FA9000A 14         A  2048    	CPCX	_PacketCommandTemp,#0
000756 EB 28               A  2049    	JR	NE,_13_L_81
                           A  2050    ;  332				{
                           A  2051    ;  333					SPITxBuffer[0] = 0x04;
                           A  2052    .line 333
000758 E9040400            A  2053    	LDX	_SPITxBuffer,#4
                           A  2054    ;  334					SPITxBuffer[1] = 0x00;
                           A  2055    .line 334
00075C E9000401            A  2056    	LDX	_SPITxBuffer+1,#-0
                           A  2057    ;  335					SPITxBuffer[2] = 0x05;
                           A  2058    .line 335
000760 E9050402            A  2059    	LDX	_SPITxBuffer+2,#5
                           A  2060    ;  336					SPITxBuffer[3] = 0x10 +
                           A  2061    .line 336
000764 840A1A              A  2062    	LDX	R0,_flashid
000767 56E00F              A  2063    	AND	R0,#15
00076A F0E0                A  2064    	SWAP	R0
00076C 940403              A  2065    	LDX	_SPITxBuffer+3,R0
00076F 09100403            A  2066    	ADDX	_SPITxBuffer+3,#16
                           A  2067    ;  337					SendSPI (4);
                           A  2068    .line 337
000773 1F7004              A  2069    	PUSH	#4
000776 1F7000              A  2070    	PUSH	#0
000779 D6 0397             A  2071    	CALL	_SendSPI
00077C 50E0                A  2072    	POP	R0
00077E 50E0                A  2073    	POP	R0
                           A  2074    ;  338				}
000780                     A  2075    _13_L_81:
                           A  2076    .line 338
                           A  2077    ;  339	
                           A  2078    ;  340				if (PacketCommandTemp == 0x
                           A  2079    .line 340
000780 A9060A15            A  2080    	CPX	_PacketCommandTemp+1,#6
Zilog Z8 Encore! Macro Assembler Version 2.52 (11010702) 19-Oct-14     17:25:54     page:  41


PC     Object              I  Line    Source interface.src
000784 1FA9000A 14         A  2081    	CPCX	_PacketCommandTemp,#0
000789 EB 28               A  2082    	JR	NE,_13_L_83
                           A  2083    ;  341				{
                           A  2084    ;  342					SPITxBuffer[0] = 0x04;
                           A  2085    .line 342
00078B E9040400            A  2086    	LDX	_SPITxBuffer,#4
                           A  2087    ;  343					SPITxBuffer[1] = 0x00;
                           A  2088    .line 343
00078F E9000401            A  2089    	LDX	_SPITxBuffer+1,#-0
                           A  2090    ;  344					SPITxBuffer[2] = 0x06;
                           A  2091    .line 344
000793 E9060402            A  2092    	LDX	_SPITxBuffer+2,#6
                           A  2093    ;  345					SPITxBuffer[3] = 0x10 +
                           A  2094    .line 345
000797 840A1A              A  2095    	LDX	R0,_flashid
00079A 56E00F              A  2096    	AND	R0,#15
00079D F0E0                A  2097    	SWAP	R0
00079F 940403              A  2098    	LDX	_SPITxBuffer+3,R0
0007A2 09100403            A  2099    	ADDX	_SPITxBuffer+3,#16
                           A  2100    ;  346					SendSPI (4);
                           A  2101    .line 346
0007A6 1F7004              A  2102    	PUSH	#4
0007A9 1F7000              A  2103    	PUSH	#0
0007AC D6 0397             A  2104    	CALL	_SendSPI
0007AF 50E0                A  2105    	POP	R0
0007B1 50E0                A  2106    	POP	R0
                           A  2107    ;  347				}
0007B3                     A  2108    _13_L_83:
                           A  2109    .line 347
                           A  2110    ;  348				
                           A  2111    ;  349				if (PacketCommandTemp == 0x
                           A  2112    .line 349
0007B3 A9D80A15            A  2113    	CPX	_PacketCommandTemp+1,#216
0007B7 1FA9000A 14         A  2114    	CPCX	_PacketCommandTemp,#0
0007BC EB 58               A  2115    	JR	NE,_13_L_85
                           A  2116    ;  350				{
                           A  2117    ;  351					SPITxBuffer[0] = 0x04;
                           A  2118    .line 351
0007BE E9040400            A  2119    	LDX	_SPITxBuffer,#4
                           A  2120    ;  352					SPITxBuffer[1] = 0x00;
                           A  2121    .line 352
0007C2 E9000401            A  2122    	LDX	_SPITxBuffer+1,#-0
                           A  2123    ;  353					SPITxBuffer[2] = 0xD8;
                           A  2124    .line 353
0007C6 E9D80402            A  2125    	LDX	_SPITxBuffer+2,#216
                           A  2126    ;  354					SPITxBuffer[3] = 0x10 +
                           A  2127    .line 354
0007CA 840A1A              A  2128    	LDX	R0,_flashid
0007CD 56E00F              A  2129    	AND	R0,#15
0007D0 F0E0                A  2130    	SWAP	R0
0007D2 940403              A  2131    	LDX	_SPITxBuffer+3,R0
0007D5 09100403            A  2132    	ADDX	_SPITxBuffer+3,#16
Zilog Z8 Encore! Macro Assembler Version 2.52 (11010702) 19-Oct-14     17:25:54     page:  42


PC     Object              I  Line    Source interface.src
                           A  2133    ;  355					SPITxBuffer[4] = GetPac
                           A  2134    .line 355
0007D9 1F7000              A  2135    	PUSH	#0
0007DC 1F7000              A  2136    	PUSH	#0
0007DF D6 015E             A  2137    	CALL	_GetPacketData
0007E2 50E1                A  2138    	POP	R1
0007E4 50E1                A  2139    	POP	R1
0007E6 940404              A  2140    	LDX	_SPITxBuffer+4,R0
                           A  2141    ;  356					SPITxBuffer[5] = GetPac
                           A  2142    .line 356
0007E9 1F7001              A  2143    	PUSH	#1
0007EC 1F7000              A  2144    	PUSH	#0
0007EF D6 015E             A  2145    	CALL	_GetPacketData
0007F2 50E1                A  2146    	POP	R1
0007F4 50E1                A  2147    	POP	R1
0007F6 940405              A  2148    	LDX	_SPITxBuffer+5,R0
                           A  2149    ;  357					SPITxBuffer[6] = GetPac
                           A  2150    .line 357
0007F9 1F7002              A  2151    	PUSH	#2
0007FC 1F7000              A  2152    	PUSH	#0
0007FF D6 015E             A  2153    	CALL	_GetPacketData
000802 50E1                A  2154    	POP	R1
000804 50E1                A  2155    	POP	R1
000806 940406              A  2156    	LDX	_SPITxBuffer+6,R0
                           A  2157    ;  358					SendSPI (7);
                           A  2158    .line 358
000809 1F7007              A  2159    	PUSH	#7
00080C 1F7000              A  2160    	PUSH	#0
00080F D6 0397             A  2161    	CALL	_SendSPI
000812 50E0                A  2162    	POP	R0
000814 50E0                A  2163    	POP	R0
                           A  2164    ;  359				}
000816                     A  2165    _13_L_85:
                           A  2166    .line 359
                           A  2167    ;  360				
                           A  2168    ;  361	
                           A  2169    ;  362				if (PacketCommandTemp == 0x
                           A  2170    .line 362
000816 A9C70A15            A  2171    	CPX	_PacketCommandTemp+1,#199
00081A 1FA9000A 14         A  2172    	CPCX	_PacketCommandTemp,#0
00081F EB 28               A  2173    	JR	NE,_13_L_87
                           A  2174    ;  363				{
                           A  2175    ;  364					SPITxBuffer[0] = 0x04;
                           A  2176    .line 364
000821 E9040400            A  2177    	LDX	_SPITxBuffer,#4
                           A  2178    ;  365					SPITxBuffer[1] = 0x00;
                           A  2179    .line 365
000825 E9000401            A  2180    	LDX	_SPITxBuffer+1,#-0
                           A  2181    ;  366					SPITxBuffer[2] = 0xC7;
                           A  2182    .line 366
000829 E9C70402            A  2183    	LDX	_SPITxBuffer+2,#199
                           A  2184    ;  367					SPITxBuffer[3] = 0x10 +
Zilog Z8 Encore! Macro Assembler Version 2.52 (11010702) 19-Oct-14     17:25:54     page:  43


PC     Object              I  Line    Source interface.src
                           A  2185    .line 367
00082D 840A1A              A  2186    	LDX	R0,_flashid
000830 56E00F              A  2187    	AND	R0,#15
000833 F0E0                A  2188    	SWAP	R0
000835 940403              A  2189    	LDX	_SPITxBuffer+3,R0
000838 09100403            A  2190    	ADDX	_SPITxBuffer+3,#16
                           A  2191    ;  368					SendSPI (4);
                           A  2192    .line 368
00083C 1F7004              A  2193    	PUSH	#4
00083F 1F7000              A  2194    	PUSH	#0
000842 D6 0397             A  2195    	CALL	_SendSPI
000845 50E0                A  2196    	POP	R0
000847 50E0                A  2197    	POP	R0
                           A  2198    ;  369				}
000849                     A  2199    _13_L_87:
                           A  2200    .line 369
                           A  2201    ;  370				
                           A  2202    ;  371				if (PacketCommandTemp == 0x
                           A  2203    .line 371
000849 A99E0A15            A  2204    	CPX	_PacketCommandTemp+1,#158
00084D 1FA9000A 14         A  2205    	CPCX	_PacketCommandTemp,#0
000852 EB 28               A  2206    	JR	NE,_13_L_89
                           A  2207    ;  372				{
                           A  2208    ;  373					SPITxBuffer[0] = 0x04;
                           A  2209    .line 373
000854 E9040400            A  2210    	LDX	_SPITxBuffer,#4
                           A  2211    ;  374					SPITxBuffer[1] = 0x00;
                           A  2212    .line 374
000858 E9000401            A  2213    	LDX	_SPITxBuffer+1,#-0
                           A  2214    ;  375					SPITxBuffer[2] = 0x9E;
                           A  2215    .line 375
00085C E99E0402            A  2216    	LDX	_SPITxBuffer+2,#158
                           A  2217    ;  376					SPITxBuffer[3] = 0x10 +
                           A  2218    .line 376
000860 840A1A              A  2219    	LDX	R0,_flashid
000863 56E00F              A  2220    	AND	R0,#15
000866 F0E0                A  2221    	SWAP	R0
000868 940403              A  2222    	LDX	_SPITxBuffer+3,R0
00086B 09100403            A  2223    	ADDX	_SPITxBuffer+3,#16
                           A  2224    ;  377					SendSPI (4);
                           A  2225    .line 377
00086F 1F7004              A  2226    	PUSH	#4
000872 1F7000              A  2227    	PUSH	#0
000875 D6 0397             A  2228    	CALL	_SendSPI
000878 50E0                A  2229    	POP	R0
00087A 50E0                A  2230    	POP	R0
                           A  2231    ;  378				}
00087C                     A  2232    _13_L_89:
                           A  2233    .line 378
                           A  2234    ;  379	
                           A  2235    ;  380				if (PacketCommandTemp == 0x
                           A  2236    .line 380
Zilog Z8 Encore! Macro Assembler Version 2.52 (11010702) 19-Oct-14     17:25:54     page:  44


PC     Object              I  Line    Source interface.src
00087C A99F0A15            A  2237    	CPX	_PacketCommandTemp+1,#159
000880 1FA9000A 14         A  2238    	CPCX	_PacketCommandTemp,#0
000885 EB 28               A  2239    	JR	NE,_13_L_91
                           A  2240    ;  381				{
                           A  2241    ;  382					SPITxBuffer[0] = 0x04;
                           A  2242    .line 382
000887 E9040400            A  2243    	LDX	_SPITxBuffer,#4
                           A  2244    ;  383					SPITxBuffer[1] = 0x00;
                           A  2245    .line 383
00088B E9000401            A  2246    	LDX	_SPITxBuffer+1,#-0
                           A  2247    ;  384					SPITxBuffer[2] = 0x9F;
                           A  2248    .line 384
00088F E99F0402            A  2249    	LDX	_SPITxBuffer+2,#159
                           A  2250    ;  385					SPITxBuffer[3] = 0x10 +
                           A  2251    .line 385
000893 840A1A              A  2252    	LDX	R0,_flashid
000896 56E00F              A  2253    	AND	R0,#15
000899 F0E0                A  2254    	SWAP	R0
00089B 940403              A  2255    	LDX	_SPITxBuffer+3,R0
00089E 09100403            A  2256    	ADDX	_SPITxBuffer+3,#16
                           A  2257    ;  386					SendSPI (4);
                           A  2258    .line 386
0008A2 1F7004              A  2259    	PUSH	#4
0008A5 1F7000              A  2260    	PUSH	#0
0008A8 D6 0397             A  2261    	CALL	_SendSPI
0008AB 50E0                A  2262    	POP	R0
0008AD 50E0                A  2263    	POP	R0
                           A  2264    ;  387				}
0008AF                     A  2265    _13_L_91:
                           A  2266    .line 387
                           A  2267    ;  388	
                           A  2268    ;  389				if (PacketCommandTemp == 0x
                           A  2269    .line 389
0008AF A9B90A15            A  2270    	CPX	_PacketCommandTemp+1,#185
0008B3 1FA9000A 14         A  2271    	CPCX	_PacketCommandTemp,#0
0008B8 EB 28               A  2272    	JR	NE,_13_L_93
                           A  2273    ;  390				{
                           A  2274    ;  391					SPITxBuffer[0] = 0x04;
                           A  2275    .line 391
0008BA E9040400            A  2276    	LDX	_SPITxBuffer,#4
                           A  2277    ;  392					SPITxBuffer[1] = 0x00;
                           A  2278    .line 392
0008BE E9000401            A  2279    	LDX	_SPITxBuffer+1,#-0
                           A  2280    ;  393					SPITxBuffer[2] = 0xB9;
                           A  2281    .line 393
0008C2 E9B90402            A  2282    	LDX	_SPITxBuffer+2,#185
                           A  2283    ;  394					SPITxBuffer[3] = 0x10 +
                           A  2284    .line 394
0008C6 840A1A              A  2285    	LDX	R0,_flashid
0008C9 56E00F              A  2286    	AND	R0,#15
0008CC F0E0                A  2287    	SWAP	R0
0008CE 940403              A  2288    	LDX	_SPITxBuffer+3,R0
Zilog Z8 Encore! Macro Assembler Version 2.52 (11010702) 19-Oct-14     17:25:54     page:  45


PC     Object              I  Line    Source interface.src
0008D1 09100403            A  2289    	ADDX	_SPITxBuffer+3,#16
                           A  2290    ;  395					SendSPI (4);
                           A  2291    .line 395
0008D5 1F7004              A  2292    	PUSH	#4
0008D8 1F7000              A  2293    	PUSH	#0
0008DB D6 0397             A  2294    	CALL	_SendSPI
0008DE 50E0                A  2295    	POP	R0
0008E0 50E0                A  2296    	POP	R0
                           A  2297    ;  396				}
0008E2                     A  2298    _13_L_93:
                           A  2299    .line 396
                           A  2300    ;  397				
                           A  2301    ;  398				if (PacketCommandTemp == 0x
                           A  2302    .line 398
0008E2 A9AB0A15            A  2303    	CPX	_PacketCommandTemp+1,#171
0008E6 1FA9000A 14         A  2304    	CPCX	_PacketCommandTemp,#0
0008EB EB 28               A  2305    	JR	NE,_13_L_101
                           A  2306    ;  399				{
                           A  2307    ;  400					SPITxBuffer[0] = 0x04;
                           A  2308    .line 400
0008ED E9040400            A  2309    	LDX	_SPITxBuffer,#4
                           A  2310    ;  401					SPITxBuffer[1] = 0x00;
                           A  2311    .line 401
0008F1 E9000401            A  2312    	LDX	_SPITxBuffer+1,#-0
                           A  2313    ;  402					SPITxBuffer[2] = 0xAB;
                           A  2314    .line 402
0008F5 E9AB0402            A  2315    	LDX	_SPITxBuffer+2,#171
                           A  2316    ;  403					SPITxBuffer[3] = 0x10 +
                           A  2317    .line 403
0008F9 840A1A              A  2318    	LDX	R0,_flashid
0008FC 56E00F              A  2319    	AND	R0,#15
0008FF F0E0                A  2320    	SWAP	R0
000901 940403              A  2321    	LDX	_SPITxBuffer+3,R0
000904 09100403            A  2322    	ADDX	_SPITxBuffer+3,#16
                           A  2323    ;  404					SendSPI (4);
                           A  2324    .line 404
000908 1F7004              A  2325    	PUSH	#4
00090B 1F7000              A  2326    	PUSH	#0
00090E D6 0397             A  2327    	CALL	_SendSPI
000911 50E0                A  2328    	POP	R0
000913 50E0                A  2329    	POP	R0
                           A  2330    ;  405				}
000915                     A  2331    _13_L_101:
                           A  2332    .line 405
                           A  2333    ;  406	
                           A  2334    ;  407				if (PacketCommandTemp == 0x
                           A  2335    .line 407
000915 A9FF0A15            A  2336    	CPX	_PacketCommandTemp+1,#255
000919 1FA90F0A 14         A  2337    	CPCX	_PacketCommandTemp,#15
00091E ED 0A 14            A  2338    	JR	NE,_13_L_107
                           A  2339    ;  408				{
                           A  2340    ;  409					unsigned short spilengt
Zilog Z8 Encore! Macro Assembler Version 2.52 (11010702) 19-Oct-14     17:25:54     page:  46


PC     Object              I  Line    Source interface.src
                           A  2341    .line 409
000921 1F7001              A  2342    	PUSH	#1
000924 1F7000              A  2343    	PUSH	#0
000927 D6 015E             A  2344    	CALL	_GetPacketData
00092A 50E1                A  2345    	POP	R1
00092C 50E1                A  2346    	POP	R1
00092E 1F7000              A  2347    	PUSH	#0
000931 1F7000              A  2348    	PUSH	#0
000934 E4E0E3              A  2349    	LD	R3,R0
000937 B0E4                A  2350    	CLR	R4
000939 89E3DB              A  2351    	LDX	-37(RR14),R3
00093C 89E4DA              A  2352    	LDX	-38(RR14),R4
00093F D6 015E             A  2353    	CALL	_GetPacketData
000942 884EDA              A  2354    	LDX	R4,-38(RR14)
000945 883EDB              A  2355    	LDX	R3,-37(RR14)
000948 50E1                A  2356    	POP	R1
00094A 50E1                A  2357    	POP	R1
00094C B0E2                A  2358    	CLR	R2
00094E 1C04                A  2359    	LD	R1,#4
000950 0210                A  2360    	ADD	R1,R0
000952 16E200              A  2361    	ADC	R2,#0
000955 4241                A  2362    	OR	R4,R1
000957 4232                A  2363    	OR	R3,R2
000959 89E3DE              A  2364    	LDX	-34(RR14),R3
00095C 89E4DF              A  2365    	LDX	-33(RR14),R4
                           A  2366    ;  410					SPITxBuffer[0] = spilen
                           A  2367    .line 410
00095F 880EDF              A  2368    	LDX	R0,-33(RR14)
000962 940400              A  2369    	LDX	_SPITxBuffer,R0
                           A  2370    ;  411					SPITxBuffer[1] = spilen
                           A  2371    .line 411
000965 880EDE              A  2372    	LDX	R0,-34(RR14)
000968 940401              A  2373    	LDX	_SPITxBuffer+1,R0
                           A  2374    ;  412					SPITxBuffer[2] = 0xFF;
                           A  2375    .line 412
00096B E9FF0402            A  2376    	LDX	_SPITxBuffer+2,#255
                           A  2377    ;  413					SPITxBuffer[3] = 0x1F +
                           A  2378    .line 413
00096F 840A1A              A  2379    	LDX	R0,_flashid
000972 56E00F              A  2380    	AND	R0,#15
000975 F0E0                A  2381    	SWAP	R0
000977 940403              A  2382    	LDX	_SPITxBuffer+3,R0
00097A 091F0403            A  2383    	ADDX	_SPITxBuffer+3,#31
                           A  2384    ;  414					SendSPI (spilength);
                           A  2385    .line 414
00097E 880EDE              A  2386    	LDX	R0,-34(RR14)
000981 881EDF              A  2387    	LDX	R1,-33(RR14)
000984 70E1                A  2388    	PUSH	R1
000986 70E0                A  2389    	PUSH	R0
000988 D6 0397             A  2390    	CALL	_SendSPI
00098B 50E0                A  2391    	POP	R0
00098D 50E0                A  2392    	POP	R0
Zilog Z8 Encore! Macro Assembler Version 2.52 (11010702) 19-Oct-14     17:25:54     page:  47


PC     Object              I  Line    Source interface.src
00098F 8B 19               A  2393    	JR	_13_L_95
                           A  2394    ;  415					
                           A  2395    ;  416					for (Temp1=0;Temp1<spil
000991                     A  2396    _13_L_96:
                           A  2397    .line 416
000991 881EDE              A  2398    	LDX	R1,-34(RR14)
000994 880EDF              A  2399    	LDX	R0,-33(RR14)
000997 26E004              A  2400    	SUB	R0,#4
00099A 36E100              A  2401    	SBC	R1,#0
00099D A8 A17EE0           A  2402    	CPX	R0,_Temp1+1
0009A1 1FA8 A16EE1         A  2403    	CPCX	R1,_Temp1
0009A6 BB 0C               A  2404    	JR	UGT,_13_L_98
0009A8 8B 42               A  2405    	JR	_13_L_99
0009AA                     A  2406    _13_L_95:
0009AA E9000A16            A  2407    	LDX	_Temp1,#-0
0009AE E9000A17            A  2408    	LDX	_Temp1+1,#-0
0009B2 8B DD               A  2409    	JR	_13_L_96
0009B4                     A  2410    _13_L_98:
                           A  2411    ;  417					{
                           A  2412    ;  418						SPIBuffer[Temp1] = 
                           A  2413    .line 418
0009B4 841A16              A  2414    	LDX	R1,_Temp1
0009B7 840A17              A  2415    	LDX	R0,_Temp1+1
0009BA 06E004              A  2416    	ADD	R0,#4
0009BD 16E100              A  2417    	ADC	R1,#0
0009C0 2C 06               A  2418    	LD	R2,#high(_SPIRxBuffer)
0009C2 3C 00               A  2419    	LD	R3,#low(_SPIRxBuffer)
0009C4 0230                A  2420    	ADD	R3,R0
0009C6 1221                A  2421    	ADC	R2,R1
0009C8 840A16              A  2422    	LDX	R0,_Temp1
0009CB 841A17              A  2423    	LDX	R1,_Temp1+1
0009CE 4C 08               A  2424    	LD	R4,#high(_SPIBuffer)
0009D0 5C 00               A  2425    	LD	R5,#low(_SPIBuffer)
0009D2 0251                A  2426    	ADD	R5,R1
0009D4 1240                A  2427    	ADC	R4,R0
0009D6 86E2E0              A  2428    	LDX	R0,@RR2
0009D9 96E0E4              A  2429    	LDX	@RR4,R0
                           A  2430    .line 416
0009DC 840A16              A  2431    	LDX	R0,_Temp1
0009DF 840A17              A  2432    	LDX	R0,_Temp1+1
0009E2 09010A17            A  2433    	ADDX	_Temp1+1,#1
0009E6 19000A16            A  2434    	ADCX	_Temp1,#-0
                           A  2435    ;  419					}
                           A  2436    .line 419
0009EA 8B A5               A  2437    	JR	_13_L_96
0009EC                     A  2438    _13_L_99:
                           A  2439    ;  420					
                           A  2440    ;  421					SendPacket (PacketComma
                           A  2441    .line 421
0009EC 881EDE              A  2442    	LDX	R1,-34(RR14)
0009EF 880EDF              A  2443    	LDX	R0,-33(RR14)
0009F2 26E004              A  2444    	SUB	R0,#4
Zilog Z8 Encore! Macro Assembler Version 2.52 (11010702) 19-Oct-14     17:25:54     page:  48


PC     Object              I  Line    Source interface.src
0009F5 36E100              A  2445    	SBC	R1,#0
0009F8 70E0                A  2446    	PUSH	R0
0009FA 70E1                A  2447    	PUSH	R1
0009FC 1F70 00             A  2448    	PUSH	#low(_SPIBuffer)
0009FF 1F70 08             A  2449    	PUSH	#high(_SPIBuffer)
000A02 C8 A130             A  2450    	PUSHX	_PacketCommand+1
000A05 C8 A120             A  2451    	PUSHX	_PacketCommand
000A08 D6 0208             A  2452    	CALL	_SendPacket
000A0B 2F                  A  2453    	ATM	
000A0C 09060FFF            A  2454    	ADDX	4095,#6
000A10 19000FFE            A  2455    	ADCX	4094,#-0
                           A  2456    ;  422				}
                           A  2457    ;  423			}
000A14                     A  2458    _13_L_107:
                           A  2459    .line 423
                           A  2460    ;  424			
                           A  2461    ;  425			///////////////////////////////
                           A  2462    ;  426			//		Basic ATMega Programmin
                           A  2463    ;  427			///////////////////////////////
                           A  2464    ;  428			
                           A  2465    ;  429			if (PacketCommand == 0x0900) //
                           A  2466    .line 429
000A14 A9000A13            A  2467    	CPX	_PacketCommand+1,#-0
000A18 1FA9090A 12         A  2468    	CPCX	_PacketCommand,#9
000A1D EB 47               A  2469    	JR	NE,_13_L_109
                           A  2470    ;  430			{
                           A  2471    ;  431				while (SPIRxBuffer[0x02] !=
000A1F                     A  2472    _13_L_104:
                           A  2473    .line 431
000A1F A9530602            A  2474    	CPX	_SPIRxBuffer+2,#83
000A23 6B 41               A  2475    	JR	Z,_13_L_109
                           A  2476    ;  432				{
                           A  2477    ;  433					
                           A  2478    ;  434					PAOUT |= 0x01;
                           A  2479    .line 434
000A25 49010FD3            A  2480    	ORX	4051,#1
                           A  2481    ;  435					delayMS (20);
                           A  2482    .line 435
000A29 1F7014              A  2483    	PUSH	#20
000A2C 1F7000              A  2484    	PUSH	#0
000A2F D6 0126             A  2485    	CALL	_delayMS
000A32 50E0                A  2486    	POP	R0
000A34 50E0                A  2487    	POP	R0
                           A  2488    ;  436					PAOUT &= 0xFE;
                           A  2489    .line 436
000A36 59FE0FD3            A  2490    	ANDX	4051,#254
                           A  2491    ;  437					delayMS (20);
                           A  2492    .line 437
000A3A 1F7014              A  2493    	PUSH	#20
000A3D 1F7000              A  2494    	PUSH	#0
000A40 D6 0126             A  2495    	CALL	_delayMS
000A43 50E0                A  2496    	POP	R0
Zilog Z8 Encore! Macro Assembler Version 2.52 (11010702) 19-Oct-14     17:25:54     page:  49


PC     Object              I  Line    Source interface.src
000A45 50E0                A  2497    	POP	R0
                           A  2498    ;  438					SPITxBuffer[0] = 0xAC;
                           A  2499    .line 438
000A47 E9AC0400            A  2500    	LDX	_SPITxBuffer,#172
                           A  2501    ;  439					SPITxBuffer[1] = 0x53;
                           A  2502    .line 439
000A4B E9530401            A  2503    	LDX	_SPITxBuffer+1,#83
                           A  2504    ;  440					SPITxBuffer[2] = 0x00;
                           A  2505    .line 440
000A4F E9000402            A  2506    	LDX	_SPITxBuffer+2,#-0
                           A  2507    ;  441					SPITxBuffer[3] = 0x00;
                           A  2508    .line 441
000A53 E9000403            A  2509    	LDX	_SPITxBuffer+3,#-0
                           A  2510    ;  442					SendSPI (4);
                           A  2511    .line 442
000A57 1F7004              A  2512    	PUSH	#4
000A5A 1F7000              A  2513    	PUSH	#0
000A5D D6 0397             A  2514    	CALL	_SendSPI
000A60 50E0                A  2515    	POP	R0
000A62 50E0                A  2516    	POP	R0
                           A  2517    ;  443				}
                           A  2518    .line 443
000A64 8B B9               A  2519    	JR	_13_L_104
                           A  2520    ;  444				
                           A  2521    ;  445			}
000A66                     A  2522    _13_L_109:
                           A  2523    .line 445
                           A  2524    ;  446			if (PacketCommand == 0x0901) //
                           A  2525    .line 446
000A66 A9010A13            A  2526    	CPX	_PacketCommand+1,#1
000A6A 1FA9090A 12         A  2527    	CPCX	_PacketCommand,#9
000A6F EB 1D               A  2528    	JR	NE,_13_L_111
                           A  2529    ;  447			{
                           A  2530    ;  448				SPITxBuffer[0] = 0xAC;
                           A  2531    .line 448
000A71 E9AC0400            A  2532    	LDX	_SPITxBuffer,#172
                           A  2533    ;  449				SPITxBuffer[1] = 0x80;
                           A  2534    .line 449
000A75 E9800401            A  2535    	LDX	_SPITxBuffer+1,#128
                           A  2536    ;  450				SPITxBuffer[2] = 0x00;
                           A  2537    .line 450
000A79 E9000402            A  2538    	LDX	_SPITxBuffer+2,#-0
                           A  2539    ;  451				SPITxBuffer[3] = 0x00;
                           A  2540    .line 451
000A7D E9000403            A  2541    	LDX	_SPITxBuffer+3,#-0
                           A  2542    ;  452				SendSPI (4);
                           A  2543    .line 452
000A81 1F7004              A  2544    	PUSH	#4
000A84 1F7000              A  2545    	PUSH	#0
000A87 D6 0397             A  2546    	CALL	_SendSPI
000A8A 50E0                A  2547    	POP	R0
000A8C 50E0                A  2548    	POP	R0
Zilog Z8 Encore! Macro Assembler Version 2.52 (11010702) 19-Oct-14     17:25:54     page:  50


PC     Object              I  Line    Source interface.src
                           A  2549    ;  453			}
000A8E                     A  2550    _13_L_111:
                           A  2551    .line 453
                           A  2552    ;  454			if (PacketCommand == 0x0902) //
                           A  2553    .line 454
000A8E A9020A13            A  2554    	CPX	_PacketCommand+1,#2
000A92 1FA9090A 12         A  2555    	CPCX	_PacketCommand,#9
000A97 EB 47               A  2556    	JR	NE,_13_L_113
                           A  2557    ;  455			{
                           A  2558    ;  456				SPITxBuffer[0] = 0xF0;
                           A  2559    .line 456
000A99 E9F00400            A  2560    	LDX	_SPITxBuffer,#240
                           A  2561    ;  457				SPITxBuffer[1] = 0x00;
                           A  2562    .line 457
000A9D E9000401            A  2563    	LDX	_SPITxBuffer+1,#-0
                           A  2564    ;  458				SPITxBuffer[2] = 0x00;
                           A  2565    .line 458
000AA1 E9000402            A  2566    	LDX	_SPITxBuffer+2,#-0
                           A  2567    ;  459				SPITxBuffer[3] = 0x00;
                           A  2568    .line 459
000AA5 E9000403            A  2569    	LDX	_SPITxBuffer+3,#-0
                           A  2570    ;  460				SendSPI (4);
                           A  2571    .line 460
000AA9 1F7004              A  2572    	PUSH	#4
000AAC 1F7000              A  2573    	PUSH	#0
000AAF D6 0397             A  2574    	CALL	_SendSPI
000AB2 50E0                A  2575    	POP	R0
000AB4 50E0                A  2576    	POP	R0
                           A  2577    ;  461				tempstuff[0] = SPIRxBuffer[
                           A  2578    .line 461
000AB6 840603              A  2579    	LDX	R0,_SPIRxBuffer+3
000AB9 89E0E0              A  2580    	LDX	-32(RR14),R0
                           A  2581    ;  462				SendPacket (0x0902, tempstu
                           A  2582    .line 462
000ABC 1F7001              A  2583    	PUSH	#1
000ABF 1F7000              A  2584    	PUSH	#0
000AC2 1CFF                A  2585    	LD	R1,#255
000AC4 0CE0                A  2586    	LD	R0,#224
000AC6 020F                A  2587    	ADD	R0,R15
000AC8 121E                A  2588    	ADC	R1,R14
000ACA 70E0                A  2589    	PUSH	R0
000ACC 70E1                A  2590    	PUSH	R1
000ACE 1F7002              A  2591    	PUSH	#2
000AD1 1F7009              A  2592    	PUSH	#9
000AD4 D6 0208             A  2593    	CALL	_SendPacket
000AD7 2F                  A  2594    	ATM	
000AD8 09060FFF            A  2595    	ADDX	4095,#6
000ADC 19000FFE            A  2596    	ADCX	4094,#-0
                           A  2597    ;  463			}
000AE0                     A  2598    _13_L_113:
                           A  2599    .line 463
                           A  2600    ;  464			
Zilog Z8 Encore! Macro Assembler Version 2.52 (11010702) 19-Oct-14     17:25:54     page:  51


PC     Object              I  Line    Source interface.src
                           A  2601    ;  465			///////////////////////////////
                           A  2602    ;  466			//		Load Instructions ATMeg
                           A  2603    ;  467			///////////////////////////////
                           A  2604    ;  468	
                           A  2605    ;  469			if (PacketCommand == 0x0910) //
                           A  2606    .line 469
000AE0 A9100A13            A  2607    	CPX	_PacketCommand+1,#16
000AE4 1FA9090A 12         A  2608    	CPCX	_PacketCommand,#9
000AE9 EB 29               A  2609    	JR	NE,_13_L_115
                           A  2610    ;  470			{
                           A  2611    ;  471				SPITxBuffer[0] = 0x4D;
                           A  2612    .line 471
000AEB E94D0400            A  2613    	LDX	_SPITxBuffer,#77
                           A  2614    ;  472				SPITxBuffer[1] = 0x00;
                           A  2615    .line 472
000AEF E9000401            A  2616    	LDX	_SPITxBuffer+1,#-0
                           A  2617    ;  473				SPITxBuffer[2] = GetPacketD
                           A  2618    .line 473
000AF3 1F7000              A  2619    	PUSH	#0
000AF6 1F7000              A  2620    	PUSH	#0
000AF9 D6 015E             A  2621    	CALL	_GetPacketData
000AFC 50E1                A  2622    	POP	R1
000AFE 50E1                A  2623    	POP	R1
000B00 940402              A  2624    	LDX	_SPITxBuffer+2,R0
                           A  2625    ;  474				SPITxBuffer[3] = 0x00;
                           A  2626    .line 474
000B03 E9000403            A  2627    	LDX	_SPITxBuffer+3,#-0
                           A  2628    ;  475				SendSPI (4);
                           A  2629    .line 475
000B07 1F7004              A  2630    	PUSH	#4
000B0A 1F7000              A  2631    	PUSH	#0
000B0D D6 0397             A  2632    	CALL	_SendSPI
000B10 50E0                A  2633    	POP	R0
000B12 50E0                A  2634    	POP	R0
                           A  2635    ;  476			}
000B14                     A  2636    _13_L_115:
                           A  2637    .line 476
                           A  2638    ;  477			if (PacketCommand == 0x0911) //
                           A  2639    .line 477
000B14 A9110A13            A  2640    	CPX	_PacketCommand+1,#17
000B18 1FA9090A 12         A  2641    	CPCX	_PacketCommand,#9
000B1D EB 35               A  2642    	JR	NE,_13_L_117
                           A  2643    ;  478			{
                           A  2644    ;  479				SPITxBuffer[0] = 0x48;
                           A  2645    .line 479
000B1F E9480400            A  2646    	LDX	_SPITxBuffer,#72
                           A  2647    ;  480				SPITxBuffer[1] = 0x00;
                           A  2648    .line 480
000B23 E9000401            A  2649    	LDX	_SPITxBuffer+1,#-0
                           A  2650    ;  481				SPITxBuffer[2] = GetPacketD
                           A  2651    .line 481
000B27 1F7000              A  2652    	PUSH	#0
Zilog Z8 Encore! Macro Assembler Version 2.52 (11010702) 19-Oct-14     17:25:54     page:  52


PC     Object              I  Line    Source interface.src
000B2A 1F7000              A  2653    	PUSH	#0
000B2D D6 015E             A  2654    	CALL	_GetPacketData
000B30 50E1                A  2655    	POP	R1
000B32 50E1                A  2656    	POP	R1
000B34 940402              A  2657    	LDX	_SPITxBuffer+2,R0
                           A  2658    ;  482				SPITxBuffer[3] = GetPacketD
                           A  2659    .line 482
000B37 1F7001              A  2660    	PUSH	#1
000B3A 1F7000              A  2661    	PUSH	#0
000B3D D6 015E             A  2662    	CALL	_GetPacketData
000B40 50E1                A  2663    	POP	R1
000B42 50E1                A  2664    	POP	R1
000B44 940403              A  2665    	LDX	_SPITxBuffer+3,R0
                           A  2666    ;  483				SendSPI (4);
                           A  2667    .line 483
000B47 1F7004              A  2668    	PUSH	#4
000B4A 1F7000              A  2669    	PUSH	#0
000B4D D6 0397             A  2670    	CALL	_SendSPI
000B50 50E0                A  2671    	POP	R0
000B52 50E0                A  2672    	POP	R0
                           A  2673    ;  484			}
000B54                     A  2674    _13_L_117:
                           A  2675    .line 484
                           A  2676    ;  485			if (PacketCommand == 0x0912) //
                           A  2677    .line 485
000B54 A9120A13            A  2678    	CPX	_PacketCommand+1,#18
000B58 1FA9090A 12         A  2679    	CPCX	_PacketCommand,#9
000B5D EB 35               A  2680    	JR	NE,_13_L_119
                           A  2681    ;  486			{
                           A  2682    ;  487				SPITxBuffer[0] = 0x40;
                           A  2683    .line 487
000B5F E9400400            A  2684    	LDX	_SPITxBuffer,#64
                           A  2685    ;  488				SPITxBuffer[1] = 0x00;
                           A  2686    .line 488
000B63 E9000401            A  2687    	LDX	_SPITxBuffer+1,#-0
                           A  2688    ;  489				SPITxBuffer[2] = GetPacketD
                           A  2689    .line 489
000B67 1F7000              A  2690    	PUSH	#0
000B6A 1F7000              A  2691    	PUSH	#0
000B6D D6 015E             A  2692    	CALL	_GetPacketData
000B70 50E1                A  2693    	POP	R1
000B72 50E1                A  2694    	POP	R1
000B74 940402              A  2695    	LDX	_SPITxBuffer+2,R0
                           A  2696    ;  490				SPITxBuffer[3] = GetPacketD
                           A  2697    .line 490
000B77 1F7001              A  2698    	PUSH	#1
000B7A 1F7000              A  2699    	PUSH	#0
000B7D D6 015E             A  2700    	CALL	_GetPacketData
000B80 50E1                A  2701    	POP	R1
000B82 50E1                A  2702    	POP	R1
000B84 940403              A  2703    	LDX	_SPITxBuffer+3,R0
                           A  2704    ;  491				SendSPI (4);
Zilog Z8 Encore! Macro Assembler Version 2.52 (11010702) 19-Oct-14     17:25:54     page:  53


PC     Object              I  Line    Source interface.src
                           A  2705    .line 491
000B87 1F7004              A  2706    	PUSH	#4
000B8A 1F7000              A  2707    	PUSH	#0
000B8D D6 0397             A  2708    	CALL	_SendSPI
000B90 50E0                A  2709    	POP	R0
000B92 50E0                A  2710    	POP	R0
                           A  2711    ;  492			}
000B94                     A  2712    _13_L_119:
                           A  2713    .line 492
                           A  2714    ;  493			if (PacketCommand == 0x0913) //
                           A  2715    .line 493
000B94 A9130A13            A  2716    	CPX	_PacketCommand+1,#19
000B98 1FA9090A 12         A  2717    	CPCX	_PacketCommand,#9
000B9D EB 35               A  2718    	JR	NE,_13_L_121
                           A  2719    ;  494			{
                           A  2720    ;  495				SPITxBuffer[0] = 0xC1;
                           A  2721    .line 495
000B9F E9C10400            A  2722    	LDX	_SPITxBuffer,#193
                           A  2723    ;  496				SPITxBuffer[1] = 0x00;
                           A  2724    .line 496
000BA3 E9000401            A  2725    	LDX	_SPITxBuffer+1,#-0
                           A  2726    ;  497				SPITxBuffer[2] = GetPacketD
                           A  2727    .line 497
000BA7 1F7000              A  2728    	PUSH	#0
000BAA 1F7000              A  2729    	PUSH	#0
000BAD D6 015E             A  2730    	CALL	_GetPacketData
000BB0 50E1                A  2731    	POP	R1
000BB2 50E1                A  2732    	POP	R1
000BB4 940402              A  2733    	LDX	_SPITxBuffer+2,R0
                           A  2734    ;  498				SPITxBuffer[3] = GetPacketD
                           A  2735    .line 498
000BB7 1F7001              A  2736    	PUSH	#1
000BBA 1F7000              A  2737    	PUSH	#0
000BBD D6 015E             A  2738    	CALL	_GetPacketData
000BC0 50E1                A  2739    	POP	R1
000BC2 50E1                A  2740    	POP	R1
000BC4 940403              A  2741    	LDX	_SPITxBuffer+3,R0
                           A  2742    ;  499				SendSPI (4);
                           A  2743    .line 499
000BC7 1F7004              A  2744    	PUSH	#4
000BCA 1F7000              A  2745    	PUSH	#0
000BCD D6 0397             A  2746    	CALL	_SendSPI
000BD0 50E0                A  2747    	POP	R0
000BD2 50E0                A  2748    	POP	R0
                           A  2749    ;  500			}
000BD4                     A  2750    _13_L_121:
                           A  2751    .line 500
                           A  2752    ;  501	
                           A  2753    ;  502			///////////////////////////////
                           A  2754    ;  503			//		Read Instructions ATMeg
                           A  2755    ;  504			///////////////////////////////
                           A  2756    ;  505	
Zilog Z8 Encore! Macro Assembler Version 2.52 (11010702) 19-Oct-14     17:25:54     page:  54


PC     Object              I  Line    Source interface.src
                           A  2757    ;  506			if (PacketCommand == 0x0920) //
                           A  2758    .line 506
000BD4 A9200A13            A  2759    	CPX	_PacketCommand+1,#32
000BD8 1FA9090A 12         A  2760    	CPCX	_PacketCommand,#9
000BDD EB 5F               A  2761    	JR	NE,_13_L_123
                           A  2762    ;  507			{
                           A  2763    ;  508				SPITxBuffer[0] = 0x28;
                           A  2764    .line 508
000BDF E9280400            A  2765    	LDX	_SPITxBuffer,#40
                           A  2766    ;  509				SPITxBuffer[1] = GetPacketD
                           A  2767    .line 509
000BE3 1F7000              A  2768    	PUSH	#0
000BE6 1F7000              A  2769    	PUSH	#0
000BE9 D6 015E             A  2770    	CALL	_GetPacketData
000BEC 50E1                A  2771    	POP	R1
000BEE 50E1                A  2772    	POP	R1
000BF0 940401              A  2773    	LDX	_SPITxBuffer+1,R0
                           A  2774    ;  510				SPITxBuffer[2] = GetPacketD
                           A  2775    .line 510
000BF3 1F7001              A  2776    	PUSH	#1
000BF6 1F7000              A  2777    	PUSH	#0
000BF9 D6 015E             A  2778    	CALL	_GetPacketData
000BFC 50E1                A  2779    	POP	R1
000BFE 50E1                A  2780    	POP	R1
000C00 940402              A  2781    	LDX	_SPITxBuffer+2,R0
                           A  2782    ;  511				SPITxBuffer[3] = 0x00;
                           A  2783    .line 511
000C03 E9000403            A  2784    	LDX	_SPITxBuffer+3,#-0
                           A  2785    ;  512				SendSPI (4);
                           A  2786    .line 512
000C07 1F7004              A  2787    	PUSH	#4
000C0A 1F7000              A  2788    	PUSH	#0
000C0D D6 0397             A  2789    	CALL	_SendSPI
000C10 50E0                A  2790    	POP	R0
000C12 50E0                A  2791    	POP	R0
                           A  2792    ;  513				tempstuff[0] = SPIRxBuffer[
                           A  2793    .line 513
000C14 840603              A  2794    	LDX	R0,_SPIRxBuffer+3
000C17 89E0E0              A  2795    	LDX	-32(RR14),R0
                           A  2796    ;  514				SendPacket (PacketCommand, 
                           A  2797    .line 514
000C1A 1F7001              A  2798    	PUSH	#1
000C1D 1F7000              A  2799    	PUSH	#0
000C20 1CFF                A  2800    	LD	R1,#255
000C22 0CE0                A  2801    	LD	R0,#224
000C24 020F                A  2802    	ADD	R0,R15
000C26 121E                A  2803    	ADC	R1,R14
000C28 70E0                A  2804    	PUSH	R0
000C2A 70E1                A  2805    	PUSH	R1
000C2C C8 A130             A  2806    	PUSHX	_PacketCommand+1
000C2F C8 A120             A  2807    	PUSHX	_PacketCommand
000C32 D6 0208             A  2808    	CALL	_SendPacket
Zilog Z8 Encore! Macro Assembler Version 2.52 (11010702) 19-Oct-14     17:25:54     page:  55


PC     Object              I  Line    Source interface.src
000C35 2F                  A  2809    	ATM	
000C36 09060FFF            A  2810    	ADDX	4095,#6
000C3A 19000FFE            A  2811    	ADCX	4094,#-0
                           A  2812    ;  515			}
000C3E                     A  2813    _13_L_123:
                           A  2814    .line 515
                           A  2815    ;  516			if (PacketCommand == 0x0921) //
                           A  2816    .line 516
000C3E A9210A13            A  2817    	CPX	_PacketCommand+1,#33
000C42 1FA9090A 12         A  2818    	CPCX	_PacketCommand,#9
000C47 EB 5F               A  2819    	JR	NE,_13_L_125
                           A  2820    ;  517			{
                           A  2821    ;  518				SPITxBuffer[0] = 0x20;
                           A  2822    .line 518
000C49 E9200400            A  2823    	LDX	_SPITxBuffer,#32
                           A  2824    ;  519				SPITxBuffer[1] = GetPacketD
                           A  2825    .line 519
000C4D 1F7000              A  2826    	PUSH	#0
000C50 1F7000              A  2827    	PUSH	#0
000C53 D6 015E             A  2828    	CALL	_GetPacketData
000C56 50E1                A  2829    	POP	R1
000C58 50E1                A  2830    	POP	R1
000C5A 940401              A  2831    	LDX	_SPITxBuffer+1,R0
                           A  2832    ;  520				SPITxBuffer[2] = GetPacketD
                           A  2833    .line 520
000C5D 1F7001              A  2834    	PUSH	#1
000C60 1F7000              A  2835    	PUSH	#0
000C63 D6 015E             A  2836    	CALL	_GetPacketData
000C66 50E1                A  2837    	POP	R1
000C68 50E1                A  2838    	POP	R1
000C6A 940402              A  2839    	LDX	_SPITxBuffer+2,R0
                           A  2840    ;  521				SPITxBuffer[3] = 0x00;
                           A  2841    .line 521
000C6D E9000403            A  2842    	LDX	_SPITxBuffer+3,#-0
                           A  2843    ;  522				SendSPI (4);
                           A  2844    .line 522
000C71 1F7004              A  2845    	PUSH	#4
000C74 1F7000              A  2846    	PUSH	#0
000C77 D6 0397             A  2847    	CALL	_SendSPI
000C7A 50E0                A  2848    	POP	R0
000C7C 50E0                A  2849    	POP	R0
                           A  2850    ;  523				tempstuff[0] = SPIRxBuffer[
                           A  2851    .line 523
000C7E 840603              A  2852    	LDX	R0,_SPIRxBuffer+3
000C81 89E0E0              A  2853    	LDX	-32(RR14),R0
                           A  2854    ;  524				SendPacket (PacketCommand, 
                           A  2855    .line 524
000C84 1F7001              A  2856    	PUSH	#1
000C87 1F7000              A  2857    	PUSH	#0
000C8A 1CFF                A  2858    	LD	R1,#255
000C8C 0CE0                A  2859    	LD	R0,#224
000C8E 020F                A  2860    	ADD	R0,R15
Zilog Z8 Encore! Macro Assembler Version 2.52 (11010702) 19-Oct-14     17:25:54     page:  56


PC     Object              I  Line    Source interface.src
000C90 121E                A  2861    	ADC	R1,R14
000C92 70E0                A  2862    	PUSH	R0
000C94 70E1                A  2863    	PUSH	R1
000C96 C8 A130             A  2864    	PUSHX	_PacketCommand+1
000C99 C8 A120             A  2865    	PUSHX	_PacketCommand
000C9C D6 0208             A  2866    	CALL	_SendPacket
000C9F 2F                  A  2867    	ATM	
000CA0 09060FFF            A  2868    	ADDX	4095,#6
000CA4 19000FFE            A  2869    	ADCX	4094,#-0
                           A  2870    ;  525			}
000CA8                     A  2871    _13_L_125:
                           A  2872    .line 525
                           A  2873    ;  526			if (PacketCommand == 0x0922) //
                           A  2874    .line 526
000CA8 A9220A13            A  2875    	CPX	_PacketCommand+1,#34
000CAC 1FA9090A 12         A  2876    	CPCX	_PacketCommand,#9
000CB1 EB 5F               A  2877    	JR	NE,_13_L_127
                           A  2878    ;  527			{
                           A  2879    ;  528				SPITxBuffer[0] = 0xA0;
                           A  2880    .line 528
000CB3 E9A00400            A  2881    	LDX	_SPITxBuffer,#160
                           A  2882    ;  529				SPITxBuffer[1] = GetPacketD
                           A  2883    .line 529
000CB7 1F7000              A  2884    	PUSH	#0
000CBA 1F7000              A  2885    	PUSH	#0
000CBD D6 015E             A  2886    	CALL	_GetPacketData
000CC0 50E1                A  2887    	POP	R1
000CC2 50E1                A  2888    	POP	R1
000CC4 940401              A  2889    	LDX	_SPITxBuffer+1,R0
                           A  2890    ;  530				SPITxBuffer[2] = GetPacketD
                           A  2891    .line 530
000CC7 1F7001              A  2892    	PUSH	#1
000CCA 1F7000              A  2893    	PUSH	#0
000CCD D6 015E             A  2894    	CALL	_GetPacketData
000CD0 50E1                A  2895    	POP	R1
000CD2 50E1                A  2896    	POP	R1
000CD4 940402              A  2897    	LDX	_SPITxBuffer+2,R0
                           A  2898    ;  531				SPITxBuffer[3] = 0x00;
                           A  2899    .line 531
000CD7 E9000403            A  2900    	LDX	_SPITxBuffer+3,#-0
                           A  2901    ;  532				SendSPI (4);
                           A  2902    .line 532
000CDB 1F7004              A  2903    	PUSH	#4
000CDE 1F7000              A  2904    	PUSH	#0
000CE1 D6 0397             A  2905    	CALL	_SendSPI
000CE4 50E0                A  2906    	POP	R0
000CE6 50E0                A  2907    	POP	R0
                           A  2908    ;  533				tempstuff[0] = SPIRxBuffer[
                           A  2909    .line 533
000CE8 840603              A  2910    	LDX	R0,_SPIRxBuffer+3
000CEB 89E0E0              A  2911    	LDX	-32(RR14),R0
                           A  2912    ;  534				SendPacket (PacketCommand, 
Zilog Z8 Encore! Macro Assembler Version 2.52 (11010702) 19-Oct-14     17:25:54     page:  57


PC     Object              I  Line    Source interface.src
                           A  2913    .line 534
000CEE 1F7001              A  2914    	PUSH	#1
000CF1 1F7000              A  2915    	PUSH	#0
000CF4 1CFF                A  2916    	LD	R1,#255
000CF6 0CE0                A  2917    	LD	R0,#224
000CF8 020F                A  2918    	ADD	R0,R15
000CFA 121E                A  2919    	ADC	R1,R14
000CFC 70E0                A  2920    	PUSH	R0
000CFE 70E1                A  2921    	PUSH	R1
000D00 C8 A130             A  2922    	PUSHX	_PacketCommand+1
000D03 C8 A120             A  2923    	PUSHX	_PacketCommand
000D06 D6 0208             A  2924    	CALL	_SendPacket
000D09 2F                  A  2925    	ATM	
000D0A 09060FFF            A  2926    	ADDX	4095,#6
000D0E 19000FFE            A  2927    	ADCX	4094,#-0
                           A  2928    ;  535			}
000D12                     A  2929    _13_L_127:
                           A  2930    .line 535
                           A  2931    ;  536			if (PacketCommand == 0x0923) //
                           A  2932    .line 536
000D12 A9230A13            A  2933    	CPX	_PacketCommand+1,#35
000D16 1FA9090A 12         A  2934    	CPCX	_PacketCommand,#9
000D1B EB 47               A  2935    	JR	NE,_13_L_129
                           A  2936    ;  537			{
                           A  2937    ;  538				SPITxBuffer[0] = 0x58;
                           A  2938    .line 538
000D1D E9580400            A  2939    	LDX	_SPITxBuffer,#88
                           A  2940    ;  539				SPITxBuffer[1] = 0x00;
                           A  2941    .line 539
000D21 E9000401            A  2942    	LDX	_SPITxBuffer+1,#-0
                           A  2943    ;  540				SPITxBuffer[2] = 0x00;
                           A  2944    .line 540
000D25 E9000402            A  2945    	LDX	_SPITxBuffer+2,#-0
                           A  2946    ;  541				SPITxBuffer[3] = 0x00;
                           A  2947    .line 541
000D29 E9000403            A  2948    	LDX	_SPITxBuffer+3,#-0
                           A  2949    ;  542				SendSPI (4);
                           A  2950    .line 542
000D2D 1F7004              A  2951    	PUSH	#4
000D30 1F7000              A  2952    	PUSH	#0
000D33 D6 0397             A  2953    	CALL	_SendSPI
000D36 50E0                A  2954    	POP	R0
000D38 50E0                A  2955    	POP	R0
                           A  2956    ;  543				tempstuff[0] = SPIRxBuffer[
                           A  2957    .line 543
000D3A 840603              A  2958    	LDX	R0,_SPIRxBuffer+3
000D3D 89E0E0              A  2959    	LDX	-32(RR14),R0
                           A  2960    ;  544				SendPacket (PacketCommand, 
                           A  2961    .line 544
000D40 1F7001              A  2962    	PUSH	#1
000D43 1F7000              A  2963    	PUSH	#0
000D46 1CFF                A  2964    	LD	R1,#255
Zilog Z8 Encore! Macro Assembler Version 2.52 (11010702) 19-Oct-14     17:25:54     page:  58


PC     Object              I  Line    Source interface.src
000D48 0CE0                A  2965    	LD	R0,#224
000D4A 020F                A  2966    	ADD	R0,R15
000D4C 121E                A  2967    	ADC	R1,R14
000D4E 70E0                A  2968    	PUSH	R0
000D50 70E1                A  2969    	PUSH	R1
000D52 C8 A130             A  2970    	PUSHX	_PacketCommand+1
000D55 C8 A120             A  2971    	PUSHX	_PacketCommand
000D58 D6 0208             A  2972    	CALL	_SendPacket
000D5B 2F                  A  2973    	ATM	
000D5C 09060FFF            A  2974    	ADDX	4095,#6
000D60 19000FFE            A  2975    	ADCX	4094,#-0
                           A  2976    ;  545			}
000D64                     A  2977    _13_L_129:
                           A  2978    .line 545
                           A  2979    ;  546			if (PacketCommand == 0x0924) //
                           A  2980    .line 546
000D64 A9240A13            A  2981    	CPX	_PacketCommand+1,#36
000D68 1FA9090A 12         A  2982    	CPCX	_PacketCommand,#9
000D6D ED 0D FD            A  2983    	JR	NE,_13_L_131
                           A  2984    ;  547			{
                           A  2985    ;  548				SPITxBuffer[0] = 0x30;
                           A  2986    .line 548
000D70 E9300400            A  2987    	LDX	_SPITxBuffer,#48
                           A  2988    ;  549				SPITxBuffer[1] = 0x00;
                           A  2989    .line 549
000D74 E9000401            A  2990    	LDX	_SPITxBuffer+1,#-0
                           A  2991    ;  550				SPITxBuffer[2] = 0x00;
                           A  2992    .line 550
000D78 E9000402            A  2993    	LDX	_SPITxBuffer+2,#-0
                           A  2994    ;  551				SPITxBuffer[3] = 0x00;
                           A  2995    .line 551
000D7C E9000403            A  2996    	LDX	_SPITxBuffer+3,#-0
                           A  2997    ;  552				SendSPI (4);
                           A  2998    .line 552
000D80 1F7004              A  2999    	PUSH	#4
000D83 1F7000              A  3000    	PUSH	#0
000D86 D6 0397             A  3001    	CALL	_SendSPI
000D89 50E0                A  3002    	POP	R0
000D8B 50E0                A  3003    	POP	R0
                           A  3004    ;  553				tempstuff[0] = SPIRxBuffer[
                           A  3005    .line 553
000D8D 840603              A  3006    	LDX	R0,_SPIRxBuffer+3
000D90 89E0E0              A  3007    	LDX	-32(RR14),R0
                           A  3008    ;  554				SPITxBuffer[0] = 0x30;
                           A  3009    .line 554
000D93 E9300400            A  3010    	LDX	_SPITxBuffer,#48
                           A  3011    ;  555				SPITxBuffer[1] = 0x00;
                           A  3012    .line 555
000D97 E9000401            A  3013    	LDX	_SPITxBuffer+1,#-0
                           A  3014    ;  556				SPITxBuffer[2] = 0x01;
                           A  3015    .line 556
000D9B E9010402            A  3016    	LDX	_SPITxBuffer+2,#1
Zilog Z8 Encore! Macro Assembler Version 2.52 (11010702) 19-Oct-14     17:25:54     page:  59


PC     Object              I  Line    Source interface.src
                           A  3017    ;  557				SPITxBuffer[3] = 0x00;
                           A  3018    .line 557
000D9F E9000403            A  3019    	LDX	_SPITxBuffer+3,#-0
                           A  3020    ;  558				SendSPI (4);
                           A  3021    .line 558
000DA3 1F7004              A  3022    	PUSH	#4
000DA6 1F7000              A  3023    	PUSH	#0
000DA9 D6 0397             A  3024    	CALL	_SendSPI
000DAC 50E0                A  3025    	POP	R0
000DAE 50E0                A  3026    	POP	R0
                           A  3027    ;  559				tempstuff[1] = SPIRxBuffer[
                           A  3028    .line 559
000DB0 840603              A  3029    	LDX	R0,_SPIRxBuffer+3
000DB3 89E0E1              A  3030    	LDX	-31(RR14),R0
                           A  3031    ;  560				SPITxBuffer[0] = 0x30;
                           A  3032    .line 560
000DB6 E9300400            A  3033    	LDX	_SPITxBuffer,#48
                           A  3034    ;  561				SPITxBuffer[1] = 0x00;
                           A  3035    .line 561
000DBA E9000401            A  3036    	LDX	_SPITxBuffer+1,#-0
                           A  3037    ;  562				SPITxBuffer[2] = 0x02;
                           A  3038    .line 562
000DBE E9020402            A  3039    	LDX	_SPITxBuffer+2,#2
                           A  3040    ;  563				SPITxBuffer[3] = 0x00;
                           A  3041    .line 563
000DC2 E9000403            A  3042    	LDX	_SPITxBuffer+3,#-0
                           A  3043    ;  564				SendSPI (4);
                           A  3044    .line 564
000DC6 1F7004              A  3045    	PUSH	#4
000DC9 1F7000              A  3046    	PUSH	#0
000DCC D6 0397             A  3047    	CALL	_SendSPI
000DCF 50E0                A  3048    	POP	R0
000DD1 50E0                A  3049    	POP	R0
                           A  3050    ;  565				tempstuff[2] = SPIRxBuffer[
                           A  3051    .line 565
000DD3 840603              A  3052    	LDX	R0,_SPIRxBuffer+3
000DD6 89E0E2              A  3053    	LDX	-30(RR14),R0
                           A  3054    ;  566				SendPacket (PacketCommand, 
                           A  3055    .line 566
000DD9 1F7003              A  3056    	PUSH	#3
000DDC 1F7000              A  3057    	PUSH	#0
000DDF 1CFF                A  3058    	LD	R1,#255
000DE1 0CE0                A  3059    	LD	R0,#224
000DE3 020F                A  3060    	ADD	R0,R15
000DE5 121E                A  3061    	ADC	R1,R14
000DE7 70E0                A  3062    	PUSH	R0
000DE9 70E1                A  3063    	PUSH	R1
000DEB C8 A130             A  3064    	PUSHX	_PacketCommand+1
000DEE C8 A120             A  3065    	PUSHX	_PacketCommand
000DF1 D6 0208             A  3066    	CALL	_SendPacket
000DF4 2F                  A  3067    	ATM	
000DF5 09060FFF            A  3068    	ADDX	4095,#6
Zilog Z8 Encore! Macro Assembler Version 2.52 (11010702) 19-Oct-14     17:25:54     page:  60


PC     Object              I  Line    Source interface.src
000DF9 19000FFE            A  3069    	ADCX	4094,#-0
                           A  3070    ;  567			}
000DFD                     A  3071    _13_L_131:
                           A  3072    .line 567
                           A  3073    ;  568			if (PacketCommand == 0x0925) //
                           A  3074    .line 568
000DFD A9250A13            A  3075    	CPX	_PacketCommand+1,#37
000E01 1FA9090A 12         A  3076    	CPCX	_PacketCommand,#9
000E06 EB 47               A  3077    	JR	NE,_13_L_133
                           A  3078    ;  569			{
                           A  3079    ;  570				SPITxBuffer[0] = 0x50;
                           A  3080    .line 570
000E08 E9500400            A  3081    	LDX	_SPITxBuffer,#80
                           A  3082    ;  571				SPITxBuffer[1] = 0x00;
                           A  3083    .line 571
000E0C E9000401            A  3084    	LDX	_SPITxBuffer+1,#-0
                           A  3085    ;  572				SPITxBuffer[2] = 0x00;
                           A  3086    .line 572
000E10 E9000402            A  3087    	LDX	_SPITxBuffer+2,#-0
                           A  3088    ;  573				SPITxBuffer[3] = 0x00;
                           A  3089    .line 573
000E14 E9000403            A  3090    	LDX	_SPITxBuffer+3,#-0
                           A  3091    ;  574				SendSPI (4);
                           A  3092    .line 574
000E18 1F7004              A  3093    	PUSH	#4
000E1B 1F7000              A  3094    	PUSH	#0
000E1E D6 0397             A  3095    	CALL	_SendSPI
000E21 50E0                A  3096    	POP	R0
000E23 50E0                A  3097    	POP	R0
                           A  3098    ;  575				tempstuff[0] = SPIRxBuffer[
                           A  3099    .line 575
000E25 840603              A  3100    	LDX	R0,_SPIRxBuffer+3
000E28 89E0E0              A  3101    	LDX	-32(RR14),R0
                           A  3102    ;  576				SendPacket (PacketCommand, 
                           A  3103    .line 576
000E2B 1F7001              A  3104    	PUSH	#1
000E2E 1F7000              A  3105    	PUSH	#0
000E31 1CFF                A  3106    	LD	R1,#255
000E33 0CE0                A  3107    	LD	R0,#224
000E35 020F                A  3108    	ADD	R0,R15
000E37 121E                A  3109    	ADC	R1,R14
000E39 70E0                A  3110    	PUSH	R0
000E3B 70E1                A  3111    	PUSH	R1
000E3D C8 A130             A  3112    	PUSHX	_PacketCommand+1
000E40 C8 A120             A  3113    	PUSHX	_PacketCommand
000E43 D6 0208             A  3114    	CALL	_SendPacket
000E46 2F                  A  3115    	ATM	
000E47 09060FFF            A  3116    	ADDX	4095,#6
000E4B 19000FFE            A  3117    	ADCX	4094,#-0
                           A  3118    ;  577			}		
000E4F                     A  3119    _13_L_133:
                           A  3120    .line 577
Zilog Z8 Encore! Macro Assembler Version 2.52 (11010702) 19-Oct-14     17:25:54     page:  61


PC     Object              I  Line    Source interface.src
                           A  3121    ;  578			if (PacketCommand == 0x0926) //
                           A  3122    .line 578
000E4F A9260A13            A  3123    	CPX	_PacketCommand+1,#38
000E53 1FA9090A 12         A  3124    	CPCX	_PacketCommand,#9
000E58 EB 47               A  3125    	JR	NE,_13_L_135
                           A  3126    ;  579			{
                           A  3127    ;  580				SPITxBuffer[0] = 0x58;
                           A  3128    .line 580
000E5A E9580400            A  3129    	LDX	_SPITxBuffer,#88
                           A  3130    ;  581				SPITxBuffer[1] = 0x08;
                           A  3131    .line 581
000E5E E9080401            A  3132    	LDX	_SPITxBuffer+1,#8
                           A  3133    ;  582				SPITxBuffer[2] = 0x00;
                           A  3134    .line 582
000E62 E9000402            A  3135    	LDX	_SPITxBuffer+2,#-0
                           A  3136    ;  583				SPITxBuffer[3] = 0x00;
                           A  3137    .line 583
000E66 E9000403            A  3138    	LDX	_SPITxBuffer+3,#-0
                           A  3139    ;  584				SendSPI (4);
                           A  3140    .line 584
000E6A 1F7004              A  3141    	PUSH	#4
000E6D 1F7000              A  3142    	PUSH	#0
000E70 D6 0397             A  3143    	CALL	_SendSPI
000E73 50E0                A  3144    	POP	R0
000E75 50E0                A  3145    	POP	R0
                           A  3146    ;  585				tempstuff[0] = SPIRxBuffer[
                           A  3147    .line 585
000E77 840603              A  3148    	LDX	R0,_SPIRxBuffer+3
000E7A 89E0E0              A  3149    	LDX	-32(RR14),R0
                           A  3150    ;  586				SendPacket (PacketCommand, 
                           A  3151    .line 586
000E7D 1F7001              A  3152    	PUSH	#1
000E80 1F7000              A  3153    	PUSH	#0
000E83 1CFF                A  3154    	LD	R1,#255
000E85 0CE0                A  3155    	LD	R0,#224
000E87 020F                A  3156    	ADD	R0,R15
000E89 121E                A  3157    	ADC	R1,R14
000E8B 70E0                A  3158    	PUSH	R0
000E8D 70E1                A  3159    	PUSH	R1
000E8F C8 A130             A  3160    	PUSHX	_PacketCommand+1
000E92 C8 A120             A  3161    	PUSHX	_PacketCommand
000E95 D6 0208             A  3162    	CALL	_SendPacket
000E98 2F                  A  3163    	ATM	
000E99 09060FFF            A  3164    	ADDX	4095,#6
000E9D 19000FFE            A  3165    	ADCX	4094,#-0
                           A  3166    ;  587			}		
000EA1                     A  3167    _13_L_135:
                           A  3168    .line 587
                           A  3169    ;  588			if (PacketCommand == 0x0927) //
                           A  3170    .line 588
000EA1 A9270A13            A  3171    	CPX	_PacketCommand+1,#39
000EA5 1FA9090A 12         A  3172    	CPCX	_PacketCommand,#9
Zilog Z8 Encore! Macro Assembler Version 2.52 (11010702) 19-Oct-14     17:25:54     page:  62


PC     Object              I  Line    Source interface.src
000EAA EB 47               A  3173    	JR	NE,_13_L_137
                           A  3174    ;  589			{
                           A  3175    ;  590				SPITxBuffer[0] = 0x50;
                           A  3176    .line 590
000EAC E9500400            A  3177    	LDX	_SPITxBuffer,#80
                           A  3178    ;  591				SPITxBuffer[1] = 0x08;
                           A  3179    .line 591
000EB0 E9080401            A  3180    	LDX	_SPITxBuffer+1,#8
                           A  3181    ;  592				SPITxBuffer[2] = 0x00;
                           A  3182    .line 592
000EB4 E9000402            A  3183    	LDX	_SPITxBuffer+2,#-0
                           A  3184    ;  593				SPITxBuffer[3] = 0x00;
                           A  3185    .line 593
000EB8 E9000403            A  3186    	LDX	_SPITxBuffer+3,#-0
                           A  3187    ;  594				SendSPI (4);
                           A  3188    .line 594
000EBC 1F7004              A  3189    	PUSH	#4
000EBF 1F7000              A  3190    	PUSH	#0
000EC2 D6 0397             A  3191    	CALL	_SendSPI
000EC5 50E0                A  3192    	POP	R0
000EC7 50E0                A  3193    	POP	R0
                           A  3194    ;  595				tempstuff[0] = SPIRxBuffer[
                           A  3195    .line 595
000EC9 840603              A  3196    	LDX	R0,_SPIRxBuffer+3
000ECC 89E0E0              A  3197    	LDX	-32(RR14),R0
                           A  3198    ;  596				SendPacket (PacketCommand, 
                           A  3199    .line 596
000ECF 1F7001              A  3200    	PUSH	#1
000ED2 1F7000              A  3201    	PUSH	#0
000ED5 1CFF                A  3202    	LD	R1,#255
000ED7 0CE0                A  3203    	LD	R0,#224
000ED9 020F                A  3204    	ADD	R0,R15
000EDB 121E                A  3205    	ADC	R1,R14
000EDD 70E0                A  3206    	PUSH	R0
000EDF 70E1                A  3207    	PUSH	R1
000EE1 C8 A130             A  3208    	PUSHX	_PacketCommand+1
000EE4 C8 A120             A  3209    	PUSHX	_PacketCommand
000EE7 D6 0208             A  3210    	CALL	_SendPacket
000EEA 2F                  A  3211    	ATM	
000EEB 09060FFF            A  3212    	ADDX	4095,#6
000EEF 19000FFE            A  3213    	ADCX	4094,#-0
                           A  3214    ;  597			}		
000EF3                     A  3215    _13_L_137:
                           A  3216    .line 597
                           A  3217    ;  598			if (PacketCommand == 0x0928) //
                           A  3218    .line 598
000EF3 A9280A13            A  3219    	CPX	_PacketCommand+1,#40
000EF7 1FA9090A 12         A  3220    	CPCX	_PacketCommand,#9
000EFC EB 47               A  3221    	JR	NE,_13_L_139
                           A  3222    ;  599			{
                           A  3223    ;  600				SPITxBuffer[0] = 0x38;
                           A  3224    .line 600
Zilog Z8 Encore! Macro Assembler Version 2.52 (11010702) 19-Oct-14     17:25:54     page:  63


PC     Object              I  Line    Source interface.src
000EFE E9380400            A  3225    	LDX	_SPITxBuffer,#56
                           A  3226    ;  601				SPITxBuffer[1] = 0x00;
                           A  3227    .line 601
000F02 E9000401            A  3228    	LDX	_SPITxBuffer+1,#-0
                           A  3229    ;  602				SPITxBuffer[2] = 0x00;
                           A  3230    .line 602
000F06 E9000402            A  3231    	LDX	_SPITxBuffer+2,#-0
                           A  3232    ;  603				SPITxBuffer[3] = 0x00;
                           A  3233    .line 603
000F0A E9000403            A  3234    	LDX	_SPITxBuffer+3,#-0
                           A  3235    ;  604				SendSPI (4);
                           A  3236    .line 604
000F0E 1F7004              A  3237    	PUSH	#4
000F11 1F7000              A  3238    	PUSH	#0
000F14 D6 0397             A  3239    	CALL	_SendSPI
000F17 50E0                A  3240    	POP	R0
000F19 50E0                A  3241    	POP	R0
                           A  3242    ;  605				tempstuff[0] = SPIRxBuffer[
                           A  3243    .line 605
000F1B 840603              A  3244    	LDX	R0,_SPIRxBuffer+3
000F1E 89E0E0              A  3245    	LDX	-32(RR14),R0
                           A  3246    ;  606				SendPacket (PacketCommand, 
                           A  3247    .line 606
000F21 1F7001              A  3248    	PUSH	#1
000F24 1F7000              A  3249    	PUSH	#0
000F27 1CFF                A  3250    	LD	R1,#255
000F29 0CE0                A  3251    	LD	R0,#224
000F2B 020F                A  3252    	ADD	R0,R15
000F2D 121E                A  3253    	ADC	R1,R14
000F2F 70E0                A  3254    	PUSH	R0
000F31 70E1                A  3255    	PUSH	R1
000F33 C8 A130             A  3256    	PUSHX	_PacketCommand+1
000F36 C8 A120             A  3257    	PUSHX	_PacketCommand
000F39 D6 0208             A  3258    	CALL	_SendPacket
000F3C 2F                  A  3259    	ATM	
000F3D 09060FFF            A  3260    	ADDX	4095,#6
000F41 19000FFE            A  3261    	ADCX	4094,#-0
                           A  3262    ;  607			}
000F45                     A  3263    _13_L_139:
                           A  3264    .line 607
                           A  3265    ;  608			///////////////////////////////
                           A  3266    ;  609			//		Write Instructions ATMe
                           A  3267    ;  610			///////////////////////////////
                           A  3268    ;  611	
                           A  3269    ;  612			if (PacketCommand == 0x0930) //
                           A  3270    .line 612
000F45 A9300A13            A  3271    	CPX	_PacketCommand+1,#48
000F49 1FA9090A 12         A  3272    	CPCX	_PacketCommand,#9
000F4E EB 35               A  3273    	JR	NE,_13_L_141
                           A  3274    ;  613			{
                           A  3275    ;  614				SPITxBuffer[0] = 0x4C;
                           A  3276    .line 614
Zilog Z8 Encore! Macro Assembler Version 2.52 (11010702) 19-Oct-14     17:25:54     page:  64


PC     Object              I  Line    Source interface.src
000F50 E94C0400            A  3277    	LDX	_SPITxBuffer,#76
                           A  3278    ;  615				SPITxBuffer[1] = GetPacketD
                           A  3279    .line 615
000F54 1F7000              A  3280    	PUSH	#0
000F57 1F7000              A  3281    	PUSH	#0
000F5A D6 015E             A  3282    	CALL	_GetPacketData
000F5D 50E1                A  3283    	POP	R1
000F5F 50E1                A  3284    	POP	R1
000F61 940401              A  3285    	LDX	_SPITxBuffer+1,R0
                           A  3286    ;  616				SPITxBuffer[2] = GetPacketD
                           A  3287    .line 616
000F64 1F7001              A  3288    	PUSH	#1
000F67 1F7000              A  3289    	PUSH	#0
000F6A D6 015E             A  3290    	CALL	_GetPacketData
000F6D 50E1                A  3291    	POP	R1
000F6F 50E1                A  3292    	POP	R1
000F71 940402              A  3293    	LDX	_SPITxBuffer+2,R0
                           A  3294    ;  617				SPITxBuffer[3] = 0x00;
                           A  3295    .line 617
000F74 E9000403            A  3296    	LDX	_SPITxBuffer+3,#-0
                           A  3297    ;  618				SendSPI (4);
                           A  3298    .line 618
000F78 1F7004              A  3299    	PUSH	#4
000F7B 1F7000              A  3300    	PUSH	#0
000F7E D6 0397             A  3301    	CALL	_SendSPI
000F81 50E0                A  3302    	POP	R0
000F83 50E0                A  3303    	POP	R0
                           A  3304    ;  619			}
000F85                     A  3305    _13_L_141:
                           A  3306    .line 619
                           A  3307    ;  620			if (PacketCommand == 0x0931) //
                           A  3308    .line 620
000F85 A9310A13            A  3309    	CPX	_PacketCommand+1,#49
000F89 1FA9090A 12         A  3310    	CPCX	_PacketCommand,#9
000F8E EB 41               A  3311    	JR	NE,_13_L_143
                           A  3312    ;  621			{
                           A  3313    ;  622				SPITxBuffer[0] = 0xC0;
                           A  3314    .line 622
000F90 E9C00400            A  3315    	LDX	_SPITxBuffer,#192
                           A  3316    ;  623				SPITxBuffer[1] = GetPacketD
                           A  3317    .line 623
000F94 1F7000              A  3318    	PUSH	#0
000F97 1F7000              A  3319    	PUSH	#0
000F9A D6 015E             A  3320    	CALL	_GetPacketData
000F9D 50E1                A  3321    	POP	R1
000F9F 50E1                A  3322    	POP	R1
000FA1 940401              A  3323    	LDX	_SPITxBuffer+1,R0
                           A  3324    ;  624				SPITxBuffer[2] = GetPacketD
                           A  3325    .line 624
000FA4 1F7001              A  3326    	PUSH	#1
000FA7 1F7000              A  3327    	PUSH	#0
000FAA D6 015E             A  3328    	CALL	_GetPacketData
Zilog Z8 Encore! Macro Assembler Version 2.52 (11010702) 19-Oct-14     17:25:54     page:  65


PC     Object              I  Line    Source interface.src
000FAD 50E1                A  3329    	POP	R1
000FAF 50E1                A  3330    	POP	R1
000FB1 940402              A  3331    	LDX	_SPITxBuffer+2,R0
                           A  3332    ;  625				SPITxBuffer[3] = GetPacketD
                           A  3333    .line 625
000FB4 1F7002              A  3334    	PUSH	#2
000FB7 1F7000              A  3335    	PUSH	#0
000FBA D6 015E             A  3336    	CALL	_GetPacketData
000FBD 50E1                A  3337    	POP	R1
000FBF 50E1                A  3338    	POP	R1
000FC1 940403              A  3339    	LDX	_SPITxBuffer+3,R0
                           A  3340    ;  626				SendSPI (4);
                           A  3341    .line 626
000FC4 1F7004              A  3342    	PUSH	#4
000FC7 1F7000              A  3343    	PUSH	#0
000FCA D6 0397             A  3344    	CALL	_SendSPI
000FCD 50E0                A  3345    	POP	R0
000FCF 50E0                A  3346    	POP	R0
                           A  3347    ;  627			}
000FD1                     A  3348    _13_L_143:
                           A  3349    .line 627
                           A  3350    ;  628			if (PacketCommand == 0x0932) //
                           A  3351    .line 628
000FD1 A9320A13            A  3352    	CPX	_PacketCommand+1,#50
000FD5 1FA9090A 12         A  3353    	CPCX	_PacketCommand,#9
000FDA EB 41               A  3354    	JR	NE,_13_L_145
                           A  3355    ;  629			{
                           A  3356    ;  630				SPITxBuffer[0] = 0xC2;
                           A  3357    .line 630
000FDC E9C20400            A  3358    	LDX	_SPITxBuffer,#194
                           A  3359    ;  631				SPITxBuffer[1] = GetPacketD
                           A  3360    .line 631
000FE0 1F7000              A  3361    	PUSH	#0
000FE3 1F7000              A  3362    	PUSH	#0
000FE6 D6 015E             A  3363    	CALL	_GetPacketData
000FE9 50E1                A  3364    	POP	R1
000FEB 50E1                A  3365    	POP	R1
000FED 940401              A  3366    	LDX	_SPITxBuffer+1,R0
                           A  3367    ;  632				SPITxBuffer[2] = GetPacketD
                           A  3368    .line 632
000FF0 1F7001              A  3369    	PUSH	#1
000FF3 1F7000              A  3370    	PUSH	#0
000FF6 D6 015E             A  3371    	CALL	_GetPacketData
000FF9 50E1                A  3372    	POP	R1
000FFB 50E1                A  3373    	POP	R1
000FFD 940402              A  3374    	LDX	_SPITxBuffer+2,R0
                           A  3375    ;  633				SPITxBuffer[3] = GetPacketD
                           A  3376    .line 633
001000 1F7002              A  3377    	PUSH	#2
001003 1F7000              A  3378    	PUSH	#0
001006 D6 015E             A  3379    	CALL	_GetPacketData
001009 50E1                A  3380    	POP	R1
Zilog Z8 Encore! Macro Assembler Version 2.52 (11010702) 19-Oct-14     17:25:54     page:  66


PC     Object              I  Line    Source interface.src
00100B 50E1                A  3381    	POP	R1
00100D 940403              A  3382    	LDX	_SPITxBuffer+3,R0
                           A  3383    ;  634				SendSPI (4);
                           A  3384    .line 634
001010 1F7004              A  3385    	PUSH	#4
001013 1F7000              A  3386    	PUSH	#0
001016 D6 0397             A  3387    	CALL	_SendSPI
001019 50E0                A  3388    	POP	R0
00101B 50E0                A  3389    	POP	R0
                           A  3390    ;  635			}
00101D                     A  3391    _13_L_145:
                           A  3392    .line 635
                           A  3393    ;  636			if (PacketCommand == 0x0933) //
                           A  3394    .line 636
00101D A9330A13            A  3395    	CPX	_PacketCommand+1,#51
001021 1FA9090A 12         A  3396    	CPCX	_PacketCommand,#9
001026 EB 29               A  3397    	JR	NE,_13_L_147
                           A  3398    ;  637			{
                           A  3399    ;  638				SPITxBuffer[0] = 0xAC;
                           A  3400    .line 638
001028 E9AC0400            A  3401    	LDX	_SPITxBuffer,#172
                           A  3402    ;  639				SPITxBuffer[1] = 0xE0;
                           A  3403    .line 639
00102C E9E00401            A  3404    	LDX	_SPITxBuffer+1,#224
                           A  3405    ;  640				SPITxBuffer[2] = 0x00;
                           A  3406    .line 640
001030 E9000402            A  3407    	LDX	_SPITxBuffer+2,#-0
                           A  3408    ;  641				SPITxBuffer[3] = GetPacketD
                           A  3409    .line 641
001034 1F7000              A  3410    	PUSH	#0
001037 1F7000              A  3411    	PUSH	#0
00103A D6 015E             A  3412    	CALL	_GetPacketData
00103D 50E1                A  3413    	POP	R1
00103F 50E1                A  3414    	POP	R1
001041 940403              A  3415    	LDX	_SPITxBuffer+3,R0
                           A  3416    ;  642				SendSPI (4);
                           A  3417    .line 642
001044 1F7004              A  3418    	PUSH	#4
001047 1F7000              A  3419    	PUSH	#0
00104A D6 0397             A  3420    	CALL	_SendSPI
00104D 50E0                A  3421    	POP	R0
00104F 50E0                A  3422    	POP	R0
                           A  3423    ;  643			}		
001051                     A  3424    _13_L_147:
                           A  3425    .line 643
                           A  3426    ;  644			if (PacketCommand == 0x0934) //
                           A  3427    .line 644
001051 A9340A13            A  3428    	CPX	_PacketCommand+1,#52
001055 1FA9090A 12         A  3429    	CPCX	_PacketCommand,#9
00105A EB 29               A  3430    	JR	NE,_13_L_149
                           A  3431    ;  645			{
                           A  3432    ;  646				SPITxBuffer[0] = 0xAC;
Zilog Z8 Encore! Macro Assembler Version 2.52 (11010702) 19-Oct-14     17:25:54     page:  67


PC     Object              I  Line    Source interface.src
                           A  3433    .line 646
00105C E9AC0400            A  3434    	LDX	_SPITxBuffer,#172
                           A  3435    ;  647				SPITxBuffer[1] = 0xA0;
                           A  3436    .line 647
001060 E9A00401            A  3437    	LDX	_SPITxBuffer+1,#160
                           A  3438    ;  648				SPITxBuffer[2] = 0x00;
                           A  3439    .line 648
001064 E9000402            A  3440    	LDX	_SPITxBuffer+2,#-0
                           A  3441    ;  649				SPITxBuffer[3] = GetPacketD
                           A  3442    .line 649
001068 1F7000              A  3443    	PUSH	#0
00106B 1F7000              A  3444    	PUSH	#0
00106E D6 015E             A  3445    	CALL	_GetPacketData
001071 50E1                A  3446    	POP	R1
001073 50E1                A  3447    	POP	R1
001075 940403              A  3448    	LDX	_SPITxBuffer+3,R0
                           A  3449    ;  650				SendSPI (4);
                           A  3450    .line 650
001078 1F7004              A  3451    	PUSH	#4
00107B 1F7000              A  3452    	PUSH	#0
00107E D6 0397             A  3453    	CALL	_SendSPI
001081 50E0                A  3454    	POP	R0
001083 50E0                A  3455    	POP	R0
                           A  3456    ;  651			}		
001085                     A  3457    _13_L_149:
                           A  3458    .line 651
                           A  3459    ;  652			if (PacketCommand == 0x0935) //
                           A  3460    .line 652
001085 A9350A13            A  3461    	CPX	_PacketCommand+1,#53
001089 1FA9090A 12         A  3462    	CPCX	_PacketCommand,#9
00108E EB 29               A  3463    	JR	NE,_13_L_151
                           A  3464    ;  653			{
                           A  3465    ;  654				SPITxBuffer[0] = 0xAC;
                           A  3466    .line 654
001090 E9AC0400            A  3467    	LDX	_SPITxBuffer,#172
                           A  3468    ;  655				SPITxBuffer[1] = 0xA8;
                           A  3469    .line 655
001094 E9A80401            A  3470    	LDX	_SPITxBuffer+1,#168
                           A  3471    ;  656				SPITxBuffer[2] = 0x00;
                           A  3472    .line 656
001098 E9000402            A  3473    	LDX	_SPITxBuffer+2,#-0
                           A  3474    ;  657				SPITxBuffer[3] = GetPacketD
                           A  3475    .line 657
00109C 1F7000              A  3476    	PUSH	#0
00109F 1F7000              A  3477    	PUSH	#0
0010A2 D6 015E             A  3478    	CALL	_GetPacketData
0010A5 50E1                A  3479    	POP	R1
0010A7 50E1                A  3480    	POP	R1
0010A9 940403              A  3481    	LDX	_SPITxBuffer+3,R0
                           A  3482    ;  658				SendSPI (4);
                           A  3483    .line 658
0010AC 1F7004              A  3484    	PUSH	#4
Zilog Z8 Encore! Macro Assembler Version 2.52 (11010702) 19-Oct-14     17:25:54     page:  68


PC     Object              I  Line    Source interface.src
0010AF 1F7000              A  3485    	PUSH	#0
0010B2 D6 0397             A  3486    	CALL	_SendSPI
0010B5 50E0                A  3487    	POP	R0
0010B7 50E0                A  3488    	POP	R0
                           A  3489    ;  659			}		
0010B9                     A  3490    _13_L_151:
                           A  3491    .line 659
                           A  3492    ;  660			if (PacketCommand == 0x0936) //
                           A  3493    .line 660
0010B9 A9360A13            A  3494    	CPX	_PacketCommand+1,#54
0010BD 1FA9090A 12         A  3495    	CPCX	_PacketCommand,#9
0010C2 EB 29               A  3496    	JR	NE,_13_L_161
                           A  3497    ;  661			{
                           A  3498    ;  662				SPITxBuffer[0] = 0xAC;
                           A  3499    .line 662
0010C4 E9AC0400            A  3500    	LDX	_SPITxBuffer,#172
                           A  3501    ;  663				SPITxBuffer[1] = 0xA4;
                           A  3502    .line 663
0010C8 E9A40401            A  3503    	LDX	_SPITxBuffer+1,#164
                           A  3504    ;  664				SPITxBuffer[2] = 0x00;
                           A  3505    .line 664
0010CC E9000402            A  3506    	LDX	_SPITxBuffer+2,#-0
                           A  3507    ;  665				SPITxBuffer[3] = GetPacketD
                           A  3508    .line 665
0010D0 1F7000              A  3509    	PUSH	#0
0010D3 1F7000              A  3510    	PUSH	#0
0010D6 D6 015E             A  3511    	CALL	_GetPacketData
0010D9 50E1                A  3512    	POP	R1
0010DB 50E1                A  3513    	POP	R1
0010DD 940403              A  3514    	LDX	_SPITxBuffer+3,R0
                           A  3515    ;  666				SendSPI (4);
                           A  3516    .line 666
0010E0 1F7004              A  3517    	PUSH	#4
0010E3 1F7000              A  3518    	PUSH	#0
0010E6 D6 0397             A  3519    	CALL	_SendSPI
0010E9 50E0                A  3520    	POP	R0
0010EB 50E0                A  3521    	POP	R0
                           A  3522    ;  667			}
0010ED                     A  3523    _13_L_161:
                           A  3524    .line 667
                           A  3525    ;  668	
                           A  3526    ;  669			///////////////////////////////
                           A  3527    ;  670			//		CC 2540 Commands
                           A  3528    ;  671			///////////////////////////////
                           A  3529    ;  672	
                           A  3530    ;  673			if ((PacketCommand >= 0x3000) &
                           A  3531    .line 673
0010ED A9000A13            A  3532    	CPX	_PacketCommand+1,#-0
0010F1 1FA9300A 12         A  3533    	CPCX	_PacketCommand,#48
0010F6 7B 6A               A  3534    	JR	C,_13_L_169
0010F8 A9F00A13            A  3535    	CPX	_PacketCommand+1,#240
0010FC 1FA93F0A 12         A  3536    	CPCX	_PacketCommand,#63
Zilog Z8 Encore! Macro Assembler Version 2.52 (11010702) 19-Oct-14     17:25:54     page:  69


PC     Object              I  Line    Source interface.src
001101 FB 5F               A  3537    	JR	NC,_13_L_169
001103 A9FF0A13            A  3538    	CPX	_PacketCommand+1,#255
001107 1FA93E0A 12         A  3539    	CPCX	_PacketCommand,#62
00110C EB 0F               A  3540    	JR	NE,_13_L_155
00110E 8B 52               A  3541    	JR	_13_L_169
                           A  3542    ;  674			{
                           A  3543    ;  675				for (Temp1 = 0; Temp1 < Pac
001110                     A  3544    _13_L_156:
                           A  3545    .line 675
001110 A8 A11A17           A  3546    	CPX	_Temp1+1,_PacketLength+1
001114 1FA8 A10A16         A  3547    	CPCX	_Temp1,_PacketLength
001119 7B 0C               A  3548    	JR	C,_13_L_158
00111B 8B 38               A  3549    	JR	_13_L_159
00111D                     A  3550    _13_L_155:
00111D E9000A16            A  3551    	LDX	_Temp1,#-0
001121 E9000A17            A  3552    	LDX	_Temp1+1,#-0
001125 8B E9               A  3553    	JR	_13_L_156
001127                     A  3554    _13_L_158:
                           A  3555    ;  676				{
                           A  3556    ;  677					SPITxBuffer[Temp1] = Ge
                           A  3557    .line 677
001127 C8 A170             A  3558    	PUSHX	_Temp1+1
00112A C8 A160             A  3559    	PUSHX	_Temp1
00112D D6 01B7             A  3560    	CALL	_GetHeaderData
001130 50E1                A  3561    	POP	R1
001132 50E1                A  3562    	POP	R1
001134 841A16              A  3563    	LDX	R1,_Temp1
001137 844A17              A  3564    	LDX	R4,_Temp1+1
00113A 2C 04               A  3565    	LD	R2,#high(_SPITxBuffer)
00113C 3C 00               A  3566    	LD	R3,#low(_SPITxBuffer)
00113E 0234                A  3567    	ADD	R3,R4
001140 1221                A  3568    	ADC	R2,R1
001142 96E0E2              A  3569    	LDX	@RR2,R0
                           A  3570    .line 675
001145 840A16              A  3571    	LDX	R0,_Temp1
001148 840A17              A  3572    	LDX	R0,_Temp1+1
00114B 09010A17            A  3573    	ADDX	_Temp1+1,#1
00114F 19000A16            A  3574    	ADCX	_Temp1,#-0
                           A  3575    ;  678				}
                           A  3576    .line 678
001153 8B BB               A  3577    	JR	_13_L_156
001155                     A  3578    _13_L_159:
                           A  3579    ;  679				SendSPI (PacketLength);
                           A  3580    .line 679
001155 C8 A110             A  3581    	PUSHX	_PacketLength+1
001158 C8 A100             A  3582    	PUSHX	_PacketLength
00115B D6 0397             A  3583    	CALL	_SendSPI
00115E 50E0                A  3584    	POP	R0
001160 50E0                A  3585    	POP	R0
                           A  3586    ;  680			}
001162                     A  3587    _13_L_169:
                           A  3588    .line 680
Zilog Z8 Encore! Macro Assembler Version 2.52 (11010702) 19-Oct-14     17:25:54     page:  70


PC     Object              I  Line    Source interface.src
                           A  3589    ;  681			
                           A  3590    ;  682			if (PacketCommand == 0x3EFF) //
                           A  3591    .line 682
001162 A9FF0A13            A  3592    	CPX	_PacketCommand+1,#255
001166 1FA93E0A 12         A  3593    	CPCX	_PacketCommand,#62
00116B ED 12 45            A  3594    	JR	NE,_13_L_177
                           A  3595    ;  683			{
                           A  3596    ;  684				unsigned short spilength = 
                           A  3597    .line 684
00116E 1F7001              A  3598    	PUSH	#1
001171 1F7000              A  3599    	PUSH	#0
001174 D6 015E             A  3600    	CALL	_GetPacketData
001177 50E1                A  3601    	POP	R1
001179 50E1                A  3602    	POP	R1
00117B 1F7000              A  3603    	PUSH	#0
00117E 1F7000              A  3604    	PUSH	#0
001181 E4E0E3              A  3605    	LD	R3,R0
001184 B0E1                A  3606    	CLR	R1
001186 89E1D9              A  3607    	LDX	-39(RR14),R1
001189 89E3DB              A  3608    	LDX	-37(RR14),R3
00118C D6 015E             A  3609    	CALL	_GetPacketData
00118F 883EDB              A  3610    	LDX	R3,-37(RR14)
001192 881ED9              A  3611    	LDX	R1,-39(RR14)
001195 50E2                A  3612    	POP	R2
001197 50E2                A  3613    	POP	R2
001199 4210                A  3614    	OR	R1,R0
00119B 89E3DC              A  3615    	LDX	-36(RR14),R3
00119E 89E1DD              A  3616    	LDX	-35(RR14),R1
                           A  3617    ;  685				SPITxBuffer[0] = spilength 
                           A  3618    .line 685
0011A1 880EDD              A  3619    	LDX	R0,-35(RR14)
0011A4 940400              A  3620    	LDX	_SPITxBuffer,R0
                           A  3621    ;  686				SPITxBuffer[1] = spilength 
                           A  3622    .line 686
0011A7 880EDC              A  3623    	LDX	R0,-36(RR14)
0011AA 940401              A  3624    	LDX	_SPITxBuffer+1,R0
                           A  3625    ;  687				SPITxBuffer[2] = 0xFF;
                           A  3626    .line 687
0011AD E9FF0402            A  3627    	LDX	_SPITxBuffer+2,#255
                           A  3628    ;  688				SPITxBuffer[3] = 0x3E;
                           A  3629    .line 688
0011B1 E93E0403            A  3630    	LDX	_SPITxBuffer+3,#62
                           A  3631    ;  689				SendSPI (spilength);
                           A  3632    .line 689
0011B5 880EDC              A  3633    	LDX	R0,-36(RR14)
0011B8 881EDD              A  3634    	LDX	R1,-35(RR14)
0011BB 70E1                A  3635    	PUSH	R1
0011BD 70E0                A  3636    	PUSH	R0
0011BF D6 0397             A  3637    	CALL	_SendSPI
0011C2 50E0                A  3638    	POP	R0
0011C4 50E0                A  3639    	POP	R0
0011C6 8B 13               A  3640    	JR	_13_L_163
Zilog Z8 Encore! Macro Assembler Version 2.52 (11010702) 19-Oct-14     17:25:54     page:  71


PC     Object              I  Line    Source interface.src
                           A  3641    ;  690				
                           A  3642    ;  691				for (Temp1=0;Temp1<spilengt
0011C8                     A  3643    _13_L_164:
                           A  3644    .line 691
0011C8 880EDC              A  3645    	LDX	R0,-36(RR14)
0011CB 881EDD              A  3646    	LDX	R1,-35(RR14)
0011CE A8 A17EE1           A  3647    	CPX	R1,_Temp1+1
0011D2 1FA8 A16EE0         A  3648    	CPCX	R0,_Temp1
0011D7 BB 0C               A  3649    	JR	UGT,_13_L_166
0011D9 8B 42               A  3650    	JR	_13_L_167
0011DB                     A  3651    _13_L_163:
0011DB E9000A16            A  3652    	LDX	_Temp1,#-0
0011DF E9000A17            A  3653    	LDX	_Temp1+1,#-0
0011E3 8B E3               A  3654    	JR	_13_L_164
0011E5                     A  3655    _13_L_166:
                           A  3656    ;  692				{
                           A  3657    ;  693					SPIBuffer[Temp1] = SPIR
                           A  3658    .line 693
0011E5 841A16              A  3659    	LDX	R1,_Temp1
0011E8 840A17              A  3660    	LDX	R0,_Temp1+1
0011EB 06E004              A  3661    	ADD	R0,#4
0011EE 16E100              A  3662    	ADC	R1,#0
0011F1 2C 06               A  3663    	LD	R2,#high(_SPIRxBuffer)
0011F3 3C 00               A  3664    	LD	R3,#low(_SPIRxBuffer)
0011F5 0230                A  3665    	ADD	R3,R0
0011F7 1221                A  3666    	ADC	R2,R1
0011F9 840A16              A  3667    	LDX	R0,_Temp1
0011FC 841A17              A  3668    	LDX	R1,_Temp1+1
0011FF 4C 08               A  3669    	LD	R4,#high(_SPIBuffer)
001201 5C 00               A  3670    	LD	R5,#low(_SPIBuffer)
001203 0251                A  3671    	ADD	R5,R1
001205 1240                A  3672    	ADC	R4,R0
001207 86E2E0              A  3673    	LDX	R0,@RR2
00120A 96E0E4              A  3674    	LDX	@RR4,R0
                           A  3675    .line 691
00120D 840A16              A  3676    	LDX	R0,_Temp1
001210 840A17              A  3677    	LDX	R0,_Temp1+1
001213 09010A17            A  3678    	ADDX	_Temp1+1,#1
001217 19000A16            A  3679    	ADCX	_Temp1,#-0
                           A  3680    ;  694				}
                           A  3681    .line 694
00121B 8B AB               A  3682    	JR	_13_L_164
00121D                     A  3683    _13_L_167:
                           A  3684    ;  695				
                           A  3685    ;  696	 			SendPacket (PacketCommand, 
                           A  3686    .line 696
00121D 881EDC              A  3687    	LDX	R1,-36(RR14)
001220 880EDD              A  3688    	LDX	R0,-35(RR14)
001223 26E004              A  3689    	SUB	R0,#4
001226 36E100              A  3690    	SBC	R1,#0
001229 70E0                A  3691    	PUSH	R0
00122B 70E1                A  3692    	PUSH	R1
Zilog Z8 Encore! Macro Assembler Version 2.52 (11010702) 19-Oct-14     17:25:54     page:  72


PC     Object              I  Line    Source interface.src
00122D 1F70 00             A  3693    	PUSH	#low(_SPIBuffer)
001230 1F70 08             A  3694    	PUSH	#high(_SPIBuffer)
001233 C8 A130             A  3695    	PUSHX	_PacketCommand+1
001236 C8 A120             A  3696    	PUSHX	_PacketCommand
001239 D6 0208             A  3697    	CALL	_SendPacket
00123C 2F                  A  3698    	ATM	
00123D 09060FFF            A  3699    	ADDX	4095,#6
001241 19000FFE            A  3700    	ADCX	4094,#-0
                           A  3701    ;  697			}
001245                     A  3702    _13_L_177:
                           A  3703    .line 697
                           A  3704    ;  698			
                           A  3705    ;  699			if (PacketCommand == 0x3FFE) //
                           A  3706    .line 699
001245 A9FE0A13            A  3707    	CPX	_PacketCommand+1,#254
001249 1FA93F0A 12         A  3708    	CPCX	_PacketCommand,#63
00124E ED 12 ED            A  3709    	JR	NE,_13_L_185
                           A  3710    ;  700			{
                           A  3711    ;  701				SPITxBuffer[0] = 0x08;
                           A  3712    .line 701
001251 E9080400            A  3713    	LDX	_SPITxBuffer,#8
                           A  3714    ;  702				SPITxBuffer[1] = 0x00;
                           A  3715    .line 702
001255 E9000401            A  3716    	LDX	_SPITxBuffer+1,#-0
                           A  3717    ;  703				SPITxBuffer[2] = 0xFE;
                           A  3718    .line 703
001259 E9FE0402            A  3719    	LDX	_SPITxBuffer+2,#254
                           A  3720    ;  704				SPITxBuffer[3] = 0x3F;
                           A  3721    .line 704
00125D E93F0403            A  3722    	LDX	_SPITxBuffer+3,#63
                           A  3723    ;  705				SPITxBuffer[4] = 0x00;
                           A  3724    .line 705
001261 E9000404            A  3725    	LDX	_SPITxBuffer+4,#-0
                           A  3726    ;  706				SPITxBuffer[5] = 0x00;
                           A  3727    .line 706
001265 E9000405            A  3728    	LDX	_SPITxBuffer+5,#-0
                           A  3729    ;  707				SPITxBuffer[6] = 0x00;
                           A  3730    .line 707
001269 E9000406            A  3731    	LDX	_SPITxBuffer+6,#-0
                           A  3732    ;  708				SPITxBuffer[7] = 0x00;
                           A  3733    .line 708
00126D E9000407            A  3734    	LDX	_SPITxBuffer+7,#-0
                           A  3735    ;  709				SendSPI (8);
                           A  3736    .line 709
001271 1F7008              A  3737    	PUSH	#8
001274 1F7000              A  3738    	PUSH	#0
001277 D6 0397             A  3739    	CALL	_SendSPI
00127A 50E0                A  3740    	POP	R0
00127C 50E0                A  3741    	POP	R0
00127E 8B 0D               A  3742    	JR	_13_L_171
                           A  3743    ;  710				
                           A  3744    ;  711				for (Temp1=0;Temp1<4;Temp1+
Zilog Z8 Encore! Macro Assembler Version 2.52 (11010702) 19-Oct-14     17:25:54     page:  73


PC     Object              I  Line    Source interface.src
001280                     A  3745    _13_L_172:
                           A  3746    .line 711
001280 A9040A17            A  3747    	CPX	_Temp1+1,#4
001284 1FA9000A 16         A  3748    	CPCX	_Temp1,#0
001289 7B 0C               A  3749    	JR	C,_13_L_174
00128B 8B 42               A  3750    	JR	_13_L_175
00128D                     A  3751    _13_L_171:
00128D E9000A16            A  3752    	LDX	_Temp1,#-0
001291 E9000A17            A  3753    	LDX	_Temp1+1,#-0
001295 8B E9               A  3754    	JR	_13_L_172
001297                     A  3755    _13_L_174:
                           A  3756    ;  712				{
                           A  3757    ;  713					SPIBuffer[Temp1] = SPIR
                           A  3758    .line 713
001297 841A16              A  3759    	LDX	R1,_Temp1
00129A 840A17              A  3760    	LDX	R0,_Temp1+1
00129D 06E004              A  3761    	ADD	R0,#4
0012A0 16E100              A  3762    	ADC	R1,#0
0012A3 2C 06               A  3763    	LD	R2,#high(_SPIRxBuffer)
0012A5 3C 00               A  3764    	LD	R3,#low(_SPIRxBuffer)
0012A7 0230                A  3765    	ADD	R3,R0
0012A9 1221                A  3766    	ADC	R2,R1
0012AB 840A16              A  3767    	LDX	R0,_Temp1
0012AE 841A17              A  3768    	LDX	R1,_Temp1+1
0012B1 4C 08               A  3769    	LD	R4,#high(_SPIBuffer)
0012B3 5C 00               A  3770    	LD	R5,#low(_SPIBuffer)
0012B5 0251                A  3771    	ADD	R5,R1
0012B7 1240                A  3772    	ADC	R4,R0
0012B9 86E2E0              A  3773    	LDX	R0,@RR2
0012BC 96E0E4              A  3774    	LDX	@RR4,R0
                           A  3775    .line 711
0012BF 840A16              A  3776    	LDX	R0,_Temp1
0012C2 840A17              A  3777    	LDX	R0,_Temp1+1
0012C5 09010A17            A  3778    	ADDX	_Temp1+1,#1
0012C9 19000A16            A  3779    	ADCX	_Temp1,#-0
                           A  3780    ;  714				}
                           A  3781    .line 714
0012CD 8B B1               A  3782    	JR	_13_L_172
0012CF                     A  3783    _13_L_175:
                           A  3784    ;  715				
                           A  3785    ;  716				SendPacket (PacketCommand, 
                           A  3786    .line 716
0012CF 1F7004              A  3787    	PUSH	#4
0012D2 1F7000              A  3788    	PUSH	#0
0012D5 1F70 00             A  3789    	PUSH	#low(_SPIBuffer)
0012D8 1F70 08             A  3790    	PUSH	#high(_SPIBuffer)
0012DB C8 A130             A  3791    	PUSHX	_PacketCommand+1
0012DE C8 A120             A  3792    	PUSHX	_PacketCommand
0012E1 D6 0208             A  3793    	CALL	_SendPacket
0012E4 2F                  A  3794    	ATM	
0012E5 09060FFF            A  3795    	ADDX	4095,#6
0012E9 19000FFE            A  3796    	ADCX	4094,#-0
Zilog Z8 Encore! Macro Assembler Version 2.52 (11010702) 19-Oct-14     17:25:54     page:  74


PC     Object              I  Line    Source interface.src
                           A  3797    ;  717			}
0012ED                     A  3798    _13_L_185:
                           A  3799    .line 717
                           A  3800    ;  718			
                           A  3801    ;  719			if (PacketCommand == 0x3FFF) //
                           A  3802    .line 719
0012ED A9FF0A13            A  3803    	CPX	_PacketCommand+1,#255
0012F1 1FA93F0A 12         A  3804    	CPCX	_PacketCommand,#63
0012F6 ED 13 A5            A  3805    	JR	NE,_13_L_187
                           A  3806    ;  720			{
                           A  3807    ;  721				SPITxBuffer[0] = 0x0C;
                           A  3808    .line 721
0012F9 E90C0400            A  3809    	LDX	_SPITxBuffer,#12
                           A  3810    ;  722				SPITxBuffer[1] = 0x00;
                           A  3811    .line 722
0012FD E9000401            A  3812    	LDX	_SPITxBuffer+1,#-0
                           A  3813    ;  723				SPITxBuffer[2] = 0xFF;
                           A  3814    .line 723
001301 E9FF0402            A  3815    	LDX	_SPITxBuffer+2,#255
                           A  3816    ;  724				SPITxBuffer[3] = 0x3F;
                           A  3817    .line 724
001305 E93F0403            A  3818    	LDX	_SPITxBuffer+3,#63
                           A  3819    ;  725				SPITxBuffer[4] = 0x00;
                           A  3820    .line 725
001309 E9000404            A  3821    	LDX	_SPITxBuffer+4,#-0
                           A  3822    ;  726				SPITxBuffer[5] = 0x00;
                           A  3823    .line 726
00130D E9000405            A  3824    	LDX	_SPITxBuffer+5,#-0
                           A  3825    ;  727				SPITxBuffer[6] = 0x00;
                           A  3826    .line 727
001311 E9000406            A  3827    	LDX	_SPITxBuffer+6,#-0
                           A  3828    ;  728				SPITxBuffer[7] = 0x00;
                           A  3829    .line 728
001315 E9000407            A  3830    	LDX	_SPITxBuffer+7,#-0
                           A  3831    ;  729				SPITxBuffer[8] = 0x00;
                           A  3832    .line 729
001319 E9000408            A  3833    	LDX	_SPITxBuffer+8,#-0
                           A  3834    ;  730				SPITxBuffer[9] = 0x00;
                           A  3835    .line 730
00131D E9000409            A  3836    	LDX	_SPITxBuffer+9,#-0
                           A  3837    ;  731				SPITxBuffer[10] = 0x00;
                           A  3838    .line 731
001321 E900040A            A  3839    	LDX	_SPITxBuffer+10,#-0
                           A  3840    ;  732				SPITxBuffer[11] = 0x00;
                           A  3841    .line 732
001325 E900040B            A  3842    	LDX	_SPITxBuffer+11,#-0
                           A  3843    ;  733				SendSPI (0xC);
                           A  3844    .line 733
001329 1F700C              A  3845    	PUSH	#12
00132C 1F7000              A  3846    	PUSH	#0
00132F D6 0397             A  3847    	CALL	_SendSPI
001332 50E0                A  3848    	POP	R0
Zilog Z8 Encore! Macro Assembler Version 2.52 (11010702) 19-Oct-14     17:25:54     page:  75


PC     Object              I  Line    Source interface.src
001334 50E0                A  3849    	POP	R0
001336 8B 0D               A  3850    	JR	_13_L_179
                           A  3851    ;  734				
                           A  3852    ;  735				for (Temp1=0;Temp1<8;Temp1+
001338                     A  3853    _13_L_180:
                           A  3854    .line 735
001338 A9080A17            A  3855    	CPX	_Temp1+1,#8
00133C 1FA9000A 16         A  3856    	CPCX	_Temp1,#0
001341 7B 0C               A  3857    	JR	C,_13_L_182
001343 8B 42               A  3858    	JR	_13_L_183
001345                     A  3859    _13_L_179:
001345 E9000A16            A  3860    	LDX	_Temp1,#-0
001349 E9000A17            A  3861    	LDX	_Temp1+1,#-0
00134D 8B E9               A  3862    	JR	_13_L_180
00134F                     A  3863    _13_L_182:
                           A  3864    ;  736				{
                           A  3865    ;  737					SPIBuffer[Temp1] = SPIR
                           A  3866    .line 737
00134F 841A16              A  3867    	LDX	R1,_Temp1
001352 840A17              A  3868    	LDX	R0,_Temp1+1
001355 06E004              A  3869    	ADD	R0,#4
001358 16E100              A  3870    	ADC	R1,#0
00135B 2C 06               A  3871    	LD	R2,#high(_SPIRxBuffer)
00135D 3C 00               A  3872    	LD	R3,#low(_SPIRxBuffer)
00135F 0230                A  3873    	ADD	R3,R0
001361 1221                A  3874    	ADC	R2,R1
001363 840A16              A  3875    	LDX	R0,_Temp1
001366 841A17              A  3876    	LDX	R1,_Temp1+1
001369 4C 08               A  3877    	LD	R4,#high(_SPIBuffer)
00136B 5C 00               A  3878    	LD	R5,#low(_SPIBuffer)
00136D 0251                A  3879    	ADD	R5,R1
00136F 1240                A  3880    	ADC	R4,R0
001371 86E2E0              A  3881    	LDX	R0,@RR2
001374 96E0E4              A  3882    	LDX	@RR4,R0
                           A  3883    .line 735
001377 840A16              A  3884    	LDX	R0,_Temp1
00137A 840A17              A  3885    	LDX	R0,_Temp1+1
00137D 09010A17            A  3886    	ADDX	_Temp1+1,#1
001381 19000A16            A  3887    	ADCX	_Temp1,#-0
                           A  3888    ;  738				}
                           A  3889    .line 738
001385 8B B1               A  3890    	JR	_13_L_180
001387                     A  3891    _13_L_183:
                           A  3892    ;  739				
                           A  3893    ;  740				SendPacket (PacketCommand, 
                           A  3894    .line 740
001387 1F7008              A  3895    	PUSH	#8
00138A 1F7000              A  3896    	PUSH	#0
00138D 1F70 00             A  3897    	PUSH	#low(_SPIBuffer)
001390 1F70 08             A  3898    	PUSH	#high(_SPIBuffer)
001393 C8 A130             A  3899    	PUSHX	_PacketCommand+1
001396 C8 A120             A  3900    	PUSHX	_PacketCommand
Zilog Z8 Encore! Macro Assembler Version 2.52 (11010702) 19-Oct-14     17:25:54     page:  76


PC     Object              I  Line    Source interface.src
001399 D6 0208             A  3901    	CALL	_SendPacket
00139C 2F                  A  3902    	ATM	
00139D 09060FFF            A  3903    	ADDX	4095,#6
0013A1 19000FFE            A  3904    	ADCX	4094,#-0
                           A  3905    ;  741			}
0013A5                     A  3906    _13_L_187:
                           A  3907    .line 741
                           A  3908    ;  742			
                           A  3909    ;  743			///////////////////////////////
                           A  3910    ;  744			//		ATMega Control
                           A  3911    ;  745			///////////////////////////////
                           A  3912    ;  746	
                           A  3913    ;  747			if (PacketCommand == 0x4000) //
                           A  3914    .line 747
0013A5 A9000A13            A  3915    	CPX	_PacketCommand+1,#-0
0013A9 1FA9400A 12         A  3916    	CPCX	_PacketCommand,#64
0013AE EB 04               A  3917    	JR	NE,_13_L_189
                           A  3918    ;  748			{
                           A  3919    ;  749				PAOUT &= 0xFE;
                           A  3920    .line 749
0013B0 59FE0FD3            A  3921    	ANDX	4051,#254
                           A  3922    ;  750			}
0013B4                     A  3923    _13_L_189:
                           A  3924    .line 750
                           A  3925    ;  751			if (PacketCommand == 0x4001) //
                           A  3926    .line 751
0013B4 A9010A13            A  3927    	CPX	_PacketCommand+1,#1
0013B8 1FA9400A 12         A  3928    	CPCX	_PacketCommand,#64
0013BD EB 04               A  3929    	JR	NE,_13_L_197
                           A  3930    ;  752			{
                           A  3931    ;  753				PAOUT |= 0x01;
                           A  3932    .line 753
0013BF 49010FD3            A  3933    	ORX	4051,#1
                           A  3934    ;  754			}
0013C3                     A  3935    _13_L_197:
                           A  3936    .line 754
                           A  3937    ;  755			if (PacketCommand == 0x4002) //
                           A  3938    .line 755
0013C3 A9020A13            A  3939    	CPX	_PacketCommand+1,#2
0013C7 1FA9400A 12         A  3940    	CPCX	_PacketCommand,#64
0013CC 6B 1B               A  3941    	JR	Z,_13_L_191
0013CE 8B 68               A  3942    	JR	_13_L_198
                           A  3943    ;  756			{
                           A  3944    ;  757				for (Temp1 = 0; Temp1 < Pac
0013D0                     A  3945    _13_L_192:
                           A  3946    .line 757
0013D0 841A10              A  3947    	LDX	R1,_PacketLength
0013D3 840A11              A  3948    	LDX	R0,_PacketLength+1
0013D6 26E004              A  3949    	SUB	R0,#4
0013D9 36E100              A  3950    	SBC	R1,#0
0013DC A8 A17EE0           A  3951    	CPX	R0,_Temp1+1
0013E0 1FA8 A16EE1         A  3952    	CPCX	R1,_Temp1
Zilog Z8 Encore! Macro Assembler Version 2.52 (11010702) 19-Oct-14     17:25:54     page:  77


PC     Object              I  Line    Source interface.src
0013E5 BB 0C               A  3953    	JR	UGT,_13_L_194
0013E7 8B 38               A  3954    	JR	_13_L_195
0013E9                     A  3955    _13_L_191:
0013E9 E9000A16            A  3956    	LDX	_Temp1,#-0
0013ED E9000A17            A  3957    	LDX	_Temp1+1,#-0
0013F1 8B DD               A  3958    	JR	_13_L_192
0013F3                     A  3959    _13_L_194:
                           A  3960    ;  758				{
                           A  3961    ;  759					SPITxBuffer[Temp1] = Ge
                           A  3962    .line 759
0013F3 C8 A170             A  3963    	PUSHX	_Temp1+1
0013F6 C8 A160             A  3964    	PUSHX	_Temp1
0013F9 D6 015E             A  3965    	CALL	_GetPacketData
0013FC 50E1                A  3966    	POP	R1
0013FE 50E1                A  3967    	POP	R1
001400 841A16              A  3968    	LDX	R1,_Temp1
001403 844A17              A  3969    	LDX	R4,_Temp1+1
001406 2C 04               A  3970    	LD	R2,#high(_SPITxBuffer)
001408 3C 00               A  3971    	LD	R3,#low(_SPITxBuffer)
00140A 0234                A  3972    	ADD	R3,R4
00140C 1221                A  3973    	ADC	R2,R1
00140E 96E0E2              A  3974    	LDX	@RR2,R0
                           A  3975    .line 757
001411 840A16              A  3976    	LDX	R0,_Temp1
001414 840A17              A  3977    	LDX	R0,_Temp1+1
001417 09010A17            A  3978    	ADDX	_Temp1+1,#1
00141B 19000A16            A  3979    	ADCX	_Temp1,#-0
                           A  3980    ;  760				}
                           A  3981    .line 760
00141F 8B AF               A  3982    	JR	_13_L_192
001421                     A  3983    _13_L_195:
                           A  3984    ;  761				SendSPI (PacketLength - 4);
                           A  3985    .line 761
001421 841A10              A  3986    	LDX	R1,_PacketLength
001424 840A11              A  3987    	LDX	R0,_PacketLength+1
001427 26E004              A  3988    	SUB	R0,#4
00142A 36E100              A  3989    	SBC	R1,#0
00142D 70E0                A  3990    	PUSH	R0
00142F 70E1                A  3991    	PUSH	R1
001431 D6 0397             A  3992    	CALL	_SendSPI
001434 50E0                A  3993    	POP	R0
001436 50E0                A  3994    	POP	R0
                           A  3995    ;  762			}
001438                     A  3996    _13_L_198:
                           A  3997    .line 762
                           A  3998    ;  763			
                           A  3999    ;  764			// Update Buffer Pointer positi
                           A  4000    ;  765			
                           A  4001    ;  766			RxBufferPtrCurrent += PacketLen
                           A  4002    .line 766
001438 08 A11A0C           A  4003    	ADDX	_RxBufferPtrCurrent+1,_PacketLength
00143C 18 A10A0B           A  4004    	ADCX	_RxBufferPtrCurrent,_PacketLength
Zilog Z8 Encore! Macro Assembler Version 2.52 (11010702) 19-Oct-14     17:25:54     page:  78


PC     Object              I  Line    Source interface.src
                           A  4005    ;  767			if (RxBufferPtrCurrent >= UART_
                           A  4006    .line 767
001440 A9000A0C            A  4007    	CPX	_RxBufferPtrCurrent+1,#-0
001444 1FA9020A 0B         A  4008    	CPCX	_RxBufferPtrCurrent,#2
001449 7D 04 F9            A  4009    	JR	C,_13_L_200
                           A  4010    ;  768			{
                           A  4011    ;  769				RxBufferPtrCurrent -= UART_
                           A  4012    .line 769
00144C 29000A0C            A  4013    	SUBX	_RxBufferPtrCurrent+1,#-0
001450 39020A0B            A  4014    	SBCX	_RxBufferPtrCurrent,#2
                           A  4015    ;  770				PAOUT ^= 0x04; // Toggle LE
                           A  4016    .line 770
001454 B9040FD3            A  4017    	XORX	4051,#4
                           A  4018    ;  771			}
                           A  4019    ;  772		}
                           A  4020    .line 772
001458 8D 04 F9            A  4021    	JR	_13_L_200
                           A  4022    .line 773
00145B D6 0000             A  4023    	CALL	__b_framereset
00145E AF                  A  4024    	RET	
                           A  4025    .endfunc "main",773,"_main"
000014 00A4                A  4026    	VECTOR	SPI=_spi_interrupt
00000C 0092                A  4027    	VECTOR	TIMER0=_ms_timer_interrupt
00000E 004B                A  4028    	VECTOR	UART0_RX=_uart_rx_interrupt
000010 0000                A  4029    	VECTOR	UART0_TX=_uart_tx_interrupt
                           A  4030    	XREF _memset:ROM
                           A  4031    	XREF _memcpy:ROM
                           A  4032    	XREF _setmodeAltFunc_PortA:ROM
                           A  4033    	XREF _setmodeOutput_PortA:ROM
                           A  4034    	XREF _open_PortA:ROM
                           A  4035    	XREF __b_uwmul:ROM
                           A  4036    	XREF __b_framereset:ROM
                           A  4037    	XREF __b_iframereset:ROM
                           A  4038    	XREF __b_frameset0:ROM
                           A  4039    	XREF __b_frameset00:ROM
                           A  4040    	XREF __b_iframeset00:ROM
                           A  4041    	XDEF _main
                           A  4042    	XDEF _SendSPI
                           A  4043    	XDEF _ReadPacket
                           A  4044    	XDEF _GetLength
                           A  4045    	XDEF _SendPacket
                           A  4046    	XDEF _GetHeaderData
                           A  4047    	XDEF _GetPacketData
                           A  4048    	XDEF _delayMS
                           A  4049    	XDEF _setup_board
                           A  4050    	XDEF _spi_interrupt
                           A  4051    	XDEF _ms_timer_interrupt
                           A  4052    	XDEF _uart_rx_interrupt
                           A  4053    	XDEF _uart_tx_interrupt
                           A  4054    	XDEF _flashid
                           A  4055    	XDEF _Temp2
                           A  4056    	XDEF _Temp1
Zilog Z8 Encore! Macro Assembler Version 2.52 (11010702) 19-Oct-14     17:25:54     page:  79


PC     Object              I  Line    Source interface.src
                           A  4057    	XDEF _PacketCommandTemp
                           A  4058    	XDEF _PacketCommand
                           A  4059    	XDEF _PacketLength
                           A  4060    	XDEF _timer_ms
                           A  4061    	XDEF _timer_ms_real
                           A  4062    	XDEF _RxBufferPtrCurrent
                           A  4063    	XDEF _TxInProgress
                           A  4064    	XDEF _SPITxBufferPtr
                           A  4065    	XDEF _SPIRxBufferPtr
                           A  4066    	XDEF _TxBufferPtrTemp
                           A  4067    	XDEF _TxBufferPtr
                           A  4068    	XDEF _RxBufferPtr
                           A  4069    	XDEF _SPIBuffer
                           A  4070    	XDEF _SPIRxBuffer
                           A  4071    	XDEF _SPITxBuffer
                           A  4072    	XDEF _TxBuffer
                           A  4073    	XDEF _RxBuffer
                           A  4074    	END


Errors: 0
Warnings: 0
Lines Assembled: 4075
