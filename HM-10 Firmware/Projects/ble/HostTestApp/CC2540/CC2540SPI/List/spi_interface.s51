///////////////////////////////////////////////////////////////////////////////
//                                                                            /
// IAR C/C++ Compiler V8.30.1.41636 for 8051            02/Jun/2014  22:57:02 /
// Copyright 2004-2013 IAR Systems AB.                                        /
//                                                                            /
//    Core               =  plain                                             /
//    Code model         =  banked                                            /
//    Data model         =  large                                             /
//    Calling convention =  xdata reentrant                                   /
//    Constant location  =  data_rom                                          /
//    Dptr setup         =  1,16                                              /
//                                                                            /
//    Source file        =  c:\Users\Administrator\Documents\Dropbox\Fish     /
//                          Brain\HM-10 Hack\HM-10 Firmware\Projects\ble\Host /
//                          TestApp\Source\spi_interface.c                    /
//    Command line       =  -f "c:\Users\Administrator\Documents\Dropbox\Fish /
//                           Brain\HM-10 Hack\HM-10                           /
//                          Firmware\Projects\ble\HostTestApp\CC2540\..\..\co /
//                          nfig\buildComponents.cfg"                         /
//                          (-DBROADCASTER_CFG=0x01 -DOBSERVER_CFG=0x02       /
//                          -DPERIPHERAL_CFG=0x04 -DCENTRAL_CFG=0x08          /
//                          -DADV_NCONN_CFG=0x01 -DADV_CONN_CFG=0x02          /
//                          -DSCAN_CFG=0x04 -DINIT_CFG=0x08                   /
//                          -DADV_CFG=ADV_NCONN_CFG+ADV_CONN_CFG              /
//                          -DLINK_CFG=ADV_CONN_CFG+INIT_CFG                  /
//                          -DFULL_CFG=INIT_CFG+SCAN_CFG+ADV_NCONN_CFG+ADV_CO /
//                          NN_CFG) -f "c:\Users\Administrator\Documents\Drop /
//                          box\Fish Brain\HM-10 Hack\HM-10                   /
//                          Firmware\Projects\ble\HostTestApp\CC2540\buildCon /
//                          fig.cfg" (-DHOST_CONFIG=PERIPHERAL_CFG+CENTRAL_CF /
//                          G -DGAP_PRIVACY_RECONNECT)                        /
//                          "c:\Users\Administrator\Documents\Dropbox\Fish    /
//                          Brain\HM-10 Hack\HM-10 Firmware\Projects\ble\Host /
//                          TestApp\Source\spi_interface.c" -D                /
//                          INT_HEAP_LEN=2700 -D HALNODEBUG -D                /
//                          OSAL_CBTIMER_NUM_TASKS=1 -D POWER_SAVING -D       /
//                          HAL_AES_DMA=TRUE -D HAL_DMA=TRUE -D               /
//                          HAL_UART=TRUE -D HAL_UART_DMA=0 -D                /
//                          HAL_UART_ISR=0 -D HAL_UART_SPI=2 -D               /
//                          HAL_SPI_QUEUED_TX=TRUE -D HAL_KEY=FALSE -D        /
//                          HAL_LCD=FALSE -D HAL_LED=FALSE -D                 /
//                          GATT_DB_OFF_CHIP -D GAP_BOND_MGR -lCN             /
//                          "c:\Users\Administrator\Documents\Dropbox\Fish    /
//                          Brain\HM-10 Hack\HM-10 Firmware\Projects\ble\Host /
//                          TestApp\CC2540\CC2540SPI\List\" -lA               /
//                          "c:\Users\Administrator\Documents\Dropbox\Fish    /
//                          Brain\HM-10 Hack\HM-10 Firmware\Projects\ble\Host /
//                          TestApp\CC2540\CC2540SPI\List\" -o                /
//                          "c:\Users\Administrator\Documents\Dropbox\Fish    /
//                          Brain\HM-10 Hack\HM-10 Firmware\Projects\ble\Host /
//                          TestApp\CC2540\CC2540SPI\Obj\" -e --debug         /
//                          --core=plain --dptr=16,1 --data_model=large       /
//                          --code_model=banked --calling_convention=xdata_re /
//                          entrant --place_constants=data_rom                /
//                          --nr_virtual_regs 8 -I "c:\Users\Administrator\Do /
//                          cuments\Dropbox\Fish Brain\HM-10 Hack\HM-10       /
//                          Firmware\Projects\ble\HostTestApp\CC2540\..\..\co /
//                          mmon\" -I "c:\Users\Administrator\Documents\Dropb /
//                          ox\Fish Brain\HM-10 Hack\HM-10                    /
//                          Firmware\Projects\ble\HostTestApp\CC2540\..\..\.. /
//                          \..\Components\hal\include\" -I                   /
//                          "c:\Users\Administrator\Documents\Dropbox\Fish    /
//                          Brain\HM-10 Hack\HM-10 Firmware\Projects\ble\Host /
//                          TestApp\CC2540\..\..\..\..\Components\hal\target\ /
//                          CC2540EB\" -I "c:\Users\Administrator\Documents\D /
//                          ropbox\Fish Brain\HM-10 Hack\HM-10                /
//                          Firmware\Projects\ble\HostTestApp\CC2540\..\..\.. /
//                          \..\Components\osal\include\" -I                  /
//                          "c:\Users\Administrator\Documents\Dropbox\Fish    /
//                          Brain\HM-10 Hack\HM-10 Firmware\Projects\ble\Host /
//                          TestApp\CC2540\..\..\..\..\Components\services\sa /
//                          ddr\" -I "c:\Users\Administrator\Documents\Dropbo /
//                          x\Fish Brain\HM-10 Hack\HM-10                     /
//                          Firmware\Projects\ble\HostTestApp\CC2540\..\..\.. /
//                          \..\Components\ble\include\" -I                   /
//                          "c:\Users\Administrator\Documents\Dropbox\Fish    /
//                          Brain\HM-10 Hack\HM-10 Firmware\Projects\ble\Host /
//                          TestApp\CC2540\..\..\..\..\Components\ble\control /
//                          ler\phy\" -I "c:\Users\Administrator\Documents\Dr /
//                          opbox\Fish Brain\HM-10 Hack\HM-10                 /
//                          Firmware\Projects\ble\HostTestApp\CC2540\..\..\.. /
//                          \..\Components\ble\controller\include\" -I        /
//                          "c:\Users\Administrator\Documents\Dropbox\Fish    /
//                          Brain\HM-10 Hack\HM-10 Firmware\Projects\ble\Host /
//                          TestApp\CC2540\..\..\..\..\Components\ble\hci\"   /
//                          -I "c:\Users\Administrator\Documents\Dropbox\Fish /
//                           Brain\HM-10 Hack\HM-10                           /
//                          Firmware\Projects\ble\HostTestApp\CC2540\..\..\.. /
//                          \..\Components\ble\host\" -I                      /
//                          "c:\Users\Administrator\Documents\Dropbox\Fish    /
//                          Brain\HM-10 Hack\HM-10 Firmware\Projects\ble\Host /
//                          TestApp\CC2540\..\..\common\cc2540\" -I           /
//                          "c:\Users\Administrator\Documents\Dropbox\Fish    /
//                          Brain\HM-10 Hack\HM-10 Firmware\Projects\ble\Host /
//                          TestApp\CC2540\..\..\common\npi\npi_np\" -I       /
//                          "c:\Users\Administrator\Documents\Dropbox\Fish    /
//                          Brain\HM-10 Hack\HM-10 Firmware\Projects\ble\Host /
//                          TestApp\CC2540\..\..\Include\" -I                 /
//                          "c:\Users\Administrator\Documents\Dropbox\Fish    /
//                          Brain\HM-10 Hack\HM-10 Firmware\Projects\ble\Host /
//                          TestApp\CC2540\..\..\Profiles\Roles\" -I          /
//                          "c:\Users\Administrator\Documents\Dropbox\Fish    /
//                          Brain\HM-10 Hack\HM-10 Firmware\Projects\ble\Host /
//                          TestApp\CC2540\..\source\" -Ohz                   /
//    List file          =  c:\Users\Administrator\Documents\Dropbox\Fish     /
//                          Brain\HM-10 Hack\HM-10 Firmware\Projects\ble\Host /
//                          TestApp\CC2540\CC2540SPI\List\spi_interface.s51   /
//                                                                            /
//                                                                            /
///////////////////////////////////////////////////////////////////////////////

        NAME spi_interface

        RTMODEL "__SystemLibrary", "CLib"
        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?V0
        EXTERN ?V1
        EXTERN ?V2
        EXTERN ?V3
        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BDISPATCH
        EXTERN ?BRET
        EXTERN ?DEALLOC_XSTACK8
        EXTERN ?PUSH_XSTACK8_X_TWO
        EXTERN __INIT_XDATA_Z

        PUBLIC ??SPI_Interface_Init?relay
        FUNCTION ??SPI_Interface_Init?relay,0203H
        PUBLIC ??SPI_Interface_ProcessEvent?relay
        FUNCTION ??SPI_Interface_ProcessEvent?relay,0203H
        PUBLIC ??npiCallBack?relay
        FUNCTION ??npiCallBack?relay,0203H
        PUBLIC ??parseCmd?relay
        FUNCTION ??parseCmd?relay,0203H
        PUBLIC ??sendSerialEvt?relay
        FUNCTION ??sendSerialEvt?relay,0203H
        PUBLIC SPI_Interface_Init
        FUNCTION SPI_Interface_Init,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        PUBLIC SPI_Interface_ProcessEvent
        FUNCTION SPI_Interface_ProcessEvent,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        PUBLIC npiCallBack
        FUNCTION npiCallBack,0a1603H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        PUBLIC parseCmd
        FUNCTION parseCmd,0a1203H
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 14, STACK
        PUBLIC pktState
        PUBLIC sendSerialEvt
        FUNCTION sendSerialEvt,0203H
        ARGFRAME XSTACK, 0, STACK
        
          CFI Names cfiNames0
          CFI StackFrame CFA_SP SP IDATA
          CFI StackFrame CFA_PSP16 PSP16 XDATA
          CFI StackFrame CFA_XSP16 XSP16 XDATA
          CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
          CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
          CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
          CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
          CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
          CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
          CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
          CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
          CFI Resource SP:8, PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
          CFI VirtualResource ?RET:24
          CFI Resource ?BRET_EXT:8
          CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
          CFI ResourceParts PSP16 PSPH, PSPL
          CFI ResourceParts XSP16 XSPH, XSPL
          CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
          CFI EndNames cfiNames0
        
          CFI Common cfiCommon0 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign -1
          CFI ReturnAddress ?RET CODE
          CFI CFA_DOVERLAY Used
          CFI CFA_IOVERLAY Used
          CFI CFA_SP SP+-3
          CFI CFA_PSP16 PSP16+0
          CFI CFA_XSP16 XSP16+0
          CFI `PSW.CY` SameValue
          CFI `B.BR0` SameValue
          CFI `B.BR1` SameValue
          CFI `B.BR2` SameValue
          CFI `B.BR3` SameValue
          CFI `B.BR4` SameValue
          CFI `B.BR5` SameValue
          CFI `B.BR6` SameValue
          CFI `B.BR7` SameValue
          CFI `VB.BR8` SameValue
          CFI `VB.BR9` SameValue
          CFI `VB.BR10` SameValue
          CFI `VB.BR11` SameValue
          CFI `VB.BR12` SameValue
          CFI `VB.BR13` SameValue
          CFI `VB.BR14` SameValue
          CFI `VB.BR15` SameValue
          CFI VB SameValue
          CFI B Undefined
          CFI A Undefined
          CFI PSW SameValue
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI R0 Undefined
          CFI R1 Undefined
          CFI R2 Undefined
          CFI R3 Undefined
          CFI R4 Undefined
          CFI R5 Undefined
          CFI R6 SameValue
          CFI R7 SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI V2 SameValue
          CFI V3 SameValue
          CFI V4 SameValue
          CFI V5 SameValue
          CFI V6 SameValue
          CFI V7 SameValue
          CFI PSPH Undefined
          CFI PSPL Undefined
          CFI XSPH Undefined
          CFI XSPL Undefined
          CFI ?RET Concat
          CFI ?BRET_EXT Frame(CFA_SP, 3)
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI EndCommon cfiCommon0
        
NPI_InitTransport   SYMBOL "NPI_InitTransport"
??NPI_InitTransport?relay SYMBOL "?relay", NPI_InitTransport
memcpy              SYMBOL "memcpy"
??memcpy?relay      SYMBOL "?relay", memcpy
osal_mem_alloc      SYMBOL "osal_mem_alloc"
??osal_mem_alloc?relay SYMBOL "?relay", osal_mem_alloc
osal_msg_deallocate SYMBOL "osal_msg_deallocate"
??osal_msg_deallocate?relay SYMBOL "?relay", osal_msg_deallocate
osal_msg_receive    SYMBOL "osal_msg_receive"
??osal_msg_receive?relay SYMBOL "?relay", osal_msg_receive
osal_msg_send       SYMBOL "osal_msg_send"
??osal_msg_send?relay SYMBOL "?relay", osal_msg_send
osal_set_event      SYMBOL "osal_set_event"
??osal_set_event?relay SYMBOL "?relay", osal_set_event
SPI_Interface_Init  SYMBOL "SPI_Interface_Init"
??SPI_Interface_Init?relay SYMBOL "?relay", SPI_Interface_Init
SPI_Interface_ProcessEvent SYMBOL "SPI_Interface_ProcessEvent"
??SPI_Interface_ProcessEvent?relay SYMBOL "?relay", SPI_Interface_ProcessEvent
npiCallBack         SYMBOL "npiCallBack"
??npiCallBack?relay SYMBOL "?relay", npiCallBack
parseCmd            SYMBOL "parseCmd"
??parseCmd?relay    SYMBOL "?relay", parseCmd
sendSerialEvt       SYMBOL "sendSerialEvt"
??sendSerialEvt?relay SYMBOL "?relay", sendSerialEvt

        EXTERN ??NPI_InitTransport?relay
        FUNCTION ??NPI_InitTransport?relay,00H
        EXTERN ??memcpy?relay
        FUNCTION ??memcpy?relay,00H
        EXTERN ??osal_mem_alloc?relay
        FUNCTION ??osal_mem_alloc?relay,00H
        EXTERN ??osal_msg_deallocate?relay
        FUNCTION ??osal_msg_deallocate?relay,00H
        EXTERN ??osal_msg_receive?relay
        FUNCTION ??osal_msg_receive?relay,00H
        EXTERN ??osal_msg_send?relay
        FUNCTION ??osal_msg_send?relay,00H
        EXTERN ??osal_set_event?relay
        FUNCTION ??osal_set_event?relay,00H
        EXTERN NPI_InitTransport
        FUNCTION NPI_InitTransport,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN memcpy
        FUNCTION memcpy,0200H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_mem_alloc
        FUNCTION osal_mem_alloc,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_deallocate
        FUNCTION osal_msg_deallocate,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_receive
        FUNCTION osal_msg_receive,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_send
        FUNCTION osal_msg_send,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_set_event
        FUNCTION osal_set_event,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC

// c:\Users\Administrator\Documents\Dropbox\Fish Brain\HM-10 Hack\HM-10 Firmware\Projects\ble\HostTestApp\Source\spi_interface.c
//    1 /*******************************************************************************
//    2   Filename:       npicallback.c
//    3 
//    4   *******************************************************************************/
//    5 
//    6 /*******************************************************************************
//    7  * INCLUDES
//    8  */
//    9 
//   10 #include "hal_types.h"
//   11 #include "OSAL.h"
//   12 #include "OSAL_Tasks.h"
//   13 
//   14 #include "hal_board.h"
//   15 #include "npi.h"
//   16 #include "spi_interface.h"
//   17 
//   18 /*******************************************************************************
//   19  * MACROS
//   20  */
//   21 
//   22 /*******************************************************************************
//   23  * CONSTANTS
//   24  */
//   25 
//   26 /*******************************************************************************
//   27  * TYPEDEFS
//   28  */
//   29 
//   30 /*******************************************************************************
//   31  * LOCAL VARIABLES
//   32  */
//   33 
//   34 /*******************************************************************************
//   35  * GLOBAL VARIABLES
//   36  */
//   37 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   38 static uint8 SPI_Interface_TaskID;
SPI_Interface_TaskID:
        DS 1
        REQUIRE __INIT_XDATA_Z
//   39 
//   40 /*******************************************************************************
//   41  * PROTOTYPES
//   42  */
//   43 
//   44 static void SPI_Interface_ProcessOSALMsg(osal_event_hdr_t *pMsg);
//   45 
//   46 /*******************************************************************************
//   47  * FUNCTIONS
//   48  */
//   49 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//   50 void SPI_Interface_Init(uint8 task_id)
SPI_Interface_Init:
          CFI Block cfiBlock0 Using cfiCommon0
          CFI Function SPI_Interface_Init
        CODE
//   51 {
        FUNCALL SPI_Interface_Init, NPI_InitTransport
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV     A,R1
//   52 	SPI_Interface_TaskID = task_id;
        MOV     DPTR,#SPI_Interface_TaskID
        MOVX    @DPTR,A
//   53 	NPI_InitTransport(npiCallBack);
        ; Setup parameters for call to function NPI_InitTransport
        MOV     R2,#??npiCallBack?relay & 0xff
        MOV     R3,#(??npiCallBack?relay >> 8) & 0xff
        LCALL   ??NPI_InitTransport?relay; Banked call to: NPI_InitTransport
//   54 }
        MOV     R7,#0x1
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock0
//   55 
//   56 static void SPI_Interface_ProcessOSALMsg(osal_event_hdr_t *pMsg)
//   57 {
//   58 	switch (pMsg->event)
//   59 	{
//   60 	default:
//   61 		// do nothing
//   62 		break;
//   63 	}
//   64 }
//   65 
//   66 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//   67 uint16 SPI_Interface_ProcessEvent(uint8 task_id, uint16 events)
SPI_Interface_ProcessEvent:
          CFI Block cfiBlock1 Using cfiCommon0
          CFI Function SPI_Interface_ProcessEvent
        CODE
//   68 {
        FUNCALL SPI_Interface_ProcessEvent, osal_msg_receive
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SPI_Interface_ProcessEvent, parseCmd
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SPI_Interface_ProcessEvent, osal_msg_deallocate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
//   69 	VOID task_id; // OSAL required parameter that isn't used in this function
//   70 
//   71 	if (events & SYS_EVENT_MSG)
        ANL     A,#0x80
        JZ      ??SPI_Interface_ProcessEvent_0
//   72 	{
//   73 		uint8 *pMsg;
//   74 
//   75 		if ((pMsg = osal_msg_receive(SPI_Interface_TaskID)) != NULL)
        ; Setup parameters for call to function osal_msg_receive
        MOV     DPTR,#SPI_Interface_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??osal_msg_receive?relay; Banked call to: osal_msg_receive
        MOV     A,R2
        ORL     A,R3
        JZ      ??SPI_Interface_ProcessEvent_1
//   76 		{
//   77 			//SPI_Interface_ProcessOSALMsg((osal_event_hdr_t *) pMsg);
//   78 			if (events & SPI_CMD_RX)
        MOV     A,R6
        ANL     A,#0x2
        JZ      ??SPI_Interface_ProcessEvent_2
//   79 			{
//   80 				parseCmd(pMsg);
        ; Setup parameters for call to function parseCmd
        LCALL   ??parseCmd?relay     ; Banked call to: parseCmd
//   81 
//   82 				return (events ^ SPI_CMD_RX);
        MOV     A,R6
        XRL     A,#0x2
        SJMP    ??SPI_Interface_ProcessEvent_3
//   83 			}
//   84 
//   85 			if (events & SPI_EVT_TX)
??SPI_Interface_ProcessEvent_2:
        MOV     A,R6
        ANL     A,#0x4
        JZ      ??SPI_Interface_ProcessEvent_4
//   86 			{
//   87 
//   88 				sendSerialEvt();
//   89 
//   90 				return (events ^ SPI_EVT_TX);
        MOV     A,R6
        XRL     A,#0x4
??SPI_Interface_ProcessEvent_3:
        MOV     R2,A
        MOV     A,R7
        SJMP    ??SPI_Interface_ProcessEvent_5
//   91 			}
//   92 			// Release the OSAL message
//   93 			VOID osal_msg_deallocate(pMsg);
??SPI_Interface_ProcessEvent_4:
        ; Setup parameters for call to function osal_msg_deallocate
        LCALL   ??osal_msg_deallocate?relay; Banked call to: osal_msg_deallocate
//   94 		}
//   95 
//   96 		// return unprocessed events
//   97 		return (events ^ SYS_EVENT_MSG);
??SPI_Interface_ProcessEvent_1:
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        XRL     A,#0x80
??SPI_Interface_ProcessEvent_5:
        MOV     R3,A
        SJMP    ??SPI_Interface_ProcessEvent_6
//   98 	}
//   99 	// Discard unknown events
//  100 	return 0;
??SPI_Interface_ProcessEvent_0:
        MOV     R2,#0x0
        MOV     R3,#0x0
          CFI EndBlock cfiBlock1
??SPI_Interface_ProcessEvent_6:
        REQUIRE ?Subroutine0
        ; // Fall through to label ?Subroutine0
//  101 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine0:
          CFI Block cfiBlock2 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0x2
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock2
//  102 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  103 void parseCmd(uint8 * ipacket)
parseCmd:
          CFI Block cfiBlock3 Using cfiCommon0
          CFI Function parseCmd
        CODE
//  104 {
        FUNCALL parseCmd, osal_mem_alloc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL parseCmd, memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL parseCmd, osal_msg_send
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL parseCmd, osal_set_event
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
//  105 	SPIPacket_t * packet = (SPIPacket_t*) ipacket;
//  106 	SPIPacket_t * newpacket = osal_mem_alloc(packet->Length);
        ; Setup parameters for call to function osal_mem_alloc
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        LCALL   ??osal_mem_alloc?relay; Banked call to: osal_mem_alloc
        MOV     ?V0,R2
        MOV     ?V1,R3
//  107 	(void)memcpy(newpacket, packet, packet->Length);
        ; Setup parameters for call to function memcpy
        MOV     DPL,R6
        MOV     DPH,R7
        LCALL   ?PUSH_XSTACK8_X_TWO
          CFI CFA_XSP16 add(XSP16, 14)
        MOV     A,R6
        MOV     R4,A
        MOV     A,R7
        MOV     R5,A
        LCALL   ??memcpy?relay       ; Banked call to: memcpy
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 12)
//  108 	osal_msg_send(SPI_Interface_TaskID, (uint8*) newpacket);
        ; Setup parameters for call to function osal_msg_send
        MOV     R2,?V0
        MOV     R3,?V1
        MOV     DPTR,#SPI_Interface_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??osal_msg_send?relay; Banked call to: osal_msg_send
//  109 	osal_set_event(SPI_Interface_TaskID, SPI_EVT_TX);
        ; Setup parameters for call to function osal_set_event
        MOV     R2,#0x4
        MOV     R3,#0x0
        MOV     DPTR,#SPI_Interface_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??osal_set_event?relay; Banked call to: osal_set_event
//  110 }
        MOV     R7,#0x4
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock3
//  111 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  112 void sendSerialEvt(void)
sendSerialEvt:
          CFI Block cfiBlock4 Using cfiCommon0
          CFI Function sendSerialEvt
        CODE
//  113 {
        ; Saved register size: 0
        ; Auto size: 0
//  114 
//  115 }
        LJMP    ?BRET
          CFI EndBlock cfiBlock4
//  116 
//  117 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  118 npi_serial_parse_state_t  pktState = NPI_SERIAL_STATE_LENGTH;
pktState:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  119 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  120 void npiCallBack(uint8 port, uint8 event)
npiCallBack:
          CFI Block cfiBlock5 Using cfiCommon0
          CFI Function npiCallBack
        CODE
//  121 {
        FUNCALL npiCallBack, osal_msg_send
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL npiCallBack, osal_set_event
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
//  122 	(void) port;
//  123 	osal_msg_send(SPI_Interface_TaskID, (uint8*) event);
        ; Setup parameters for call to function osal_msg_send
        MOV     R3,#0x0
        MOV     DPTR,#SPI_Interface_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??osal_msg_send?relay; Banked call to: osal_msg_send
//  124 	osal_set_event(SPI_Interface_TaskID, SPI_CMD_RX);
        ; Setup parameters for call to function osal_set_event
        MOV     R2,#0x2
        MOV     R3,#0x0
        MOV     DPTR,#SPI_Interface_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??osal_set_event?relay; Banked call to: osal_set_event
//  125 }
        SJMP    ?Subroutine0
          CFI EndBlock cfiBlock5

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??SPI_Interface_Init?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    SPI_Interface_Init

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??SPI_Interface_ProcessEvent?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    SPI_Interface_ProcessEvent

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??parseCmd?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    parseCmd

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??sendSerialEvt?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    sendSerialEvt

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??npiCallBack?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    npiCallBack

        END
//  126 
//  127 /*******************************************************************************
//  128  ******************************************************************************/
// 
// 197 bytes in segment BANKED_CODE
//  30 bytes in segment BANK_RELAYS
//   2 bytes in segment XDATA_Z
// 
// 227 bytes of CODE  memory
//   2 bytes of XDATA memory
//
//Errors: none
//Warnings: 2
